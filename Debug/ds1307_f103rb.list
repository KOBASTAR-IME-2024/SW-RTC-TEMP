
ds1307_f103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000919c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  080092b0  080092b0  000192b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b4  080099b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080099b4  080099b4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099b4  080099b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080099bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200001e0  08009b9c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08009b9c  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f71e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002569  00000000  00000000  0002f927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00031e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00032e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019076  00000000  00000000  00033d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dba  00000000  00000000  0004ce06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dcaa  00000000  00000000  0005fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed86a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ec  00000000  00000000  000ed8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009294 	.word	0x08009294

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009294 	.word	0x08009294

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <usDelay>:
 */

#include "DHT11.h"
#include "main.h"

void usDelay(uint16_t time){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <usDelay+0x2c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim2)< time);
 8000e06:	bf00      	nop
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <usDelay+0x2c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3f9      	bcc.n	8000e08 <usDelay+0x14>

}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	200004f8 	.word	0x200004f8

08000e24 <SetInput>:

void SetInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

	  GPIO_InitStruct.Pin = DHT11_SENS_Pin;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(DHT11_SENS_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4619      	mov	r1, r3
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <SetInput+0x40>)
 8000e56:	f001 fc5b 	bl	8002710 <HAL_GPIO_Init>

}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <SetOutput>:

void SetOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]

	  GPIO_InitStruct.Pin = DHT11_SENS_Pin;
 8000e82:	2308      	movs	r3, #8
 8000e84:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e86:	2311      	movs	r3, #17
 8000e88:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(DHT11_SENS_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <SetOutput+0x40>)
 8000e9a:	f001 fc39 	bl	8002710 <HAL_GPIO_Init>

}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40010c00 	.word	0x40010c00

08000eac <DHT11_Read>:

uint8_t DHT11_Read(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0

		for (int a = 0; a < 40; a++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e007      	b.n	8000ec8 <DHT11_Read+0x1c>
	        mData[a] = 0;
 8000eb8:	4a90      	ldr	r2, [pc, #576]	; (80010fc <DHT11_Read+0x250>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 40; a++) {
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b27      	cmp	r3, #39	; 0x27
 8000ecc:	ddf4      	ble.n	8000eb8 <DHT11_Read+0xc>
	    }
	    mTime1 = 0,
 8000ece:	4b8c      	ldr	r3, [pc, #560]	; (8001100 <DHT11_Read+0x254>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	801a      	strh	r2, [r3, #0]
		mTime2 = 0,
 8000ed4:	4b8b      	ldr	r3, [pc, #556]	; (8001104 <DHT11_Read+0x258>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	801a      	strh	r2, [r3, #0]
		durum=0,
 8000eda:	4b8b      	ldr	r3, [pc, #556]	; (8001108 <DHT11_Read+0x25c>)
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
		tempVal=0,
 8000ee2:	4b8a      	ldr	r3, [pc, #552]	; (800110c <DHT11_Read+0x260>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	801a      	strh	r2, [r3, #0]
		humVal=0,
 8000ee8:	4b89      	ldr	r3, [pc, #548]	; (8001110 <DHT11_Read+0x264>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	801a      	strh	r2, [r3, #0]
		parityVal = 0,
 8000eee:	4b89      	ldr	r3, [pc, #548]	; (8001114 <DHT11_Read+0x268>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
		genParity = 0,
 8000ef4:	4b88      	ldr	r3, [pc, #544]	; (8001118 <DHT11_Read+0x26c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
		mbit = 0;
 8000efa:	4b88      	ldr	r3, [pc, #544]	; (800111c <DHT11_Read+0x270>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	801a      	strh	r2, [r3, #0]

	    SetOutput(DHT11_PORT,DHT11_PIN);
 8000f00:	2108      	movs	r1, #8
 8000f02:	4887      	ldr	r0, [pc, #540]	; (8001120 <DHT11_Read+0x274>)
 8000f04:	f7ff ffb0 	bl	8000e68 <SetOutput>
		HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	4884      	ldr	r0, [pc, #528]	; (8001120 <DHT11_Read+0x274>)
 8000f0e:	f001 fd9a 	bl	8002a46 <HAL_GPIO_WritePin>
	    usDelay(18000);
 8000f12:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f16:	f7ff ff6d 	bl	8000df4 <usDelay>
	    SetInput(DHT11_PORT,DHT11_PIN);
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	4880      	ldr	r0, [pc, #512]	; (8001120 <DHT11_Read+0x274>)
 8000f1e:	f7ff ff81 	bl	8000e24 <SetInput>

		 __HAL_TIM_SET_COUNTER(&htim2, 0);				//set timer counter to zero
 8000f22:	4b80      	ldr	r3, [pc, #512]	; (8001124 <DHT11_Read+0x278>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 8000f2a:	e008      	b.n	8000f3e <DHT11_Read+0x92>
		if((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) > 500)
 8000f2c:	4b7d      	ldr	r3, [pc, #500]	; (8001124 <DHT11_Read+0x278>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f38:	d901      	bls.n	8000f3e <DHT11_Read+0x92>
			return 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e131      	b.n	80011a2 <DHT11_Read+0x2f6>
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 8000f3e:	2108      	movs	r1, #8
 8000f40:	4877      	ldr	r0, [pc, #476]	; (8001120 <DHT11_Read+0x274>)
 8000f42:	f001 fd69 	bl	8002a18 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d0ef      	beq.n	8000f2c <DHT11_Read+0x80>

		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f4c:	4b75      	ldr	r3, [pc, #468]	; (8001124 <DHT11_Read+0x278>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET)
 8000f54:	e008      	b.n	8000f68 <DHT11_Read+0xbc>
		if((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) > 500)
 8000f56:	4b73      	ldr	r3, [pc, #460]	; (8001124 <DHT11_Read+0x278>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f62:	d901      	bls.n	8000f68 <DHT11_Read+0xbc>
			return 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e11c      	b.n	80011a2 <DHT11_Read+0x2f6>
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET)
 8000f68:	2108      	movs	r1, #8
 8000f6a:	486d      	ldr	r0, [pc, #436]	; (8001120 <DHT11_Read+0x274>)
 8000f6c:	f001 fd54 	bl	8002a18 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0ef      	beq.n	8000f56 <DHT11_Read+0xaa>


		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim2);
 8000f76:	4b6b      	ldr	r3, [pc, #428]	; (8001124 <DHT11_Read+0x278>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b60      	ldr	r3, [pc, #384]	; (8001100 <DHT11_Read+0x254>)
 8000f80:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f82:	4b68      	ldr	r3, [pc, #416]	; (8001124 <DHT11_Read+0x278>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 8000f8a:	e008      	b.n	8000f9e <DHT11_Read+0xf2>

		if((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) > 500)
 8000f8c:	4b65      	ldr	r3, [pc, #404]	; (8001124 <DHT11_Read+0x278>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f98:	d901      	bls.n	8000f9e <DHT11_Read+0xf2>
		return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e101      	b.n	80011a2 <DHT11_Read+0x2f6>
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	485f      	ldr	r0, [pc, #380]	; (8001120 <DHT11_Read+0x274>)
 8000fa2:	f001 fd39 	bl	8002a18 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d0ef      	beq.n	8000f8c <DHT11_Read+0xe0>

	    mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim2);
 8000fac:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <DHT11_Read+0x278>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b53      	ldr	r3, [pc, #332]	; (8001104 <DHT11_Read+0x258>)
 8000fb6:	801a      	strh	r2, [r3, #0]


		if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8000fb8:	4b51      	ldr	r3, [pc, #324]	; (8001100 <DHT11_Read+0x254>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	2b4a      	cmp	r3, #74	; 0x4a
 8000fbe:	d80d      	bhi.n	8000fdc <DHT11_Read+0x130>
 8000fc0:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <DHT11_Read+0x254>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	2b55      	cmp	r3, #85	; 0x55
 8000fc6:	d909      	bls.n	8000fdc <DHT11_Read+0x130>
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <DHT11_Read+0x258>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	2b4a      	cmp	r3, #74	; 0x4a
 8000fce:	d805      	bhi.n	8000fdc <DHT11_Read+0x130>
 8000fd0:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <DHT11_Read+0x258>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	2b55      	cmp	r3, #85	; 0x55
 8000fd6:	d901      	bls.n	8000fdc <DHT11_Read+0x130>
			return 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e0e2      	b.n	80011a2 <DHT11_Read+0x2f6>





		for(int j = 0; j < 40; j++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e051      	b.n	8001086 <DHT11_Read+0x1da>
		{
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000fe2:	4b50      	ldr	r3, [pc, #320]	; (8001124 <DHT11_Read+0x278>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
			while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) > 500) return 0;
 8000fea:	e008      	b.n	8000ffe <DHT11_Read+0x152>
 8000fec:	4b4d      	ldr	r3, [pc, #308]	; (8001124 <DHT11_Read+0x278>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff8:	d901      	bls.n	8000ffe <DHT11_Read+0x152>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e0d1      	b.n	80011a2 <DHT11_Read+0x2f6>
 8000ffe:	2108      	movs	r1, #8
 8001000:	4847      	ldr	r0, [pc, #284]	; (8001120 <DHT11_Read+0x274>)
 8001002:	f001 fd09 	bl	8002a18 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0ef      	beq.n	8000fec <DHT11_Read+0x140>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800100c:	4b45      	ldr	r3, [pc, #276]	; (8001124 <DHT11_Read+0x278>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
			while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim2) > 500) return 0;
 8001014:	e008      	b.n	8001028 <DHT11_Read+0x17c>
 8001016:	4b43      	ldr	r3, [pc, #268]	; (8001124 <DHT11_Read+0x278>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	b29b      	uxth	r3, r3
 800101e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001022:	d901      	bls.n	8001028 <DHT11_Read+0x17c>
 8001024:	2300      	movs	r3, #0
 8001026:	e0bc      	b.n	80011a2 <DHT11_Read+0x2f6>
 8001028:	2108      	movs	r1, #8
 800102a:	483d      	ldr	r0, [pc, #244]	; (8001120 <DHT11_Read+0x274>)
 800102c:	f001 fcf4 	bl	8002a18 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d0ef      	beq.n	8001016 <DHT11_Read+0x16a>
			mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim2);
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <DHT11_Read+0x278>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <DHT11_Read+0x254>)
 8001040:	801a      	strh	r2, [r3, #0]

			//check pass time in high state
			//if pass time 25uS set as LOW
			if(mTime1 > 20 && mTime1 < 30)
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <DHT11_Read+0x254>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	2b14      	cmp	r3, #20
 8001048:	d907      	bls.n	800105a <DHT11_Read+0x1ae>
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <DHT11_Read+0x254>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	2b1d      	cmp	r3, #29
 8001050:	d803      	bhi.n	800105a <DHT11_Read+0x1ae>
			{
				mbit = 0;
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <DHT11_Read+0x270>)
 8001054:	2200      	movs	r2, #0
 8001056:	801a      	strh	r2, [r3, #0]
 8001058:	e00a      	b.n	8001070 <DHT11_Read+0x1c4>
			}
			else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <DHT11_Read+0x254>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	2b3c      	cmp	r3, #60	; 0x3c
 8001060:	d906      	bls.n	8001070 <DHT11_Read+0x1c4>
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <DHT11_Read+0x254>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	2b4f      	cmp	r3, #79	; 0x4f
 8001068:	d802      	bhi.n	8001070 <DHT11_Read+0x1c4>
			{
				 mbit = 1;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <DHT11_Read+0x270>)
 800106c:	2201      	movs	r2, #1
 800106e:	801a      	strh	r2, [r3, #0]
			}

			//set i th data in data buffer
			mData[j] = mbit;
 8001070:	4b2a      	ldr	r3, [pc, #168]	; (800111c <DHT11_Read+0x270>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	b2d9      	uxtb	r1, r3
 8001076:	4a21      	ldr	r2, [pc, #132]	; (80010fc <DHT11_Read+0x250>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4413      	add	r3, r2
 800107c:	460a      	mov	r2, r1
 800107e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 40; j++)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	3301      	adds	r3, #1
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	2b27      	cmp	r3, #39	; 0x27
 800108a:	ddaa      	ble.n	8000fe2 <DHT11_Read+0x136>

		}

		//get hum value from data buffer
		for(int i = 0; i < 8; i++)
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e013      	b.n	80010ba <DHT11_Read+0x20e>
		{
			humVal += mData[i];
 8001092:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <DHT11_Read+0x250>)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <DHT11_Read+0x264>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <DHT11_Read+0x264>)
 80010a6:	801a      	strh	r2, [r3, #0]
			humVal = humVal << 1;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <DHT11_Read+0x264>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <DHT11_Read+0x264>)
 80010b2:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < 8; i++)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b07      	cmp	r3, #7
 80010be:	dde8      	ble.n	8001092 <DHT11_Read+0x1e6>
		}

		//get temp value from data buffer
		for(int i = 16; i < 24; i++)
 80010c0:	2310      	movs	r3, #16
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	e013      	b.n	80010ee <DHT11_Read+0x242>
		{
			tempVal += mData[i];
 80010c6:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <DHT11_Read+0x250>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <DHT11_Read+0x260>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <DHT11_Read+0x260>)
 80010da:	801a      	strh	r2, [r3, #0]
			tempVal = tempVal << 1;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <DHT11_Read+0x260>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <DHT11_Read+0x260>)
 80010e6:	801a      	strh	r2, [r3, #0]
		for(int i = 16; i < 24; i++)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b17      	cmp	r3, #23
 80010f2:	dde8      	ble.n	80010c6 <DHT11_Read+0x21a>
		}

		//get parity value from data buffer
		for(int i = 32; i < 40; i++)
 80010f4:	2320      	movs	r3, #32
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	e029      	b.n	800114e <DHT11_Read+0x2a2>
 80010fa:	bf00      	nop
 80010fc:	2000055c 	.word	0x2000055c
 8001100:	20000584 	.word	0x20000584
 8001104:	20000586 	.word	0x20000586
 8001108:	20000548 	.word	0x20000548
 800110c:	20000554 	.word	0x20000554
 8001110:	20000556 	.word	0x20000556
 8001114:	2000058a 	.word	0x2000058a
 8001118:	2000058b 	.word	0x2000058b
 800111c:	20000588 	.word	0x20000588
 8001120:	40010c00 	.word	0x40010c00
 8001124:	200004f8 	.word	0x200004f8
		{
			parityVal += mData[i];
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <DHT11_Read+0x300>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <DHT11_Read+0x304>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4413      	add	r3, r2
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <DHT11_Read+0x304>)
 800113a:	701a      	strb	r2, [r3, #0]
			parityVal = parityVal << 1;
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <DHT11_Read+0x304>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <DHT11_Read+0x304>)
 8001146:	701a      	strb	r2, [r3, #0]
		for(int i = 32; i < 40; i++)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b27      	cmp	r3, #39	; 0x27
 8001152:	dde9      	ble.n	8001128 <DHT11_Read+0x27c>
		}

		parityVal = parityVal >> 1;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <DHT11_Read+0x304>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	085b      	lsrs	r3, r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <DHT11_Read+0x304>)
 800115e:	701a      	strb	r2, [r3, #0]
		humVal = humVal >> 1;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <DHT11_Read+0x308>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	085b      	lsrs	r3, r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <DHT11_Read+0x308>)
 800116a:	801a      	strh	r2, [r3, #0]
		tempVal = tempVal >> 1;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <DHT11_Read+0x30c>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	085b      	lsrs	r3, r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <DHT11_Read+0x30c>)
 8001176:	801a      	strh	r2, [r3, #0]

		genParity = humVal + tempVal;
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <DHT11_Read+0x308>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <DHT11_Read+0x30c>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <DHT11_Read+0x310>)
 800118a:	701a      	strb	r2, [r3, #0]


		dhtVal[0]= tempVal;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <DHT11_Read+0x30c>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <DHT11_Read+0x314>)
 8001194:	701a      	strb	r2, [r3, #0]
		dhtVal[1] = humVal;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <DHT11_Read+0x308>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <DHT11_Read+0x314>)
 800119e:	705a      	strb	r2, [r3, #1]

		return 1;
 80011a0:	2301      	movs	r3, #1

}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000055c 	.word	0x2000055c
 80011b0:	2000058a 	.word	0x2000058a
 80011b4:	20000556 	.word	0x20000556
 80011b8:	20000554 	.word	0x20000554
 80011bc:	2000058b 	.word	0x2000058b
 80011c0:	20000558 	.word	0x20000558

080011c4 <Nokia5110_Init>:
 */

#include "Nokia5110.h"

uint8_t frameBuff[504];
bool Nokia5110_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

	Nokia5110_Reset();
 80011c8:	f000 f870 	bl	80012ac <Nokia5110_Reset>

	if(!Nokia5110_Write(0x21, 0))  //the Command Set in addition mode
 80011cc:	2100      	movs	r1, #0
 80011ce:	2021      	movs	r0, #33	; 0x21
 80011d0:	f000 f996 	bl	8001500 <Nokia5110_Write>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <Nokia5110_Init+0x20>
		return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e03c      	b.n	800125e <Nokia5110_Init+0x9a>

	if(!Nokia5110_Write(0xBA, 0))  //To send Command Set Voltage VOP ,ORIJINALI 0xC0
 80011e4:	2100      	movs	r1, #0
 80011e6:	20ba      	movs	r0, #186	; 0xba
 80011e8:	f000 f98a 	bl	8001500 <Nokia5110_Write>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f083 0301 	eor.w	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <Nokia5110_Init+0x38>
		return false;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e030      	b.n	800125e <Nokia5110_Init+0x9a>

	if(!Nokia5110_Write(0x07, 0))  //To send Command for setting value of Temp Control
 80011fc:	2100      	movs	r1, #0
 80011fe:	2007      	movs	r0, #7
 8001200:	f000 f97e 	bl	8001500 <Nokia5110_Write>
 8001204:	4603      	mov	r3, r0
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <Nokia5110_Init+0x50>
		return false;
 8001210:	2300      	movs	r3, #0
 8001212:	e024      	b.n	800125e <Nokia5110_Init+0x9a>

	if(!Nokia5110_Write(0x13, 0))  //To send Command to set value of Voltage Bias System
 8001214:	2100      	movs	r1, #0
 8001216:	2013      	movs	r0, #19
 8001218:	f000 f972 	bl	8001500 <Nokia5110_Write>
 800121c:	4603      	mov	r3, r0
 800121e:	f083 0301 	eor.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <Nokia5110_Init+0x68>
		return false;
 8001228:	2300      	movs	r3, #0
 800122a:	e018      	b.n	800125e <Nokia5110_Init+0x9a>

	if(!Nokia5110_Write(0x20, 0)) //the Command Set in basic mode
 800122c:	2100      	movs	r1, #0
 800122e:	2020      	movs	r0, #32
 8001230:	f000 f966 	bl	8001500 <Nokia5110_Write>
 8001234:	4603      	mov	r3, r0
 8001236:	f083 0301 	eor.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <Nokia5110_Init+0x80>
		return false;
 8001240:	2300      	movs	r3, #0
 8001242:	e00c      	b.n	800125e <Nokia5110_Init+0x9a>

	if(!Nokia5110_Write(0x0C, 0))  //setting LCD to display results in Normal Mode
 8001244:	2100      	movs	r1, #0
 8001246:	200c      	movs	r0, #12
 8001248:	f000 f95a 	bl	8001500 <Nokia5110_Write>
 800124c:	4603      	mov	r3, r0
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <Nokia5110_Init+0x98>
		return false;
 8001258:	2300      	movs	r3, #0
 800125a:	e000      	b.n	800125e <Nokia5110_Init+0x9a>

	return true;
 800125c:	2301      	movs	r3, #1

}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <Nokia5110_Update>:

bool Nokia5110_Update(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

	if(!Nokia5110_Write(0x80, 0))
 8001268:	2100      	movs	r1, #0
 800126a:	2080      	movs	r0, #128	; 0x80
 800126c:	f000 f948 	bl	8001500 <Nokia5110_Write>
 8001270:	4603      	mov	r3, r0
 8001272:	f083 0301 	eor.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <Nokia5110_Update+0x1c>
		return false;
 800127c:	2300      	movs	r3, #0
 800127e:	e011      	b.n	80012a4 <Nokia5110_Update+0x40>

	if(!Nokia5110_Write(0x40, 0))
 8001280:	2100      	movs	r1, #0
 8001282:	2040      	movs	r0, #64	; 0x40
 8001284:	f000 f93c 	bl	8001500 <Nokia5110_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	f083 0301 	eor.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <Nokia5110_Update+0x34>
		return false;
 8001294:	2300      	movs	r3, #0
 8001296:	e005      	b.n	80012a4 <Nokia5110_Update+0x40>

	Nokia5110_BufferWrite(frameBuff, 504);
 8001298:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <Nokia5110_Update+0x44>)
 800129e:	f000 f969 	bl	8001574 <Nokia5110_BufferWrite>

	return true;
 80012a2:	2301      	movs	r3, #1

}
 80012a4:	4618      	mov	r0, r3
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001fc 	.word	0x200001fc

080012ac <Nokia5110_Reset>:


void Nokia5110_Reset() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	  //RST Pin is Low
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <Nokia5110_Reset+0x28>)
 80012b8:	f001 fbc5 	bl	8002a46 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f000 ff07 	bl	80020d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); 	  //RST Pin is High
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <Nokia5110_Reset+0x28>)
 80012ca:	f001 fbbc 	bl	8002a46 <HAL_GPIO_WritePin>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010c00 	.word	0x40010c00

080012d8 <Nokia5110_Clear>:


void Nokia5110_Clear(void){
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

	for(int i = 0; i<504; i++)		//LCD_WIDTH * LCD_HEIGHT / 8
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	e007      	b.n	80012f4 <Nokia5110_Clear+0x1c>
		frameBuff[i] = 0x00;		//X-Address and Y-Address has been cleaned
 80012e4:	4a08      	ldr	r2, [pc, #32]	; (8001308 <Nokia5110_Clear+0x30>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<504; i++)		//LCD_WIDTH * LCD_HEIGHT / 8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3301      	adds	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80012fa:	dbf3      	blt.n	80012e4 <Nokia5110_Clear+0xc>

}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	200001fc 	.word	0x200001fc

0800130c <Nokia5110_SetPixel>:

void Nokia5110_SetPixel(uint8_t x, uint8_t y, bool bw){
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	460b      	mov	r3, r1
 8001318:	71bb      	strb	r3, [r7, #6]
 800131a:	4613      	mov	r3, r2
 800131c:	717b      	strb	r3, [r7, #5]

	uint8_t Bi;
	uint16_t By;

	if(x < 0 || x >= LCD_WIDTH || y < 0 || y >= LCD_HEIGHT)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b53      	cmp	r3, #83	; 0x53
 8001322:	d83b      	bhi.n	800139c <Nokia5110_SetPixel+0x90>
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b2f      	cmp	r3, #47	; 0x2f
 8001328:	d838      	bhi.n	800139c <Nokia5110_SetPixel+0x90>
		return;

	By = (y / 8) * 84 + x;
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	0052      	lsls	r2, r2, #1
 8001336:	4413      	add	r3, r2
 8001338:	461a      	mov	r2, r3
 800133a:	00d2      	lsls	r2, r2, #3
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	b29a      	uxth	r2, r3
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	81fb      	strh	r3, [r7, #14]
	Bi = y % 8;
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	737b      	strb	r3, [r7, #13]

	if(bw){
 8001352:	797b      	ldrb	r3, [r7, #5]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00f      	beq.n	8001378 <Nokia5110_SetPixel+0x6c>

		frameBuff[By] |= (1<<Bi);
 8001358:	89fb      	ldrh	r3, [r7, #14]
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <Nokia5110_SetPixel+0x9c>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	b25a      	sxtb	r2, r3
 8001360:	7b7b      	ldrb	r3, [r7, #13]
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	b25b      	sxtb	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b25a      	sxtb	r2, r3
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	b2d1      	uxtb	r1, r2
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <Nokia5110_SetPixel+0x9c>)
 8001374:	54d1      	strb	r1, [r2, r3]
 8001376:	e012      	b.n	800139e <Nokia5110_SetPixel+0x92>
	}
	else{

		frameBuff[By] &= ~(1<<Bi);
 8001378:	89fb      	ldrh	r3, [r7, #14]
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <Nokia5110_SetPixel+0x9c>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	b25a      	sxtb	r2, r3
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	b25b      	sxtb	r3, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	b25b      	sxtb	r3, r3
 800138e:	4013      	ands	r3, r2
 8001390:	b25a      	sxtb	r2, r3
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	b2d1      	uxtb	r1, r2
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <Nokia5110_SetPixel+0x9c>)
 8001398:	54d1      	strb	r1, [r2, r3]
 800139a:	e000      	b.n	800139e <Nokia5110_SetPixel+0x92>
		return;
 800139c:	bf00      	nop
	}
}
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200001fc 	.word	0x200001fc

080013ac <setChar>:
	Nokia5110_SetPixel(x, y, WHITE); // call setPixel with bw set to white
}


void setChar(char character, int x, int y, bool bw)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	4613      	mov	r3, r2
 80013be:	73bb      	strb	r3, [r7, #14]
  int column; // temp byte to store character's column bitmap
  for (int i=0; i<5; i++) // 5 columns (x) per character
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	e04b      	b.n	800145e <setChar+0xb2>
  {
    column = ASCII[character - 0x20][i];
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	f1a3 0220 	sub.w	r2, r3, #32
 80013cc:	4928      	ldr	r1, [pc, #160]	; (8001470 <setChar+0xc4>)
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	18ca      	adds	r2, r1, r3
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	617b      	str	r3, [r7, #20]
    for (int j=0; j<8; j++) // 8 rows (y) per character
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	e036      	b.n	8001452 <setChar+0xa6>
    {
      if (column & (0x01 << j)) // test bits to set pixels
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	fa42 f303 	asr.w	r3, r2, r3
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d010      	beq.n	8001416 <setChar+0x6a>
    	  Nokia5110_SetPixel(x+i, y+j, bw);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4413      	add	r3, r2
 800140a:	b2db      	uxtb	r3, r3
 800140c:	7bba      	ldrb	r2, [r7, #14]
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff ff7c 	bl	800130c <Nokia5110_SetPixel>
 8001414:	e01a      	b.n	800144c <setChar+0xa0>
      else
    	  Nokia5110_SetPixel(x+i, y+j, !bw);
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4413      	add	r3, r2
 8001420:	b2d8      	uxtb	r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b2d9      	uxtb	r1, r3
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f083 0301 	eor.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	f7ff ff60 	bl	800130c <Nokia5110_SetPixel>
    for (int j=0; j<8; j++) // 8 rows (y) per character
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	3301      	adds	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b07      	cmp	r3, #7
 8001456:	ddc5      	ble.n	80013e4 <setChar+0x38>
  for (int i=0; i<5; i++) // 5 columns (x) per character
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	3301      	adds	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	2b04      	cmp	r3, #4
 8001462:	ddb0      	ble.n	80013c6 <setChar+0x1a>
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	080092fc 	.word	0x080092fc

08001474 <Nokia5110_setStr>:


void Nokia5110_setStr(char  *dString, int x, int y, bool bw)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	70fb      	strb	r3, [r7, #3]
  while (*dString != 0x00) // loop until null terminator
 8001482:	e034      	b.n	80014ee <Nokia5110_setStr+0x7a>
  {
    setChar(*dString++, x, y, bw);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60fa      	str	r2, [r7, #12]
 800148a:	7818      	ldrb	r0, [r3, #0]
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	f7ff ff8b 	bl	80013ac <setChar>
    x+=5;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3305      	adds	r3, #5
 800149a:	60bb      	str	r3, [r7, #8]
    for (int i=y; i<y+8; i++)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e015      	b.n	80014ce <Nokia5110_setStr+0x5a>
    {
    	Nokia5110_SetPixel(x, i, !bw);
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	b2d8      	uxtb	r0, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	b2d9      	uxtb	r1, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f083 0301 	eor.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	f7ff ff22 	bl	800130c <Nokia5110_SetPixel>
    for (int i=y; i<y+8; i++)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3307      	adds	r3, #7
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dde4      	ble.n	80014a2 <Nokia5110_setStr+0x2e>
    }
    x++;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3301      	adds	r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
    if (x > (LCD_WIDTH - 5)) // Enables wrap around
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b4f      	cmp	r3, #79	; 0x4f
 80014e2:	dd04      	ble.n	80014ee <Nokia5110_setStr+0x7a>
    {
      x = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
      y += 8;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3308      	adds	r3, #8
 80014ec:	607b      	str	r3, [r7, #4]
  while (*dString != 0x00) // loop until null terminator
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1c6      	bne.n	8001484 <Nokia5110_setStr+0x10>
    }
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <Nokia5110_Write>:


bool Nokia5110_Write (uint8_t data, uint8_t mode)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	460a      	mov	r2, r1
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	4613      	mov	r3, r2
 800150e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 , GPIO_PIN_RESET);    //CE Pin is Low
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <Nokia5110_Write+0x68>)
 8001518:	f001 fa95 	bl	8002a46 <HAL_GPIO_WritePin>

	if(mode == 0)
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d105      	bne.n	800152e <Nokia5110_Write+0x2e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //DC Pin is Low for data send
 8001522:	2200      	movs	r2, #0
 8001524:	2110      	movs	r1, #16
 8001526:	4811      	ldr	r0, [pc, #68]	; (800156c <Nokia5110_Write+0x6c>)
 8001528:	f001 fa8d 	bl	8002a46 <HAL_GPIO_WritePin>
 800152c:	e010      	b.n	8001550 <Nokia5110_Write+0x50>

	else if(mode == 1)
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <Nokia5110_Write+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	  //DC Pin is High for command send
 8001534:	2201      	movs	r2, #1
 8001536:	2110      	movs	r1, #16
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <Nokia5110_Write+0x6c>)
 800153a:	f001 fa84 	bl	8002a46 <HAL_GPIO_WritePin>
 800153e:	e007      	b.n	8001550 <Nokia5110_Write+0x50>

	else{

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 , GPIO_PIN_SET);  //CE Pin is High
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <Nokia5110_Write+0x68>)
 8001548:	f001 fa7d 	bl	8002a46 <HAL_GPIO_WritePin>
		return false;
 800154c:	2300      	movs	r3, #0
 800154e:	e006      	b.n	800155e <Nokia5110_Write+0x5e>
	}
	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <Nokia5110_Write+0x70>)
 8001558:	f002 fd90 	bl	800407c <HAL_SPI_Transmit_DMA>

	return true;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40010800 	.word	0x40010800
 800156c:	40010c00 	.word	0x40010c00
 8001570:	2000045c 	.word	0x2000045c

08001574 <Nokia5110_BufferWrite>:

 void Nokia5110_BufferWrite(uint8_t* data, uint16_t length){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 , GPIO_PIN_RESET);    //CE Pin is Low
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001586:	4809      	ldr	r0, [pc, #36]	; (80015ac <Nokia5110_BufferWrite+0x38>)
 8001588:	f001 fa5d 	bl	8002a46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);	  	  //DC Pin is High for command send
 800158c:	2201      	movs	r2, #1
 800158e:	2110      	movs	r1, #16
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <Nokia5110_BufferWrite+0x3c>)
 8001592:	f001 fa58 	bl	8002a46 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&hspi2, data, length);
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	461a      	mov	r2, r3
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <Nokia5110_BufferWrite+0x40>)
 800159e:	f002 fd6d 	bl	800407c <HAL_SPI_Transmit_DMA>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	2000045c 	.word	0x2000045c

080015b8 <BCDToDec>:
uint8_t DecToBCD(int dec){

	return (uint8_t) ((dec/10 * 16) + (dec % 10));
}

int BCDToDec(uint8_t bdc){
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]

	return (int) ((bdc/16 * 10 ) + (bdc % 16));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	461a      	mov	r2, r3
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	4413      	add	r3, r2
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
	...

080015e8 <getTime>:

void getTime(DS1307_TIME_t* time){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	6078      	str	r0, [r7, #4]

	uint8_t currentTime[7];
	HAL_I2C_Mem_Read(&hi2c1, DS1307_ADDRESS, 0x00, 1, currentTime, sizeof(currentTime), 10);
 80015f0:	230a      	movs	r3, #10
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2307      	movs	r3, #7
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	2200      	movs	r2, #0
 8001602:	21d0      	movs	r1, #208	; 0xd0
 8001604:	481f      	ldr	r0, [pc, #124]	; (8001684 <getTime+0x9c>)
 8001606:	f001 fb7b 	bl	8002d00 <HAL_I2C_Mem_Read>


	time->Seconds 		= BCDToDec(currentTime[0]);
 800160a:	7a3b      	ldrb	r3, [r7, #8]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ffd3 	bl	80015b8 <BCDToDec>
 8001612:	4603      	mov	r3, r0
 8001614:	b2da      	uxtb	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	701a      	strb	r2, [r3, #0]
	time->Minutes 		= BCDToDec(currentTime[1]);
 800161a:	7a7b      	ldrb	r3, [r7, #9]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ffcb 	bl	80015b8 <BCDToDec>
 8001622:	4603      	mov	r3, r0
 8001624:	b2da      	uxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	705a      	strb	r2, [r3, #1]
	time->Hours 		= BCDToDec(currentTime[2]);
 800162a:	7abb      	ldrb	r3, [r7, #10]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ffc3 	bl	80015b8 <BCDToDec>
 8001632:	4603      	mov	r3, r0
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	709a      	strb	r2, [r3, #2]
	time->DayOfWeek 	= BCDToDec(currentTime[3]);
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ffbb 	bl	80015b8 <BCDToDec>
 8001642:	4603      	mov	r3, r0
 8001644:	b2da      	uxtb	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	70da      	strb	r2, [r3, #3]
	time->DayOfMonth	= BCDToDec(currentTime[4]);
 800164a:	7b3b      	ldrb	r3, [r7, #12]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ffb3 	bl	80015b8 <BCDToDec>
 8001652:	4603      	mov	r3, r0
 8001654:	b2da      	uxtb	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	711a      	strb	r2, [r3, #4]
	time->Month			= BCDToDec(currentTime[5]);
 800165a:	7b7b      	ldrb	r3, [r7, #13]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ffab 	bl	80015b8 <BCDToDec>
 8001662:	4603      	mov	r3, r0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	715a      	strb	r2, [r3, #5]
	time->Year 			= BCDToDec(currentTime[6]);
 800166a:	7bbb      	ldrb	r3, [r7, #14]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ffa3 	bl	80015b8 <BCDToDec>
 8001672:	4603      	mov	r3, r0
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	719a      	strb	r2, [r3, #6]

	}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000408 	.word	0x20000408

08001688 <Nokia5110_Text>:
#include "ds1307.h"

char writeString[20]={0};
extern DS1307_TIME_t time_tr;

void Nokia5110_Text(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

	 	  Nokia5110_Clear();
 800168c:	f7ff fe24 	bl	80012d8 <Nokia5110_Clear>
		  Nokia5110_setStr("TIME", 0, 0, BLACK);
 8001690:	2301      	movs	r3, #1
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	485c      	ldr	r0, [pc, #368]	; (8001808 <Nokia5110_Text+0x180>)
 8001698:	f7ff feec 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr(":", 42, 0, BLACK);
 800169c:	2301      	movs	r3, #1
 800169e:	2200      	movs	r2, #0
 80016a0:	212a      	movs	r1, #42	; 0x2a
 80016a2:	485a      	ldr	r0, [pc, #360]	; (800180c <Nokia5110_Text+0x184>)
 80016a4:	f7ff fee6 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr(":", 60, 0, BLACK);
 80016a8:	2301      	movs	r3, #1
 80016aa:	2200      	movs	r2, #0
 80016ac:	213c      	movs	r1, #60	; 0x3c
 80016ae:	4857      	ldr	r0, [pc, #348]	; (800180c <Nokia5110_Text+0x184>)
 80016b0:	f7ff fee0 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr("DATE", 0, 10, BLACK);
 80016b4:	2301      	movs	r3, #1
 80016b6:	220a      	movs	r2, #10
 80016b8:	2100      	movs	r1, #0
 80016ba:	4855      	ldr	r0, [pc, #340]	; (8001810 <Nokia5110_Text+0x188>)
 80016bc:	f7ff feda 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr("/", 42, 10, BLACK);
 80016c0:	2301      	movs	r3, #1
 80016c2:	220a      	movs	r2, #10
 80016c4:	212a      	movs	r1, #42	; 0x2a
 80016c6:	4853      	ldr	r0, [pc, #332]	; (8001814 <Nokia5110_Text+0x18c>)
 80016c8:	f7ff fed4 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr("/", 56, 10, BLACK);
 80016cc:	2301      	movs	r3, #1
 80016ce:	220a      	movs	r2, #10
 80016d0:	2138      	movs	r1, #56	; 0x38
 80016d2:	4850      	ldr	r0, [pc, #320]	; (8001814 <Nokia5110_Text+0x18c>)
 80016d4:	f7ff fece 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr("20", 60, 10, BLACK);
 80016d8:	2301      	movs	r3, #1
 80016da:	220a      	movs	r2, #10
 80016dc:	213c      	movs	r1, #60	; 0x3c
 80016de:	484e      	ldr	r0, [pc, #312]	; (8001818 <Nokia5110_Text+0x190>)
 80016e0:	f7ff fec8 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr("TEMP", 0, 20, BLACK);
 80016e4:	2301      	movs	r3, #1
 80016e6:	2214      	movs	r2, #20
 80016e8:	2100      	movs	r1, #0
 80016ea:	484c      	ldr	r0, [pc, #304]	; (800181c <Nokia5110_Text+0x194>)
 80016ec:	f7ff fec2 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr(" C", 70, 20, BLACK);
 80016f0:	2301      	movs	r3, #1
 80016f2:	2214      	movs	r2, #20
 80016f4:	2146      	movs	r1, #70	; 0x46
 80016f6:	484a      	ldr	r0, [pc, #296]	; (8001820 <Nokia5110_Text+0x198>)
 80016f8:	f7ff febc 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr("HMDTY", 0, 30, BLACK);
 80016fc:	2301      	movs	r3, #1
 80016fe:	221e      	movs	r2, #30
 8001700:	2100      	movs	r1, #0
 8001702:	4848      	ldr	r0, [pc, #288]	; (8001824 <Nokia5110_Text+0x19c>)
 8001704:	f7ff feb6 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr(" %", 70, 30, BLACK);
 8001708:	2301      	movs	r3, #1
 800170a:	221e      	movs	r2, #30
 800170c:	2146      	movs	r1, #70	; 0x46
 800170e:	4846      	ldr	r0, [pc, #280]	; (8001828 <Nokia5110_Text+0x1a0>)
 8001710:	f7ff feb0 	bl	8001474 <Nokia5110_setStr>
		  Nokia5110_setStr("KOBASTAR", 18, 40, WHITE);
 8001714:	2300      	movs	r3, #0
 8001716:	2228      	movs	r2, #40	; 0x28
 8001718:	2112      	movs	r1, #18
 800171a:	4844      	ldr	r0, [pc, #272]	; (800182c <Nokia5110_Text+0x1a4>)
 800171c:	f7ff feaa 	bl	8001474 <Nokia5110_setStr>


		  sprintf(writeString,"%d",time_tr.Seconds);
 8001720:	4b43      	ldr	r3, [pc, #268]	; (8001830 <Nokia5110_Text+0x1a8>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4943      	ldr	r1, [pc, #268]	; (8001834 <Nokia5110_Text+0x1ac>)
 8001728:	4843      	ldr	r0, [pc, #268]	; (8001838 <Nokia5110_Text+0x1b0>)
 800172a:	f003 fff7 	bl	800571c <siprintf>
		  Nokia5110_setStr(writeString , 68, 0, BLACK);
 800172e:	2301      	movs	r3, #1
 8001730:	2200      	movs	r2, #0
 8001732:	2144      	movs	r1, #68	; 0x44
 8001734:	4840      	ldr	r0, [pc, #256]	; (8001838 <Nokia5110_Text+0x1b0>)
 8001736:	f7ff fe9d 	bl	8001474 <Nokia5110_setStr>

		  sprintf(writeString,"%d",time_tr.Minutes);
 800173a:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <Nokia5110_Text+0x1a8>)
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	461a      	mov	r2, r3
 8001740:	493c      	ldr	r1, [pc, #240]	; (8001834 <Nokia5110_Text+0x1ac>)
 8001742:	483d      	ldr	r0, [pc, #244]	; (8001838 <Nokia5110_Text+0x1b0>)
 8001744:	f003 ffea 	bl	800571c <siprintf>
		  Nokia5110_setStr(writeString , 48, 0, BLACK);
 8001748:	2301      	movs	r3, #1
 800174a:	2200      	movs	r2, #0
 800174c:	2130      	movs	r1, #48	; 0x30
 800174e:	483a      	ldr	r0, [pc, #232]	; (8001838 <Nokia5110_Text+0x1b0>)
 8001750:	f7ff fe90 	bl	8001474 <Nokia5110_setStr>

		  sprintf(writeString,"%d",time_tr.Hours);
 8001754:	4b36      	ldr	r3, [pc, #216]	; (8001830 <Nokia5110_Text+0x1a8>)
 8001756:	789b      	ldrb	r3, [r3, #2]
 8001758:	461a      	mov	r2, r3
 800175a:	4936      	ldr	r1, [pc, #216]	; (8001834 <Nokia5110_Text+0x1ac>)
 800175c:	4836      	ldr	r0, [pc, #216]	; (8001838 <Nokia5110_Text+0x1b0>)
 800175e:	f003 ffdd 	bl	800571c <siprintf>
		  Nokia5110_setStr(writeString , 30, 0, BLACK);
 8001762:	2301      	movs	r3, #1
 8001764:	2200      	movs	r2, #0
 8001766:	211e      	movs	r1, #30
 8001768:	4833      	ldr	r0, [pc, #204]	; (8001838 <Nokia5110_Text+0x1b0>)
 800176a:	f7ff fe83 	bl	8001474 <Nokia5110_setStr>

		  sprintf(writeString,"%d",time_tr.Year);
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <Nokia5110_Text+0x1a8>)
 8001770:	799b      	ldrb	r3, [r3, #6]
 8001772:	461a      	mov	r2, r3
 8001774:	492f      	ldr	r1, [pc, #188]	; (8001834 <Nokia5110_Text+0x1ac>)
 8001776:	4830      	ldr	r0, [pc, #192]	; (8001838 <Nokia5110_Text+0x1b0>)
 8001778:	f003 ffd0 	bl	800571c <siprintf>
		  Nokia5110_setStr(writeString, 72, 10, BLACK);
 800177c:	2301      	movs	r3, #1
 800177e:	220a      	movs	r2, #10
 8001780:	2148      	movs	r1, #72	; 0x48
 8001782:	482d      	ldr	r0, [pc, #180]	; (8001838 <Nokia5110_Text+0x1b0>)
 8001784:	f7ff fe76 	bl	8001474 <Nokia5110_setStr>

		  sprintf(writeString,"%d",time_tr.Month);
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <Nokia5110_Text+0x1a8>)
 800178a:	795b      	ldrb	r3, [r3, #5]
 800178c:	461a      	mov	r2, r3
 800178e:	4929      	ldr	r1, [pc, #164]	; (8001834 <Nokia5110_Text+0x1ac>)
 8001790:	4829      	ldr	r0, [pc, #164]	; (8001838 <Nokia5110_Text+0x1b0>)
 8001792:	f003 ffc3 	bl	800571c <siprintf>
		  Nokia5110_setStr(writeString, 48, 10, BLACK);
 8001796:	2301      	movs	r3, #1
 8001798:	220a      	movs	r2, #10
 800179a:	2130      	movs	r1, #48	; 0x30
 800179c:	4826      	ldr	r0, [pc, #152]	; (8001838 <Nokia5110_Text+0x1b0>)
 800179e:	f7ff fe69 	bl	8001474 <Nokia5110_setStr>

		  sprintf(writeString,"%d",time_tr.DayOfMonth);
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <Nokia5110_Text+0x1a8>)
 80017a4:	791b      	ldrb	r3, [r3, #4]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4922      	ldr	r1, [pc, #136]	; (8001834 <Nokia5110_Text+0x1ac>)
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <Nokia5110_Text+0x1b0>)
 80017ac:	f003 ffb6 	bl	800571c <siprintf>
		  Nokia5110_setStr(writeString, 30, 10, BLACK);
 80017b0:	2301      	movs	r3, #1
 80017b2:	220a      	movs	r2, #10
 80017b4:	211e      	movs	r1, #30
 80017b6:	4820      	ldr	r0, [pc, #128]	; (8001838 <Nokia5110_Text+0x1b0>)
 80017b8:	f7ff fe5c 	bl	8001474 <Nokia5110_setStr>

		  sprintf(writeString,"%0.2f",Temperature);
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <Nokia5110_Text+0x1b4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe31 	bl	8000428 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	491d      	ldr	r1, [pc, #116]	; (8001840 <Nokia5110_Text+0x1b8>)
 80017cc:	481a      	ldr	r0, [pc, #104]	; (8001838 <Nokia5110_Text+0x1b0>)
 80017ce:	f003 ffa5 	bl	800571c <siprintf>
		  Nokia5110_setStr(writeString, 40, 20, BLACK);
 80017d2:	2301      	movs	r3, #1
 80017d4:	2214      	movs	r2, #20
 80017d6:	2128      	movs	r1, #40	; 0x28
 80017d8:	4817      	ldr	r0, [pc, #92]	; (8001838 <Nokia5110_Text+0x1b0>)
 80017da:	f7ff fe4b 	bl	8001474 <Nokia5110_setStr>

		  sprintf(writeString,"%0.2f",Humidity);
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <Nokia5110_Text+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe20 	bl	8000428 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4914      	ldr	r1, [pc, #80]	; (8001840 <Nokia5110_Text+0x1b8>)
 80017ee:	4812      	ldr	r0, [pc, #72]	; (8001838 <Nokia5110_Text+0x1b0>)
 80017f0:	f003 ff94 	bl	800571c <siprintf>
		  Nokia5110_setStr(writeString, 40, 30, BLACK);
 80017f4:	2301      	movs	r3, #1
 80017f6:	221e      	movs	r2, #30
 80017f8:	2128      	movs	r1, #40	; 0x28
 80017fa:	480f      	ldr	r0, [pc, #60]	; (8001838 <Nokia5110_Text+0x1b0>)
 80017fc:	f7ff fe3a 	bl	8001474 <Nokia5110_setStr>

		  Nokia5110_Update();
 8001800:	f7ff fd30 	bl	8001264 <Nokia5110_Update>

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	080092b0 	.word	0x080092b0
 800180c:	080092b8 	.word	0x080092b8
 8001810:	080092bc 	.word	0x080092bc
 8001814:	080092c4 	.word	0x080092c4
 8001818:	080092c8 	.word	0x080092c8
 800181c:	080092cc 	.word	0x080092cc
 8001820:	080092d4 	.word	0x080092d4
 8001824:	080092d8 	.word	0x080092d8
 8001828:	080092e0 	.word	0x080092e0
 800182c:	080092e4 	.word	0x080092e4
 8001830:	20000540 	.word	0x20000540
 8001834:	080092f0 	.word	0x080092f0
 8001838:	200003f4 	.word	0x200003f4
 800183c:	20000550 	.word	0x20000550
 8001840:	080092f4 	.word	0x080092f4
 8001844:	2000054c 	.word	0x2000054c

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184c:	f000 fbde 	bl	800200c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001850:	f000 f83a 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001854:	f000 f94c 	bl	8001af0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001858:	f000 f92c 	bl	8001ab4 <MX_DMA_Init>
  MX_I2C1_Init();
 800185c:	f000 f87a 	bl	8001954 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001860:	f000 f8a6 	bl	80019b0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001864:	f000 f8da 	bl	8001a1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001868:	4811      	ldr	r0, [pc, #68]	; (80018b0 <main+0x68>)
 800186a:	f002 fe4b 	bl	8004504 <HAL_TIM_Base_Start>
 // setTime(20,25,8, 2, 26, 2, 24);
  Nokia5110_Init();
 800186e:	f7ff fca9 	bl	80011c4 <Nokia5110_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (DHT11_Read())
 8001872:	f7ff fb1b 	bl	8000eac <DHT11_Read>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00f      	beq.n	800189c <main+0x54>
	  {
		  Temperature=(float)tempVal;
 800187c:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <main+0x6c>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa27 	bl	8000cd4 <__aeabi_ui2f>
 8001886:	4603      	mov	r3, r0
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <main+0x70>)
 800188a:	6013      	str	r3, [r2, #0]
		  Humidity=(float)humVal;
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <main+0x74>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fa1f 	bl	8000cd4 <__aeabi_ui2f>
 8001896:	4603      	mov	r3, r0
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <main+0x78>)
 800189a:	6013      	str	r3, [r2, #0]
	  }

      getTime(&time_tr);
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <main+0x7c>)
 800189e:	f7ff fea3 	bl	80015e8 <getTime>
      HAL_Delay(400);
 80018a2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018a6:	f000 fc13 	bl	80020d0 <HAL_Delay>

      Nokia5110_Text();
 80018aa:	f7ff feed 	bl	8001688 <Nokia5110_Text>
	  if (DHT11_Read())
 80018ae:	e7e0      	b.n	8001872 <main+0x2a>
 80018b0:	200004f8 	.word	0x200004f8
 80018b4:	20000554 	.word	0x20000554
 80018b8:	20000550 	.word	0x20000550
 80018bc:	20000556 	.word	0x20000556
 80018c0:	2000054c 	.word	0x2000054c
 80018c4:	20000540 	.word	0x20000540

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b090      	sub	sp, #64	; 0x40
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	2228      	movs	r2, #40	; 0x28
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f8a6 	bl	8004a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fc:	2302      	movs	r3, #2
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001906:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4618      	mov	r0, r3
 8001912:	f001 ff33 	bl	800377c <HAL_RCC_OscConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800191c:	f000 f94a 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001920:	230f      	movs	r3, #15
 8001922:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001924:	2302      	movs	r3, #2
 8001926:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2102      	movs	r1, #2
 800193a:	4618      	mov	r0, r3
 800193c:	f002 f9a0 	bl	8003c80 <HAL_RCC_ClockConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001946:	f000 f935 	bl	8001bb4 <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3740      	adds	r7, #64	; 0x40
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x50>)
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <MX_I2C1_Init+0x54>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_I2C1_Init+0x58>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001992:	f001 f871 	bl	8002a78 <HAL_I2C_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800199c:	f000 f90a 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000408 	.word	0x20000408
 80019a8:	40005400 	.word	0x40005400
 80019ac:	000186a0 	.word	0x000186a0

080019b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019b6:	4a18      	ldr	r2, [pc, #96]	; (8001a18 <MX_SPI2_Init+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ba:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019e4:	2208      	movs	r2, #8
 80019e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_SPI2_Init+0x64>)
 80019fc:	220a      	movs	r2, #10
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_SPI2_Init+0x64>)
 8001a02:	f002 fab7 	bl	8003f74 <HAL_SPI_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a0c:	f000 f8d2 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000045c 	.word	0x2000045c
 8001a18:	40003800 	.word	0x40003800

08001a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a42:	2247      	movs	r2, #71	; 0x47
 8001a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a60:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a62:	f002 fcff 	bl	8004464 <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a6c:	f000 f8a2 	bl	8001bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a7e:	f002 fd8b 	bl	8004598 <HAL_TIM_ConfigClockSource>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a88:	f000 f894 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_TIM2_Init+0x94>)
 8001a9a:	f002 ff3d 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001aa4:	f000 f886 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200004f8 	.word	0x200004f8

08001ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_DMA_Init+0x38>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <MX_DMA_Init+0x38>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_DMA_Init+0x38>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 fbf5 	bl	80022c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001adc:	200f      	movs	r0, #15
 8001ade:	f000 fc0e 	bl	80022fe <HAL_NVIC_EnableIRQ>

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000

08001af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b0a:	f043 0320 	orr.w	r3, r3, #32
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <MX_GPIO_Init+0xb8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|DHT11_SENS_Pin|DC_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001b52:	4816      	ldr	r0, [pc, #88]	; (8001bac <MX_GPIO_Init+0xbc>)
 8001b54:	f000 ff77 	bl	8002a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b5e:	4814      	ldr	r0, [pc, #80]	; (8001bb0 <MX_GPIO_Init+0xc0>)
 8001b60:	f000 ff71 	bl	8002a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DHT11_SENS_Pin DC_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DHT11_SENS_Pin|DC_Pin;
 8001b64:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8001b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <MX_GPIO_Init+0xbc>)
 8001b7e:	f000 fdc7 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8001b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_GPIO_Init+0xc0>)
 8001b9c:	f000 fdb8 	bl	8002710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40010800 	.word	0x40010800

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <Error_Handler+0x8>
	...

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_MspInit+0x5c>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <HAL_MspInit+0x5c>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6193      	str	r3, [r2, #24]
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_MspInit+0x5c>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_MspInit+0x5c>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_MspInit+0x5c>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_MspInit+0x5c>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_MspInit+0x60>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_MspInit+0x60>)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000

08001c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_I2C_MspInit+0x90>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d132      	bne.n	8001caa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_I2C_MspInit+0x94>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_I2C_MspInit+0x94>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_I2C_MspInit+0x94>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c62:	2312      	movs	r3, #18
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4812      	ldr	r0, [pc, #72]	; (8001cbc <HAL_I2C_MspInit+0x98>)
 8001c72:	f000 fd4d 	bl	8002710 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_I2C_MspInit+0x9c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <HAL_I2C_MspInit+0x9c>)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_I2C_MspInit+0x94>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_I2C_MspInit+0x94>)
 8001c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_I2C_MspInit+0x94>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40005400 	.word	0x40005400
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010c00 	.word	0x40010c00
 8001cc0:	40010000 	.word	0x40010000

08001cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_SPI_MspInit+0xc0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d14a      	bne.n	8001d7a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ce4:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_SPI_MspInit+0xc4>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_SPI_MspInit+0xc4>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cee:	61d3      	str	r3, [r2, #28]
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_SPI_MspInit+0xc4>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <HAL_SPI_MspInit+0xc4>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <HAL_SPI_MspInit+0xc4>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_SPI_MspInit+0xc4>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d14:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	4818      	ldr	r0, [pc, #96]	; (8001d8c <HAL_SPI_MspInit+0xc8>)
 8001d2a:	f000 fcf1 	bl	8002710 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_SPI_MspInit+0xd0>)
 8001d32:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d36:	2210      	movs	r2, #16
 8001d38:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001d5e:	480c      	ldr	r0, [pc, #48]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d60:	f000 fae8 	bl	8002334 <HAL_DMA_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8001d6a:	f7ff ff23 	bl	8001bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d72:	649a      	str	r2, [r3, #72]	; 0x48
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <HAL_SPI_MspInit+0xcc>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40003800 	.word	0x40003800
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010c00 	.word	0x40010c00
 8001d90:	200004b4 	.word	0x200004b4
 8001d94:	40020058 	.word	0x40020058

08001d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d10b      	bne.n	8001dc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_TIM_Base_MspInit+0x34>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a07      	ldr	r2, [pc, #28]	; (8001dcc <HAL_TIM_Base_MspInit+0x34>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_TIM_Base_MspInit+0x34>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <NMI_Handler+0x4>

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e16:	f000 f93f 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA1_Channel5_IRQHandler+0x10>)
 8001e26:	f000 fb3f 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200004b4 	.word	0x200004b4

08001e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <_kill>:

int _kill(int pid, int sig)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e4c:	f002 fdc2 	bl	80049d4 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2216      	movs	r2, #22
 8001e54:	601a      	str	r2, [r3, #0]
  return -1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_exit>:

void _exit (int status)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffe7 	bl	8001e42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e74:	e7fe      	b.n	8001e74 <_exit+0x12>

08001e76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e00a      	b.n	8001e9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e88:	f3af 8000 	nop.w
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	60ba      	str	r2, [r7, #8]
 8001e94:	b2ca      	uxtb	r2, r1
 8001e96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbf0      	blt.n	8001e88 <_read+0x12>
  }

  return len;
 8001ea6:	687b      	ldr	r3, [r7, #4]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e009      	b.n	8001ed6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	60ba      	str	r2, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbf1      	blt.n	8001ec2 <_write+0x12>
  }
  return len;
 8001ede:	687b      	ldr	r3, [r7, #4]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_close>:

int _close(int file)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <_isatty>:

int _isatty(int file)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <_sbrk+0x5c>)
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <_sbrk+0x60>)
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <_sbrk+0x64>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <_sbrk+0x68>)
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d207      	bcs.n	8001f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f78:	f002 fd2c 	bl	80049d4 <__errno>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	220c      	movs	r2, #12
 8001f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	e009      	b.n	8001f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <_sbrk+0x64>)
 8001f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20005000 	.word	0x20005000
 8001fa8:	00000400 	.word	0x00000400
 8001fac:	2000058c 	.word	0x2000058c
 8001fb0:	200005a8 	.word	0x200005a8

08001fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc0:	f7ff fff8 	bl	8001fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fc6:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fdc:	4c09      	ldr	r4, [pc, #36]	; (8002004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fea:	f002 fcf9 	bl	80049e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fee:	f7ff fc2b 	bl	8001848 <main>
  bx lr
 8001ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ffc:	080099bc 	.word	0x080099bc
  ldr r2, =_sbss
 8002000:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002004:	200005a4 	.word	0x200005a4

08002008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC1_2_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_Init+0x28>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_Init+0x28>)
 8002016:	f043 0310 	orr.w	r3, r3, #16
 800201a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201c:	2003      	movs	r0, #3
 800201e:	f000 f947 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002022:	2000      	movs	r0, #0
 8002024:	f000 f808 	bl	8002038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002028:	f7ff fdca 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40022000 	.word	0x40022000

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x54>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x58>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f95f 	bl	800231a <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00e      	b.n	8002084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d80a      	bhi.n	8002082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f000 f927 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_InitTick+0x5c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000000 	.word	0x20000000
 8002090:	20000008 	.word	0x20000008
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_IncTick+0x1c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_IncTick+0x20>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a03      	ldr	r2, [pc, #12]	; (80020b8 <HAL_IncTick+0x20>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000590 	.word	0x20000590

080020bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <HAL_GetTick+0x10>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	20000590 	.word	0x20000590

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff fff0 	bl	80020bc <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffe0 	bl	80020bc <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000008 	.word	0x20000008

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4906      	ldr	r1, [pc, #24]	; (80021b0 <__NVIC_EnableIRQ+0x34>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff90 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff2d 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff42 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff90 	bl	8002208 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5f 	bl	80021b4 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff35 	bl	800217c <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e043      	b.n	80023d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_DMA_Init+0xa8>)
 8002352:	4413      	add	r3, r2
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_DMA_Init+0xac>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	009a      	lsls	r2, r3, #2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_DMA_Init+0xb0>)
 8002366:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800237e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002382:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800238c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	bffdfff8 	.word	0xbffdfff8
 80023e0:	cccccccd 	.word	0xcccccccd
 80023e4:	40020000 	.word	0x40020000

080023e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_DMA_Start_IT+0x20>
 8002404:	2302      	movs	r3, #2
 8002406:	e04b      	b.n	80024a0 <HAL_DMA_Start_IT+0xb8>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d13a      	bne.n	8002492 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f937 	bl	80026b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 020e 	orr.w	r2, r2, #14
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e00f      	b.n	8002480 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0204 	bic.w	r2, r2, #4
 800246e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 020a 	orr.w	r2, r2, #10
 800247e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e005      	b.n	800249e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800249a:	2302      	movs	r3, #2
 800249c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800249e:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2204      	movs	r2, #4
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d04f      	beq.n	8002570 <HAL_DMA_IRQHandler+0xc8>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04a      	beq.n	8002570 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a66      	ldr	r2, [pc, #408]	; (8002698 <HAL_DMA_IRQHandler+0x1f0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d029      	beq.n	8002556 <HAL_DMA_IRQHandler+0xae>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a65      	ldr	r2, [pc, #404]	; (800269c <HAL_DMA_IRQHandler+0x1f4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d022      	beq.n	8002552 <HAL_DMA_IRQHandler+0xaa>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a63      	ldr	r2, [pc, #396]	; (80026a0 <HAL_DMA_IRQHandler+0x1f8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01a      	beq.n	800254c <HAL_DMA_IRQHandler+0xa4>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a62      	ldr	r2, [pc, #392]	; (80026a4 <HAL_DMA_IRQHandler+0x1fc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d012      	beq.n	8002546 <HAL_DMA_IRQHandler+0x9e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a60      	ldr	r2, [pc, #384]	; (80026a8 <HAL_DMA_IRQHandler+0x200>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00a      	beq.n	8002540 <HAL_DMA_IRQHandler+0x98>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5f      	ldr	r2, [pc, #380]	; (80026ac <HAL_DMA_IRQHandler+0x204>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d102      	bne.n	800253a <HAL_DMA_IRQHandler+0x92>
 8002534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002538:	e00e      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 800253a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800253e:	e00b      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 8002540:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002544:	e008      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 8002546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800254a:	e005      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 800254c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002550:	e002      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 8002552:	2340      	movs	r3, #64	; 0x40
 8002554:	e000      	b.n	8002558 <HAL_DMA_IRQHandler+0xb0>
 8002556:	2304      	movs	r3, #4
 8002558:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <HAL_DMA_IRQHandler+0x208>)
 800255a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8094 	beq.w	800268e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800256e:	e08e      	b.n	800268e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2202      	movs	r2, #2
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d056      	beq.n	800262e <HAL_DMA_IRQHandler+0x186>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d051      	beq.n	800262e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020a 	bic.w	r2, r2, #10
 80025a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a38      	ldr	r2, [pc, #224]	; (8002698 <HAL_DMA_IRQHandler+0x1f0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d029      	beq.n	800260e <HAL_DMA_IRQHandler+0x166>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a37      	ldr	r2, [pc, #220]	; (800269c <HAL_DMA_IRQHandler+0x1f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_IRQHandler+0x162>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <HAL_DMA_IRQHandler+0x1f8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01a      	beq.n	8002604 <HAL_DMA_IRQHandler+0x15c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a34      	ldr	r2, [pc, #208]	; (80026a4 <HAL_DMA_IRQHandler+0x1fc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d012      	beq.n	80025fe <HAL_DMA_IRQHandler+0x156>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <HAL_DMA_IRQHandler+0x200>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00a      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x150>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a31      	ldr	r2, [pc, #196]	; (80026ac <HAL_DMA_IRQHandler+0x204>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d102      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x14a>
 80025ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025f0:	e00e      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 80025f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f6:	e00b      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 80025f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fc:	e008      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 80025fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002602:	e005      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 8002604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002608:	e002      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 800260a:	2320      	movs	r3, #32
 800260c:	e000      	b.n	8002610 <HAL_DMA_IRQHandler+0x168>
 800260e:	2302      	movs	r3, #2
 8002610:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <HAL_DMA_IRQHandler+0x208>)
 8002612:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d034      	beq.n	800268e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800262c:	e02f      	b.n	800268e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2208      	movs	r2, #8
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d028      	beq.n	8002690 <HAL_DMA_IRQHandler+0x1e8>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d023      	beq.n	8002690 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 020e 	bic.w	r2, r2, #14
 8002656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
    }
  }
  return;
 800268e:	bf00      	nop
 8002690:	bf00      	nop
}
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40020008 	.word	0x40020008
 800269c:	4002001c 	.word	0x4002001c
 80026a0:	40020030 	.word	0x40020030
 80026a4:	40020044 	.word	0x40020044
 80026a8:	40020058 	.word	0x40020058
 80026ac:	4002006c 	.word	0x4002006c
 80026b0:	40020000 	.word	0x40020000

080026b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d108      	bne.n	80026f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026f2:	e007      	b.n	8002704 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	60da      	str	r2, [r3, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
	...

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b08b      	sub	sp, #44	; 0x2c
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002722:	e169      	b.n	80029f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002724:	2201      	movs	r2, #1
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	429a      	cmp	r2, r3
 800273e:	f040 8158 	bne.w	80029f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a9a      	ldr	r2, [pc, #616]	; (80029b0 <HAL_GPIO_Init+0x2a0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d05e      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 800274c:	4a98      	ldr	r2, [pc, #608]	; (80029b0 <HAL_GPIO_Init+0x2a0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d875      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 8002752:	4a98      	ldr	r2, [pc, #608]	; (80029b4 <HAL_GPIO_Init+0x2a4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d058      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 8002758:	4a96      	ldr	r2, [pc, #600]	; (80029b4 <HAL_GPIO_Init+0x2a4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d86f      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 800275e:	4a96      	ldr	r2, [pc, #600]	; (80029b8 <HAL_GPIO_Init+0x2a8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d052      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 8002764:	4a94      	ldr	r2, [pc, #592]	; (80029b8 <HAL_GPIO_Init+0x2a8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d869      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 800276a:	4a94      	ldr	r2, [pc, #592]	; (80029bc <HAL_GPIO_Init+0x2ac>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d04c      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 8002770:	4a92      	ldr	r2, [pc, #584]	; (80029bc <HAL_GPIO_Init+0x2ac>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d863      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 8002776:	4a92      	ldr	r2, [pc, #584]	; (80029c0 <HAL_GPIO_Init+0x2b0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d046      	beq.n	800280a <HAL_GPIO_Init+0xfa>
 800277c:	4a90      	ldr	r2, [pc, #576]	; (80029c0 <HAL_GPIO_Init+0x2b0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d85d      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 8002782:	2b12      	cmp	r3, #18
 8002784:	d82a      	bhi.n	80027dc <HAL_GPIO_Init+0xcc>
 8002786:	2b12      	cmp	r3, #18
 8002788:	d859      	bhi.n	800283e <HAL_GPIO_Init+0x12e>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <HAL_GPIO_Init+0x80>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	0800280b 	.word	0x0800280b
 8002794:	080027e5 	.word	0x080027e5
 8002798:	080027f7 	.word	0x080027f7
 800279c:	08002839 	.word	0x08002839
 80027a0:	0800283f 	.word	0x0800283f
 80027a4:	0800283f 	.word	0x0800283f
 80027a8:	0800283f 	.word	0x0800283f
 80027ac:	0800283f 	.word	0x0800283f
 80027b0:	0800283f 	.word	0x0800283f
 80027b4:	0800283f 	.word	0x0800283f
 80027b8:	0800283f 	.word	0x0800283f
 80027bc:	0800283f 	.word	0x0800283f
 80027c0:	0800283f 	.word	0x0800283f
 80027c4:	0800283f 	.word	0x0800283f
 80027c8:	0800283f 	.word	0x0800283f
 80027cc:	0800283f 	.word	0x0800283f
 80027d0:	0800283f 	.word	0x0800283f
 80027d4:	080027ed 	.word	0x080027ed
 80027d8:	08002801 	.word	0x08002801
 80027dc:	4a79      	ldr	r2, [pc, #484]	; (80029c4 <HAL_GPIO_Init+0x2b4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027e2:	e02c      	b.n	800283e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	623b      	str	r3, [r7, #32]
          break;
 80027ea:	e029      	b.n	8002840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	3304      	adds	r3, #4
 80027f2:	623b      	str	r3, [r7, #32]
          break;
 80027f4:	e024      	b.n	8002840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	3308      	adds	r3, #8
 80027fc:	623b      	str	r3, [r7, #32]
          break;
 80027fe:	e01f      	b.n	8002840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	330c      	adds	r3, #12
 8002806:	623b      	str	r3, [r7, #32]
          break;
 8002808:	e01a      	b.n	8002840 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002812:	2304      	movs	r3, #4
 8002814:	623b      	str	r3, [r7, #32]
          break;
 8002816:	e013      	b.n	8002840 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002820:	2308      	movs	r3, #8
 8002822:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	611a      	str	r2, [r3, #16]
          break;
 800282a:	e009      	b.n	8002840 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800282c:	2308      	movs	r3, #8
 800282e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	615a      	str	r2, [r3, #20]
          break;
 8002836:	e003      	b.n	8002840 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
          break;
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x130>
          break;
 800283e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2bff      	cmp	r3, #255	; 0xff
 8002844:	d801      	bhi.n	800284a <HAL_GPIO_Init+0x13a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	e001      	b.n	800284e <HAL_GPIO_Init+0x13e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2bff      	cmp	r3, #255	; 0xff
 8002854:	d802      	bhi.n	800285c <HAL_GPIO_Init+0x14c>
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	e002      	b.n	8002862 <HAL_GPIO_Init+0x152>
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	3b08      	subs	r3, #8
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	210f      	movs	r1, #15
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	6a39      	ldr	r1, [r7, #32]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80b1 	beq.w	80029f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002890:	4b4d      	ldr	r3, [pc, #308]	; (80029c8 <HAL_GPIO_Init+0x2b8>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <HAL_GPIO_Init+0x2b8>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6193      	str	r3, [r2, #24]
 800289c:	4b4a      	ldr	r3, [pc, #296]	; (80029c8 <HAL_GPIO_Init+0x2b8>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028a8:	4a48      	ldr	r2, [pc, #288]	; (80029cc <HAL_GPIO_Init+0x2bc>)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a40      	ldr	r2, [pc, #256]	; (80029d0 <HAL_GPIO_Init+0x2c0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d013      	beq.n	80028fc <HAL_GPIO_Init+0x1ec>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3f      	ldr	r2, [pc, #252]	; (80029d4 <HAL_GPIO_Init+0x2c4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00d      	beq.n	80028f8 <HAL_GPIO_Init+0x1e8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3e      	ldr	r2, [pc, #248]	; (80029d8 <HAL_GPIO_Init+0x2c8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <HAL_GPIO_Init+0x1e4>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3d      	ldr	r2, [pc, #244]	; (80029dc <HAL_GPIO_Init+0x2cc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d101      	bne.n	80028f0 <HAL_GPIO_Init+0x1e0>
 80028ec:	2303      	movs	r3, #3
 80028ee:	e006      	b.n	80028fe <HAL_GPIO_Init+0x1ee>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e004      	b.n	80028fe <HAL_GPIO_Init+0x1ee>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e002      	b.n	80028fe <HAL_GPIO_Init+0x1ee>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_GPIO_Init+0x1ee>
 80028fc:	2300      	movs	r3, #0
 80028fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002900:	f002 0203 	and.w	r2, r2, #3
 8002904:	0092      	lsls	r2, r2, #2
 8002906:	4093      	lsls	r3, r2
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800290e:	492f      	ldr	r1, [pc, #188]	; (80029cc <HAL_GPIO_Init+0x2bc>)
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002928:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	492c      	ldr	r1, [pc, #176]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	43db      	mvns	r3, r3
 800293e:	4928      	ldr	r1, [pc, #160]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 8002940:	4013      	ands	r3, r2
 8002942:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4922      	ldr	r1, [pc, #136]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	43db      	mvns	r3, r3
 8002966:	491e      	ldr	r1, [pc, #120]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 8002968:	4013      	ands	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d006      	beq.n	8002986 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4918      	ldr	r1, [pc, #96]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	43db      	mvns	r3, r3
 800298e:	4914      	ldr	r1, [pc, #80]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 8002990:	4013      	ands	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d021      	beq.n	80029e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_GPIO_Init+0x2d0>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]
 80029ac:	e021      	b.n	80029f2 <HAL_GPIO_Init+0x2e2>
 80029ae:	bf00      	nop
 80029b0:	10320000 	.word	0x10320000
 80029b4:	10310000 	.word	0x10310000
 80029b8:	10220000 	.word	0x10220000
 80029bc:	10210000 	.word	0x10210000
 80029c0:	10120000 	.word	0x10120000
 80029c4:	10110000 	.word	0x10110000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40010800 	.word	0x40010800
 80029d4:	40010c00 	.word	0x40010c00
 80029d8:	40011000 	.word	0x40011000
 80029dc:	40011400 	.word	0x40011400
 80029e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_GPIO_Init+0x304>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	4909      	ldr	r1, [pc, #36]	; (8002a14 <HAL_GPIO_Init+0x304>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	3301      	adds	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f47f ae8e 	bne.w	8002724 <HAL_GPIO_Init+0x14>
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	372c      	adds	r7, #44	; 0x2c
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40010400 	.word	0x40010400

08002a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e001      	b.n	8002a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]
 8002a52:	4613      	mov	r3, r2
 8002a54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a56:	787b      	ldrb	r3, [r7, #1]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5c:	887a      	ldrh	r2, [r7, #2]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a62:	e003      	b.n	8002a6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	041a      	lsls	r2, r3, #16
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e12b      	b.n	8002ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff f8c0 	bl	8001c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	; 0x24
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002adc:	f001 fa18 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a81      	ldr	r2, [pc, #516]	; (8002cec <HAL_I2C_Init+0x274>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d807      	bhi.n	8002afc <HAL_I2C_Init+0x84>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a80      	ldr	r2, [pc, #512]	; (8002cf0 <HAL_I2C_Init+0x278>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e006      	b.n	8002b0a <HAL_I2C_Init+0x92>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a7d      	ldr	r2, [pc, #500]	; (8002cf4 <HAL_I2C_Init+0x27c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	bf94      	ite	ls
 8002b04:	2301      	movls	r3, #1
 8002b06:	2300      	movhi	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0e7      	b.n	8002ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a78      	ldr	r2, [pc, #480]	; (8002cf8 <HAL_I2C_Init+0x280>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0c9b      	lsrs	r3, r3, #18
 8002b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a6a      	ldr	r2, [pc, #424]	; (8002cec <HAL_I2C_Init+0x274>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d802      	bhi.n	8002b4c <HAL_I2C_Init+0xd4>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	e009      	b.n	8002b60 <HAL_I2C_Init+0xe8>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	4a69      	ldr	r2, [pc, #420]	; (8002cfc <HAL_I2C_Init+0x284>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	3301      	adds	r3, #1
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	495c      	ldr	r1, [pc, #368]	; (8002cec <HAL_I2C_Init+0x274>)
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	d819      	bhi.n	8002bb4 <HAL_I2C_Init+0x13c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e59      	subs	r1, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8e:	1c59      	adds	r1, r3, #1
 8002b90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b94:	400b      	ands	r3, r1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_I2C_Init+0x138>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1e59      	subs	r1, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bae:	e051      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	e04f      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d111      	bne.n	8002be0 <HAL_I2C_Init+0x168>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e58      	subs	r0, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	440b      	add	r3, r1
 8002bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e012      	b.n	8002c06 <HAL_I2C_Init+0x18e>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Init+0x196>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e022      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10e      	bne.n	8002c34 <HAL_I2C_Init+0x1bc>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1e58      	subs	r0, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	440b      	add	r3, r1
 8002c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c32:	e00f      	b.n	8002c54 <HAL_I2C_Init+0x1dc>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	0099      	lsls	r1, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	6809      	ldr	r1, [r1, #0]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6911      	ldr	r1, [r2, #16]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68d2      	ldr	r2, [r2, #12]
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	000186a0 	.word	0x000186a0
 8002cf0:	001e847f 	.word	0x001e847f
 8002cf4:	003d08ff 	.word	0x003d08ff
 8002cf8:	431bde83 	.word	0x431bde83
 8002cfc:	10624dd3 	.word	0x10624dd3

08002d00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08c      	sub	sp, #48	; 0x30
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	817b      	strh	r3, [r7, #10]
 8002d12:	460b      	mov	r3, r1
 8002d14:	813b      	strh	r3, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d1e:	f7ff f9cd 	bl	80020bc <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f040 8244 	bne.w	80031ba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2319      	movs	r3, #25
 8002d38:	2201      	movs	r2, #1
 8002d3a:	4982      	ldr	r1, [pc, #520]	; (8002f44 <HAL_I2C_Mem_Read+0x244>)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fb2f 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e237      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_I2C_Mem_Read+0x5a>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e230      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d007      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2222      	movs	r2, #34	; 0x22
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a62      	ldr	r2, [pc, #392]	; (8002f48 <HAL_I2C_Mem_Read+0x248>)
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dc2:	88f8      	ldrh	r0, [r7, #6]
 8002dc4:	893a      	ldrh	r2, [r7, #8]
 8002dc6:	8979      	ldrh	r1, [r7, #10]
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f9fc 	bl	80031d0 <I2C_RequestMemoryRead>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e1ec      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d113      	bne.n	8002e12 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e1c0      	b.n	8003194 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d11e      	bne.n	8002e58 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2a:	b672      	cpsid	i
}
 8002e2c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e54:	b662      	cpsie	i
}
 8002e56:	e035      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d11e      	bne.n	8002e9e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e70:	b672      	cpsid	i
}
 8002e72:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e9a:	b662      	cpsie	i
}
 8002e9c:	e012      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ec4:	e166      	b.n	8003194 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	f200 811f 	bhi.w	800310e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d123      	bne.n	8002f20 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fbc1 	bl	8003664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e167      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f1e:	e139      	b.n	8003194 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d152      	bne.n	8002fce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4906      	ldr	r1, [pc, #24]	; (8002f4c <HAL_I2C_Mem_Read+0x24c>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fa34 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e13c      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
 8002f42:	bf00      	nop
 8002f44:	00100002 	.word	0x00100002
 8002f48:	ffff0000 	.word	0xffff0000
 8002f4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f50:	b672      	cpsid	i
}
 8002f52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f96:	b662      	cpsie	i
}
 8002f98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fcc:	e0e2      	b.n	8003194 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	497b      	ldr	r1, [pc, #492]	; (80031c4 <HAL_I2C_Mem_Read+0x4c4>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f9e1 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0e9      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff8:	b672      	cpsid	i
}
 8002ffa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800302e:	4b66      	ldr	r3, [pc, #408]	; (80031c8 <HAL_I2C_Mem_Read+0x4c8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	08db      	lsrs	r3, r3, #3
 8003034:	4a65      	ldr	r2, [pc, #404]	; (80031cc <HAL_I2C_Mem_Read+0x4cc>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0a1a      	lsrs	r2, r3, #8
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00da      	lsls	r2, r3, #3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	3b01      	subs	r3, #1
 800304c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d118      	bne.n	8003086 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003076:	b662      	cpsie	i
}
 8003078:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e09a      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d1d9      	bne.n	8003048 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030d6:	b662      	cpsie	i
}
 80030d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800310c:	e042      	b.n	8003194 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 faa6 	bl	8003664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e04c      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d118      	bne.n	8003194 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	2b00      	cmp	r3, #0
 800319a:	f47f ae94 	bne.w	8002ec6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3728      	adds	r7, #40	; 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	00010004 	.word	0x00010004
 80031c8:	20000000 	.word	0x20000000
 80031cc:	14f8b589 	.word	0x14f8b589

080031d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	460b      	mov	r3, r1
 80031e4:	813b      	strh	r3, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	2200      	movs	r2, #0
 8003212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f8c2 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003230:	d103      	bne.n	800323a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0aa      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800324c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	4952      	ldr	r1, [pc, #328]	; (800339c <I2C_RequestMemoryRead+0x1cc>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f91d 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e097      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	6a39      	ldr	r1, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f9a8 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b04      	cmp	r3, #4
 8003290:	d107      	bne.n	80032a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e076      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	e021      	b.n	80032fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c8:	6a39      	ldr	r1, [r7, #32]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f982 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e050      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f2:	893b      	ldrh	r3, [r7, #8]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fe:	6a39      	ldr	r1, [r7, #32]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f967 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	2b04      	cmp	r3, #4
 8003312:	d107      	bne.n	8003324 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e035      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003336:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2200      	movs	r2, #0
 8003340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f82b 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335e:	d103      	bne.n	8003368 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e013      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800336c:	897b      	ldrh	r3, [r7, #10]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	4906      	ldr	r1, [pc, #24]	; (800339c <I2C_RequestMemoryRead+0x1cc>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f886 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	00010002 	.word	0x00010002

080033a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b0:	e048      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d044      	beq.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe fe7f 	bl	80020bc <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d139      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10d      	bne.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	e00c      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d116      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e023      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10d      	bne.n	800346a <I2C_WaitOnFlagUntilTimeout+0xca>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	e00c      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	43da      	mvns	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d093      	beq.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a2:	e071      	b.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b2:	d123      	bne.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e067      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d041      	beq.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7fe fdda 	bl	80020bc <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d136      	bne.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10c      	bne.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e00b      	b.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e021      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0c1b      	lsrs	r3, r3, #16
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10c      	bne.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e00b      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f47f af6d 	bne.w	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e0:	e034      	b.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f89b 	bl	800371e <I2C_IsAcknowledgeFailed>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e034      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d028      	beq.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fd5f 	bl	80020bc <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11d      	bne.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d016      	beq.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e007      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b80      	cmp	r3, #128	; 0x80
 8003658:	d1c3      	bne.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003670:	e049      	b.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b10      	cmp	r3, #16
 800367e:	d119      	bne.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0210 	mvn.w	r2, #16
 8003688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e030      	b.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fe fd02 	bl	80020bc <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11d      	bne.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d016      	beq.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e007      	b.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d1ae      	bne.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003734:	d11b      	bne.n	800376e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800373e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0204 	orr.w	r2, r3, #4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
	...

0800377c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e272      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8087 	beq.w	80038aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800379c:	4b92      	ldr	r3, [pc, #584]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d00c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037a8:	4b8f      	ldr	r3, [pc, #572]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d112      	bne.n	80037da <HAL_RCC_OscConfig+0x5e>
 80037b4:	4b8c      	ldr	r3, [pc, #560]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d10b      	bne.n	80037da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c2:	4b89      	ldr	r3, [pc, #548]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d06c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x12c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d168      	bne.n	80038a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e24c      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x76>
 80037e4:	4b80      	ldr	r3, [pc, #512]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7f      	ldr	r2, [pc, #508]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	e02e      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x98>
 80037fa:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7a      	ldr	r2, [pc, #488]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b78      	ldr	r3, [pc, #480]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a77      	ldr	r2, [pc, #476]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e01d      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0xbc>
 800381e:	4b72      	ldr	r3, [pc, #456]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a71      	ldr	r2, [pc, #452]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 8003838:	4b6b      	ldr	r3, [pc, #428]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6a      	ldr	r2, [pc, #424]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b68      	ldr	r3, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe fc30 	bl	80020bc <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7fe fc2c 	bl	80020bc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e200      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0xe4>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fc1c 	bl	80020bc <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe fc18 	bl	80020bc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e1ec      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x10c>
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d063      	beq.n	800397e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d11c      	bne.n	8003908 <HAL_RCC_OscConfig+0x18c>
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d116      	bne.n	8003908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_RCC_OscConfig+0x176>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e1c0      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4939      	ldr	r1, [pc, #228]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	e03a      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe fbd1 	bl	80020bc <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391e:	f7fe fbcd 	bl	80020bc <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e1a1      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4927      	ldr	r1, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	e015      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fe fbb0 	bl	80020bc <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003960:	f7fe fbac 	bl	80020bc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e180      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d03a      	beq.n	8003a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d019      	beq.n	80039c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_RCC_OscConfig+0x274>)
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7fe fb90 	bl	80020bc <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fe fb8c 	bl	80020bc <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e160      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039be:	2001      	movs	r0, #1
 80039c0:	f000 faba 	bl	8003f38 <RCC_Delay>
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_OscConfig+0x274>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039cc:	f7fe fb76 	bl	80020bc <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d2:	e00f      	b.n	80039f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe fb72 	bl	80020bc <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d908      	bls.n	80039f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e146      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	42420000 	.word	0x42420000
 80039f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b92      	ldr	r3, [pc, #584]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e9      	bne.n	80039d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a6 	beq.w	8003b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b88      	ldr	r3, [pc, #544]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	61d3      	str	r3, [r2, #28]
 8003a2a:	4b85      	ldr	r3, [pc, #532]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3a:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d118      	bne.n	8003a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a46:	4b7f      	ldr	r3, [pc, #508]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7e      	ldr	r2, [pc, #504]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a52:	f7fe fb33 	bl	80020bc <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5a:	f7fe fb2f 	bl	80020bc <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b64      	cmp	r3, #100	; 0x64
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e103      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	4b75      	ldr	r3, [pc, #468]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x312>
 8003a80:	4b6f      	ldr	r3, [pc, #444]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4a6e      	ldr	r2, [pc, #440]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6213      	str	r3, [r2, #32]
 8003a8c:	e02d      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x334>
 8003a96:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a69      	ldr	r2, [pc, #420]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6213      	str	r3, [r2, #32]
 8003aa2:	4b67      	ldr	r3, [pc, #412]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a66      	ldr	r2, [pc, #408]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	6213      	str	r3, [r2, #32]
 8003aae:	e01c      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x356>
 8003ab8:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a60      	ldr	r2, [pc, #384]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	6213      	str	r3, [r2, #32]
 8003ac4:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6213      	str	r3, [r2, #32]
 8003ad0:	e00b      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003ad2:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4a5a      	ldr	r2, [pc, #360]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6213      	str	r3, [r2, #32]
 8003ade:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d015      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fae3 	bl	80020bc <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe fadf 	bl	80020bc <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0b1      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ee      	beq.n	8003afa <HAL_RCC_OscConfig+0x37e>
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe facd 	bl	80020bc <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe fac9 	bl	80020bc <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e09b      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ee      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4e:	4b3c      	ldr	r3, [pc, #240]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4a3b      	ldr	r2, [pc, #236]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8087 	beq.w	8003c72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d061      	beq.n	8003c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d146      	bne.n	8003c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b78:	4b33      	ldr	r3, [pc, #204]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fa9d 	bl	80020bc <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fe fa99 	bl	80020bc <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e06d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b98:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bae:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	4921      	ldr	r1, [pc, #132]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a19      	ldr	r1, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	491b      	ldr	r1, [pc, #108]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fe fa6d 	bl	80020bc <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fe fa69 	bl	80020bc <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x46a>
 8003c04:	e035      	b.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fa56 	bl	80020bc <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fe fa52 	bl	80020bc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e026      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x498>
 8003c32:	e01e      	b.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e019      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40007000 	.word	0x40007000
 8003c48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_OscConfig+0x500>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000

08003c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0d0      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d910      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 0207 	bic.w	r2, r3, #7
 8003caa:	4965      	ldr	r1, [pc, #404]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b63      	ldr	r3, [pc, #396]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0b8      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	494d      	ldr	r1, [pc, #308]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d040      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d115      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07f      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e073      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4936      	ldr	r1, [pc, #216]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d70:	f7fe f9a4 	bl	80020bc <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fe f9a0 	bl	80020bc <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e053      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d210      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4922      	ldr	r1, [pc, #136]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e032      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4916      	ldr	r1, [pc, #88]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	490e      	ldr	r1, [pc, #56]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e0e:	f000 f821 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	5ccb      	ldrb	r3, [r1, r3]
 8003e22:	fa22 f303 	lsr.w	r3, r2, r3
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1cc>)
 8003e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x1d0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe f902 	bl	8002038 <HAL_InitTick>

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40022000 	.word	0x40022000
 8003e44:	40021000 	.word	0x40021000
 8003e48:	080094e4 	.word	0x080094e4
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	20000004 	.word	0x20000004

08003e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	2300      	movs	r3, #0
 8003e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x30>
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x36>
 8003e82:	e027      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003e86:	613b      	str	r3, [r7, #16]
      break;
 8003e88:	e027      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	0c9b      	lsrs	r3, r3, #18
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0c5b      	lsrs	r3, r3, #17
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003eae:	5cd3      	ldrb	r3, [r2, r3]
 8003eb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003eb6:	fb03 f202 	mul.w	r2, r3, r2
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e004      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	613b      	str	r3, [r7, #16]
      break;
 8003ed2:	e002      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed6:	613b      	str	r3, [r7, #16]
      break;
 8003ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eda:	693b      	ldr	r3, [r7, #16]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	007a1200 	.word	0x007a1200
 8003ef0:	080094fc 	.word	0x080094fc
 8003ef4:	0800950c 	.word	0x0800950c
 8003ef8:	003d0900 	.word	0x003d0900

08003efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	20000000 	.word	0x20000000

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f14:	f7ff fff2 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000
 8003f34:	080094f4 	.word	0x080094f4

08003f38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <RCC_Delay+0x34>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <RCC_Delay+0x38>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0a5b      	lsrs	r3, r3, #9
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f54:	bf00      	nop
  }
  while (Delay --);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1e5a      	subs	r2, r3, #1
 8003f5a:	60fa      	str	r2, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f9      	bne.n	8003f54 <RCC_Delay+0x1c>
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	10624dd3 	.word	0x10624dd3

08003f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e076      	b.n	8004074 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d108      	bne.n	8003fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f96:	d009      	beq.n	8003fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61da      	str	r2, [r3, #28]
 8003f9e:	e005      	b.n	8003fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd fe7c 	bl	8001cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004030:	ea42 0103 	orr.w	r1, r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	0c1a      	lsrs	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f002 0204 	and.w	r2, r2, #4
 8004052:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004062:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_SPI_Transmit_DMA+0x20>
 8004098:	2302      	movs	r3, #2
 800409a:	e097      	b.n	80041cc <HAL_SPI_Transmit_DMA+0x150>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d002      	beq.n	80040b6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
 80040b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040b4:	e085      	b.n	80041c2 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_SPI_Transmit_DMA+0x46>
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040c6:	e07c      	b.n	80041c2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2203      	movs	r2, #3
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	88fa      	ldrh	r2, [r7, #6]
 80040e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410e:	d10f      	bne.n	8004130 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800412e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004134:	4a27      	ldr	r2, [pc, #156]	; (80041d4 <HAL_SPI_Transmit_DMA+0x158>)
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <HAL_SPI_Transmit_DMA+0x15c>)
 800413e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	4a25      	ldr	r2, [pc, #148]	; (80041dc <HAL_SPI_Transmit_DMA+0x160>)
 8004146:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414c:	2200      	movs	r2, #0
 800414e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	4619      	mov	r1, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004168:	f7fe f93e 	bl	80023e8 <HAL_DMA_Start_IT>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004182:	e01e      	b.n	80041c2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d007      	beq.n	80041a2 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041a0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0220 	orr.w	r2, r2, #32
 80041b0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0202 	orr.w	r2, r2, #2
 80041c0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	080042bd 	.word	0x080042bd
 80041d8:	08004217 	.word	0x08004217
 80041dc:	080042d9 	.word	0x080042d9

080041e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004224:	f7fd ff4a 	bl	80020bc <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b20      	cmp	r3, #32
 8004236:	d03b      	beq.n	80042b0 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0220 	bic.w	r2, r2, #32
 8004246:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0202 	bic.w	r2, r2, #2
 8004256:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	2164      	movs	r1, #100	; 0x64
 800425c:	6978      	ldr	r0, [r7, #20]
 800425e:	f000 f8e3 	bl	8004428 <SPI_EndRxTxTransaction>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	f043 0220 	orr.w	r2, r3, #32
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80042a8:	6978      	ldr	r0, [r7, #20]
 80042aa:	f7ff ffab 	bl	8004204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80042ae:	e002      	b.n	80042b6 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80042b0:	6978      	ldr	r0, [r7, #20]
 80042b2:	f7ff ff95 	bl	80041e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff ff91 	bl	80041f2 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0203 	bic.w	r2, r2, #3
 80042f4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	f043 0210 	orr.w	r2, r3, #16
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f7ff ff7a 	bl	8004204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004328:	f7fd fec8 	bl	80020bc <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	4413      	add	r3, r2
 8004336:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004338:	f7fd fec0 	bl	80020bc <HAL_GetTick>
 800433c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	015b      	lsls	r3, r3, #5
 8004344:	0d1b      	lsrs	r3, r3, #20
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800434e:	e054      	b.n	80043fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d050      	beq.n	80043fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004358:	f7fd feb0 	bl	80020bc <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	429a      	cmp	r2, r3
 8004366:	d902      	bls.n	800436e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d13d      	bne.n	80043ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800437c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004386:	d111      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004390:	d004      	beq.n	800439c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d107      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b4:	d10f      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e017      	b.n	800441a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	429a      	cmp	r2, r3
 8004416:	d19b      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000000 	.word	0x20000000

08004428 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2200      	movs	r2, #0
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f7ff ff6a 	bl	8004318 <SPI_WaitFlagStateUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f043 0220 	orr.w	r2, r3, #32
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e000      	b.n	800445c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e041      	b.n	80044fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fd fc84 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 f940 	bl	8004728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e032      	b.n	8004582 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_TIM_Base_Start+0x88>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_TIM_Base_Start+0x48>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004536:	d009      	beq.n	800454c <HAL_TIM_Base_Start+0x48>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a14      	ldr	r2, [pc, #80]	; (8004590 <HAL_TIM_Base_Start+0x8c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_TIM_Base_Start+0x48>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a13      	ldr	r2, [pc, #76]	; (8004594 <HAL_TIM_Base_Start+0x90>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d111      	bne.n	8004570 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b06      	cmp	r3, #6
 800455c:	d010      	beq.n	8004580 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456e:	e007      	b.n	8004580 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800

08004598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_TIM_ConfigClockSource+0x1c>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e0b4      	b.n	800471e <HAL_TIM_ConfigClockSource+0x186>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ec:	d03e      	beq.n	800466c <HAL_TIM_ConfigClockSource+0xd4>
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f2:	f200 8087 	bhi.w	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fa:	f000 8086 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x172>
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d87f      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b70      	cmp	r3, #112	; 0x70
 8004606:	d01a      	beq.n	800463e <HAL_TIM_ConfigClockSource+0xa6>
 8004608:	2b70      	cmp	r3, #112	; 0x70
 800460a:	d87b      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b60      	cmp	r3, #96	; 0x60
 800460e:	d050      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0x11a>
 8004610:	2b60      	cmp	r3, #96	; 0x60
 8004612:	d877      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b50      	cmp	r3, #80	; 0x50
 8004616:	d03c      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0xfa>
 8004618:	2b50      	cmp	r3, #80	; 0x50
 800461a:	d873      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d058      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0x13a>
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d86f      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 8004624:	2b30      	cmp	r3, #48	; 0x30
 8004626:	d064      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004628:	2b30      	cmp	r3, #48	; 0x30
 800462a:	d86b      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 800462c:	2b20      	cmp	r3, #32
 800462e:	d060      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004630:	2b20      	cmp	r3, #32
 8004632:	d867      	bhi.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d05c      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x15a>
 8004638:	2b10      	cmp	r3, #16
 800463a:	d05a      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0x15a>
 800463c:	e062      	b.n	8004704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f000 f944 	bl	80048da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	609a      	str	r2, [r3, #8]
      break;
 800466a:	e04f      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6899      	ldr	r1, [r3, #8]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f000 f92d 	bl	80048da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800468e:	609a      	str	r2, [r3, #8]
      break;
 8004690:	e03c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	461a      	mov	r2, r3
 80046a0:	f000 f8a4 	bl	80047ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2150      	movs	r1, #80	; 0x50
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f8fb 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 80046b0:	e02c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	461a      	mov	r2, r3
 80046c0:	f000 f8c2 	bl	8004848 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2160      	movs	r1, #96	; 0x60
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f8eb 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 80046d0:	e01c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	461a      	mov	r2, r3
 80046e0:	f000 f884 	bl	80047ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2140      	movs	r1, #64	; 0x40
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f8db 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 80046f0:	e00c      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f000 f8d2 	bl	80048a6 <TIM_ITRx_SetConfig>
      break;
 8004702:	e003      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      break;
 8004708:	e000      	b.n	800470c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800470a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a29      	ldr	r2, [pc, #164]	; (80047e0 <TIM_Base_SetConfig+0xb8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00b      	beq.n	8004758 <TIM_Base_SetConfig+0x30>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d007      	beq.n	8004758 <TIM_Base_SetConfig+0x30>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a26      	ldr	r2, [pc, #152]	; (80047e4 <TIM_Base_SetConfig+0xbc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_Base_SetConfig+0x30>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <TIM_Base_SetConfig+0xc0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d108      	bne.n	800476a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <TIM_Base_SetConfig+0xb8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0x62>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0x62>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <TIM_Base_SetConfig+0xbc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0x62>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <TIM_Base_SetConfig+0xc0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <TIM_Base_SetConfig+0xb8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d103      	bne.n	80047d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	615a      	str	r2, [r3, #20]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800

080047ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 030a 	bic.w	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0210 	bic.w	r2, r3, #16
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	031b      	lsls	r3, r3, #12
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004884:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	621a      	str	r2, [r3, #32]
}
 800489c:	bf00      	nop
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr

080048a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f043 0307 	orr.w	r3, r3, #7
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048da:	b480      	push	{r7}
 80048dc:	b087      	sub	sp, #28
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	021a      	lsls	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4313      	orrs	r3, r2
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	609a      	str	r2, [r3, #8]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr

08004918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800492c:	2302      	movs	r3, #2
 800492e:	e046      	b.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00e      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d009      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10c      	bne.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800

080049d4 <__errno>:
 80049d4:	4b01      	ldr	r3, [pc, #4]	; (80049dc <__errno+0x8>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <__libc_init_array>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	2600      	movs	r6, #0
 80049e4:	4d0c      	ldr	r5, [pc, #48]	; (8004a18 <__libc_init_array+0x38>)
 80049e6:	4c0d      	ldr	r4, [pc, #52]	; (8004a1c <__libc_init_array+0x3c>)
 80049e8:	1b64      	subs	r4, r4, r5
 80049ea:	10a4      	asrs	r4, r4, #2
 80049ec:	42a6      	cmp	r6, r4
 80049ee:	d109      	bne.n	8004a04 <__libc_init_array+0x24>
 80049f0:	f004 fc50 	bl	8009294 <_init>
 80049f4:	2600      	movs	r6, #0
 80049f6:	4d0a      	ldr	r5, [pc, #40]	; (8004a20 <__libc_init_array+0x40>)
 80049f8:	4c0a      	ldr	r4, [pc, #40]	; (8004a24 <__libc_init_array+0x44>)
 80049fa:	1b64      	subs	r4, r4, r5
 80049fc:	10a4      	asrs	r4, r4, #2
 80049fe:	42a6      	cmp	r6, r4
 8004a00:	d105      	bne.n	8004a0e <__libc_init_array+0x2e>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a08:	4798      	blx	r3
 8004a0a:	3601      	adds	r6, #1
 8004a0c:	e7ee      	b.n	80049ec <__libc_init_array+0xc>
 8004a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a12:	4798      	blx	r3
 8004a14:	3601      	adds	r6, #1
 8004a16:	e7f2      	b.n	80049fe <__libc_init_array+0x1e>
 8004a18:	080099b4 	.word	0x080099b4
 8004a1c:	080099b4 	.word	0x080099b4
 8004a20:	080099b4 	.word	0x080099b4
 8004a24:	080099b8 	.word	0x080099b8

08004a28 <memset>:
 8004a28:	4603      	mov	r3, r0
 8004a2a:	4402      	add	r2, r0
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <memset+0xa>
 8004a30:	4770      	bx	lr
 8004a32:	f803 1b01 	strb.w	r1, [r3], #1
 8004a36:	e7f9      	b.n	8004a2c <memset+0x4>

08004a38 <__cvt>:
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3e:	461f      	mov	r7, r3
 8004a40:	bfbb      	ittet	lt
 8004a42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a46:	461f      	movlt	r7, r3
 8004a48:	2300      	movge	r3, #0
 8004a4a:	232d      	movlt	r3, #45	; 0x2d
 8004a4c:	b088      	sub	sp, #32
 8004a4e:	4614      	mov	r4, r2
 8004a50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a54:	7013      	strb	r3, [r2, #0]
 8004a56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a58:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a5c:	f023 0820 	bic.w	r8, r3, #32
 8004a60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a64:	d005      	beq.n	8004a72 <__cvt+0x3a>
 8004a66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a6a:	d100      	bne.n	8004a6e <__cvt+0x36>
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e000      	b.n	8004a74 <__cvt+0x3c>
 8004a72:	2303      	movs	r3, #3
 8004a74:	aa07      	add	r2, sp, #28
 8004a76:	9204      	str	r2, [sp, #16]
 8004a78:	aa06      	add	r2, sp, #24
 8004a7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a7e:	e9cd 3500 	strd	r3, r5, [sp]
 8004a82:	4622      	mov	r2, r4
 8004a84:	463b      	mov	r3, r7
 8004a86:	f001 fd83 	bl	8006590 <_dtoa_r>
 8004a8a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a8e:	4606      	mov	r6, r0
 8004a90:	d102      	bne.n	8004a98 <__cvt+0x60>
 8004a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a94:	07db      	lsls	r3, r3, #31
 8004a96:	d522      	bpl.n	8004ade <__cvt+0xa6>
 8004a98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a9c:	eb06 0905 	add.w	r9, r6, r5
 8004aa0:	d110      	bne.n	8004ac4 <__cvt+0x8c>
 8004aa2:	7833      	ldrb	r3, [r6, #0]
 8004aa4:	2b30      	cmp	r3, #48	; 0x30
 8004aa6:	d10a      	bne.n	8004abe <__cvt+0x86>
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4620      	mov	r0, r4
 8004aae:	4639      	mov	r1, r7
 8004ab0:	f7fb ff7a 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab4:	b918      	cbnz	r0, 8004abe <__cvt+0x86>
 8004ab6:	f1c5 0501 	rsb	r5, r5, #1
 8004aba:	f8ca 5000 	str.w	r5, [sl]
 8004abe:	f8da 3000 	ldr.w	r3, [sl]
 8004ac2:	4499      	add	r9, r3
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	4620      	mov	r0, r4
 8004aca:	4639      	mov	r1, r7
 8004acc:	f7fb ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8004ad0:	b108      	cbz	r0, 8004ad6 <__cvt+0x9e>
 8004ad2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ad6:	2230      	movs	r2, #48	; 0x30
 8004ad8:	9b07      	ldr	r3, [sp, #28]
 8004ada:	454b      	cmp	r3, r9
 8004adc:	d307      	bcc.n	8004aee <__cvt+0xb6>
 8004ade:	4630      	mov	r0, r6
 8004ae0:	9b07      	ldr	r3, [sp, #28]
 8004ae2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ae4:	1b9b      	subs	r3, r3, r6
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	b008      	add	sp, #32
 8004aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aee:	1c59      	adds	r1, r3, #1
 8004af0:	9107      	str	r1, [sp, #28]
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e7f0      	b.n	8004ad8 <__cvt+0xa0>

08004af6 <__exponent>:
 8004af6:	4603      	mov	r3, r0
 8004af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004afa:	2900      	cmp	r1, #0
 8004afc:	f803 2b02 	strb.w	r2, [r3], #2
 8004b00:	bfb6      	itet	lt
 8004b02:	222d      	movlt	r2, #45	; 0x2d
 8004b04:	222b      	movge	r2, #43	; 0x2b
 8004b06:	4249      	neglt	r1, r1
 8004b08:	2909      	cmp	r1, #9
 8004b0a:	7042      	strb	r2, [r0, #1]
 8004b0c:	dd2b      	ble.n	8004b66 <__exponent+0x70>
 8004b0e:	f10d 0407 	add.w	r4, sp, #7
 8004b12:	46a4      	mov	ip, r4
 8004b14:	270a      	movs	r7, #10
 8004b16:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	46a6      	mov	lr, r4
 8004b1e:	fb07 1516 	mls	r5, r7, r6, r1
 8004b22:	2a63      	cmp	r2, #99	; 0x63
 8004b24:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004b28:	4631      	mov	r1, r6
 8004b2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b32:	dcf0      	bgt.n	8004b16 <__exponent+0x20>
 8004b34:	3130      	adds	r1, #48	; 0x30
 8004b36:	f1ae 0502 	sub.w	r5, lr, #2
 8004b3a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b3e:	4629      	mov	r1, r5
 8004b40:	1c44      	adds	r4, r0, #1
 8004b42:	4561      	cmp	r1, ip
 8004b44:	d30a      	bcc.n	8004b5c <__exponent+0x66>
 8004b46:	f10d 0209 	add.w	r2, sp, #9
 8004b4a:	eba2 020e 	sub.w	r2, r2, lr
 8004b4e:	4565      	cmp	r5, ip
 8004b50:	bf88      	it	hi
 8004b52:	2200      	movhi	r2, #0
 8004b54:	4413      	add	r3, r2
 8004b56:	1a18      	subs	r0, r3, r0
 8004b58:	b003      	add	sp, #12
 8004b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b60:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b64:	e7ed      	b.n	8004b42 <__exponent+0x4c>
 8004b66:	2330      	movs	r3, #48	; 0x30
 8004b68:	3130      	adds	r1, #48	; 0x30
 8004b6a:	7083      	strb	r3, [r0, #2]
 8004b6c:	70c1      	strb	r1, [r0, #3]
 8004b6e:	1d03      	adds	r3, r0, #4
 8004b70:	e7f1      	b.n	8004b56 <__exponent+0x60>
	...

08004b74 <_printf_float>:
 8004b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	b091      	sub	sp, #68	; 0x44
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004b80:	4616      	mov	r6, r2
 8004b82:	461f      	mov	r7, r3
 8004b84:	4605      	mov	r5, r0
 8004b86:	f002 fe57 	bl	8007838 <_localeconv_r>
 8004b8a:	6803      	ldr	r3, [r0, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b90:	f7fb fade 	bl	8000150 <strlen>
 8004b94:	2300      	movs	r3, #0
 8004b96:	930e      	str	r3, [sp, #56]	; 0x38
 8004b98:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9c:	900a      	str	r0, [sp, #40]	; 0x28
 8004b9e:	3307      	adds	r3, #7
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	f103 0208 	add.w	r2, r3, #8
 8004ba8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bac:	f8d4 b000 	ldr.w	fp, [r4]
 8004bb0:	f8c8 2000 	str.w	r2, [r8]
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bbc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004bc0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4b9c      	ldr	r3, [pc, #624]	; (8004e40 <_printf_float+0x2cc>)
 8004bce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bd0:	f7fb ff1c 	bl	8000a0c <__aeabi_dcmpun>
 8004bd4:	bb70      	cbnz	r0, 8004c34 <_printf_float+0xc0>
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bda:	4640      	mov	r0, r8
 8004bdc:	4b98      	ldr	r3, [pc, #608]	; (8004e40 <_printf_float+0x2cc>)
 8004bde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004be0:	f7fb fef6 	bl	80009d0 <__aeabi_dcmple>
 8004be4:	bb30      	cbnz	r0, 8004c34 <_printf_float+0xc0>
 8004be6:	2200      	movs	r2, #0
 8004be8:	2300      	movs	r3, #0
 8004bea:	4640      	mov	r0, r8
 8004bec:	4651      	mov	r1, sl
 8004bee:	f7fb fee5 	bl	80009bc <__aeabi_dcmplt>
 8004bf2:	b110      	cbz	r0, 8004bfa <_printf_float+0x86>
 8004bf4:	232d      	movs	r3, #45	; 0x2d
 8004bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bfa:	4b92      	ldr	r3, [pc, #584]	; (8004e44 <_printf_float+0x2d0>)
 8004bfc:	4892      	ldr	r0, [pc, #584]	; (8004e48 <_printf_float+0x2d4>)
 8004bfe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c02:	bf94      	ite	ls
 8004c04:	4698      	movls	r8, r3
 8004c06:	4680      	movhi	r8, r0
 8004c08:	2303      	movs	r3, #3
 8004c0a:	f04f 0a00 	mov.w	sl, #0
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	f02b 0304 	bic.w	r3, fp, #4
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	4633      	mov	r3, r6
 8004c18:	4621      	mov	r1, r4
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	9700      	str	r7, [sp, #0]
 8004c1e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c20:	f000 f9d4 	bl	8004fcc <_printf_common>
 8004c24:	3001      	adds	r0, #1
 8004c26:	f040 8090 	bne.w	8004d4a <_printf_float+0x1d6>
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2e:	b011      	add	sp, #68	; 0x44
 8004c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c34:	4642      	mov	r2, r8
 8004c36:	4653      	mov	r3, sl
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	f7fb fee6 	bl	8000a0c <__aeabi_dcmpun>
 8004c40:	b148      	cbz	r0, 8004c56 <_printf_float+0xe2>
 8004c42:	f1ba 0f00 	cmp.w	sl, #0
 8004c46:	bfb8      	it	lt
 8004c48:	232d      	movlt	r3, #45	; 0x2d
 8004c4a:	4880      	ldr	r0, [pc, #512]	; (8004e4c <_printf_float+0x2d8>)
 8004c4c:	bfb8      	it	lt
 8004c4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c52:	4b7f      	ldr	r3, [pc, #508]	; (8004e50 <_printf_float+0x2dc>)
 8004c54:	e7d3      	b.n	8004bfe <_printf_float+0x8a>
 8004c56:	6863      	ldr	r3, [r4, #4]
 8004c58:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	d142      	bne.n	8004ce6 <_printf_float+0x172>
 8004c60:	2306      	movs	r3, #6
 8004c62:	6063      	str	r3, [r4, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	9206      	str	r2, [sp, #24]
 8004c68:	aa0e      	add	r2, sp, #56	; 0x38
 8004c6a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c6e:	aa0d      	add	r2, sp, #52	; 0x34
 8004c70:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004c74:	9203      	str	r2, [sp, #12]
 8004c76:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004c7a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c7e:	6023      	str	r3, [r4, #0]
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	4642      	mov	r2, r8
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4628      	mov	r0, r5
 8004c88:	4653      	mov	r3, sl
 8004c8a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c8c:	f7ff fed4 	bl	8004a38 <__cvt>
 8004c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c92:	4680      	mov	r8, r0
 8004c94:	2947      	cmp	r1, #71	; 0x47
 8004c96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c98:	d108      	bne.n	8004cac <_printf_float+0x138>
 8004c9a:	1cc8      	adds	r0, r1, #3
 8004c9c:	db02      	blt.n	8004ca4 <_printf_float+0x130>
 8004c9e:	6863      	ldr	r3, [r4, #4]
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	dd40      	ble.n	8004d26 <_printf_float+0x1b2>
 8004ca4:	f1a9 0902 	sub.w	r9, r9, #2
 8004ca8:	fa5f f989 	uxtb.w	r9, r9
 8004cac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cb0:	d81f      	bhi.n	8004cf2 <_printf_float+0x17e>
 8004cb2:	464a      	mov	r2, r9
 8004cb4:	3901      	subs	r1, #1
 8004cb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cba:	910d      	str	r1, [sp, #52]	; 0x34
 8004cbc:	f7ff ff1b 	bl	8004af6 <__exponent>
 8004cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cc2:	4682      	mov	sl, r0
 8004cc4:	1813      	adds	r3, r2, r0
 8004cc6:	2a01      	cmp	r2, #1
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	dc02      	bgt.n	8004cd2 <_printf_float+0x15e>
 8004ccc:	6822      	ldr	r2, [r4, #0]
 8004cce:	07d2      	lsls	r2, r2, #31
 8004cd0:	d501      	bpl.n	8004cd6 <_printf_float+0x162>
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d09b      	beq.n	8004c16 <_printf_float+0xa2>
 8004cde:	232d      	movs	r3, #45	; 0x2d
 8004ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce4:	e797      	b.n	8004c16 <_printf_float+0xa2>
 8004ce6:	2947      	cmp	r1, #71	; 0x47
 8004ce8:	d1bc      	bne.n	8004c64 <_printf_float+0xf0>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ba      	bne.n	8004c64 <_printf_float+0xf0>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e7b7      	b.n	8004c62 <_printf_float+0xee>
 8004cf2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004cf6:	d118      	bne.n	8004d2a <_printf_float+0x1b6>
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	dd0b      	ble.n	8004d16 <_printf_float+0x1a2>
 8004cfe:	6121      	str	r1, [r4, #16]
 8004d00:	b913      	cbnz	r3, 8004d08 <_printf_float+0x194>
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	07d0      	lsls	r0, r2, #31
 8004d06:	d502      	bpl.n	8004d0e <_printf_float+0x19a>
 8004d08:	3301      	adds	r3, #1
 8004d0a:	440b      	add	r3, r1
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	f04f 0a00 	mov.w	sl, #0
 8004d12:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d14:	e7df      	b.n	8004cd6 <_printf_float+0x162>
 8004d16:	b913      	cbnz	r3, 8004d1e <_printf_float+0x1aa>
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	07d2      	lsls	r2, r2, #31
 8004d1c:	d501      	bpl.n	8004d22 <_printf_float+0x1ae>
 8004d1e:	3302      	adds	r3, #2
 8004d20:	e7f4      	b.n	8004d0c <_printf_float+0x198>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e7f2      	b.n	8004d0c <_printf_float+0x198>
 8004d26:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	db05      	blt.n	8004d3c <_printf_float+0x1c8>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	6121      	str	r1, [r4, #16]
 8004d34:	07d8      	lsls	r0, r3, #31
 8004d36:	d5ea      	bpl.n	8004d0e <_printf_float+0x19a>
 8004d38:	1c4b      	adds	r3, r1, #1
 8004d3a:	e7e7      	b.n	8004d0c <_printf_float+0x198>
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	bfcc      	ite	gt
 8004d40:	2201      	movgt	r2, #1
 8004d42:	f1c1 0202 	rsble	r2, r1, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	e7e0      	b.n	8004d0c <_printf_float+0x198>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	055a      	lsls	r2, r3, #21
 8004d4e:	d407      	bmi.n	8004d60 <_printf_float+0x1ec>
 8004d50:	6923      	ldr	r3, [r4, #16]
 8004d52:	4642      	mov	r2, r8
 8004d54:	4631      	mov	r1, r6
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d12b      	bne.n	8004db6 <_printf_float+0x242>
 8004d5e:	e764      	b.n	8004c2a <_printf_float+0xb6>
 8004d60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d64:	f240 80dd 	bls.w	8004f22 <_printf_float+0x3ae>
 8004d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f7fb fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d033      	beq.n	8004de0 <_printf_float+0x26c>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	4a35      	ldr	r2, [pc, #212]	; (8004e54 <_printf_float+0x2e0>)
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	f43f af51 	beq.w	8004c2a <_printf_float+0xb6>
 8004d88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	db02      	blt.n	8004d96 <_printf_float+0x222>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	07d8      	lsls	r0, r3, #31
 8004d94:	d50f      	bpl.n	8004db6 <_printf_float+0x242>
 8004d96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	f43f af42 	beq.w	8004c2a <_printf_float+0xb6>
 8004da6:	f04f 0800 	mov.w	r8, #0
 8004daa:	f104 091a 	add.w	r9, r4, #26
 8004dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db0:	3b01      	subs	r3, #1
 8004db2:	4543      	cmp	r3, r8
 8004db4:	dc09      	bgt.n	8004dca <_printf_float+0x256>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	079b      	lsls	r3, r3, #30
 8004dba:	f100 8102 	bmi.w	8004fc2 <_printf_float+0x44e>
 8004dbe:	68e0      	ldr	r0, [r4, #12]
 8004dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dc2:	4298      	cmp	r0, r3
 8004dc4:	bfb8      	it	lt
 8004dc6:	4618      	movlt	r0, r3
 8004dc8:	e731      	b.n	8004c2e <_printf_float+0xba>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	464a      	mov	r2, r9
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b8      	blx	r7
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f43f af28 	beq.w	8004c2a <_printf_float+0xb6>
 8004dda:	f108 0801 	add.w	r8, r8, #1
 8004dde:	e7e6      	b.n	8004dae <_printf_float+0x23a>
 8004de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	dc38      	bgt.n	8004e58 <_printf_float+0x2e4>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <_printf_float+0x2e0>)
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	f43f af1a 	beq.w	8004c2a <_printf_float+0xb6>
 8004df6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d102      	bne.n	8004e04 <_printf_float+0x290>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	07d9      	lsls	r1, r3, #31
 8004e02:	d5d8      	bpl.n	8004db6 <_printf_float+0x242>
 8004e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f af0b 	beq.w	8004c2a <_printf_float+0xb6>
 8004e14:	f04f 0900 	mov.w	r9, #0
 8004e18:	f104 0a1a 	add.w	sl, r4, #26
 8004e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e1e:	425b      	negs	r3, r3
 8004e20:	454b      	cmp	r3, r9
 8004e22:	dc01      	bgt.n	8004e28 <_printf_float+0x2b4>
 8004e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e26:	e794      	b.n	8004d52 <_printf_float+0x1de>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4652      	mov	r2, sl
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b8      	blx	r7
 8004e32:	3001      	adds	r0, #1
 8004e34:	f43f aef9 	beq.w	8004c2a <_printf_float+0xb6>
 8004e38:	f109 0901 	add.w	r9, r9, #1
 8004e3c:	e7ee      	b.n	8004e1c <_printf_float+0x2a8>
 8004e3e:	bf00      	nop
 8004e40:	7fefffff 	.word	0x7fefffff
 8004e44:	08009514 	.word	0x08009514
 8004e48:	08009518 	.word	0x08009518
 8004e4c:	08009520 	.word	0x08009520
 8004e50:	0800951c 	.word	0x0800951c
 8004e54:	08009524 	.word	0x08009524
 8004e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	bfa8      	it	ge
 8004e60:	461a      	movge	r2, r3
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	4691      	mov	r9, r2
 8004e66:	dc37      	bgt.n	8004ed8 <_printf_float+0x364>
 8004e68:	f04f 0b00 	mov.w	fp, #0
 8004e6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e70:	f104 021a 	add.w	r2, r4, #26
 8004e74:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e78:	ebaa 0309 	sub.w	r3, sl, r9
 8004e7c:	455b      	cmp	r3, fp
 8004e7e:	dc33      	bgt.n	8004ee8 <_printf_float+0x374>
 8004e80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e84:	429a      	cmp	r2, r3
 8004e86:	db3b      	blt.n	8004f00 <_printf_float+0x38c>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	07da      	lsls	r2, r3, #31
 8004e8c:	d438      	bmi.n	8004f00 <_printf_float+0x38c>
 8004e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e92:	eba3 020a 	sub.w	r2, r3, sl
 8004e96:	eba3 0901 	sub.w	r9, r3, r1
 8004e9a:	4591      	cmp	r9, r2
 8004e9c:	bfa8      	it	ge
 8004e9e:	4691      	movge	r9, r2
 8004ea0:	f1b9 0f00 	cmp.w	r9, #0
 8004ea4:	dc34      	bgt.n	8004f10 <_printf_float+0x39c>
 8004ea6:	f04f 0800 	mov.w	r8, #0
 8004eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eae:	f104 0a1a 	add.w	sl, r4, #26
 8004eb2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	eba3 0309 	sub.w	r3, r3, r9
 8004ebc:	4543      	cmp	r3, r8
 8004ebe:	f77f af7a 	ble.w	8004db6 <_printf_float+0x242>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4652      	mov	r2, sl
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b8      	blx	r7
 8004ecc:	3001      	adds	r0, #1
 8004ece:	f43f aeac 	beq.w	8004c2a <_printf_float+0xb6>
 8004ed2:	f108 0801 	add.w	r8, r8, #1
 8004ed6:	e7ec      	b.n	8004eb2 <_printf_float+0x33e>
 8004ed8:	4613      	mov	r3, r2
 8004eda:	4631      	mov	r1, r6
 8004edc:	4642      	mov	r2, r8
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d1c0      	bne.n	8004e68 <_printf_float+0x2f4>
 8004ee6:	e6a0      	b.n	8004c2a <_printf_float+0xb6>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ef0:	47b8      	blx	r7
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f43f ae99 	beq.w	8004c2a <_printf_float+0xb6>
 8004ef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004efa:	f10b 0b01 	add.w	fp, fp, #1
 8004efe:	e7b9      	b.n	8004e74 <_printf_float+0x300>
 8004f00:	4631      	mov	r1, r6
 8004f02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f06:	4628      	mov	r0, r5
 8004f08:	47b8      	blx	r7
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d1bf      	bne.n	8004e8e <_printf_float+0x31a>
 8004f0e:	e68c      	b.n	8004c2a <_printf_float+0xb6>
 8004f10:	464b      	mov	r3, r9
 8004f12:	4631      	mov	r1, r6
 8004f14:	4628      	mov	r0, r5
 8004f16:	eb08 020a 	add.w	r2, r8, sl
 8004f1a:	47b8      	blx	r7
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d1c2      	bne.n	8004ea6 <_printf_float+0x332>
 8004f20:	e683      	b.n	8004c2a <_printf_float+0xb6>
 8004f22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f24:	2a01      	cmp	r2, #1
 8004f26:	dc01      	bgt.n	8004f2c <_printf_float+0x3b8>
 8004f28:	07db      	lsls	r3, r3, #31
 8004f2a:	d537      	bpl.n	8004f9c <_printf_float+0x428>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4642      	mov	r2, r8
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	f43f ae77 	beq.w	8004c2a <_printf_float+0xb6>
 8004f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	f43f ae6f 	beq.w	8004c2a <_printf_float+0xb6>
 8004f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f50:	2200      	movs	r2, #0
 8004f52:	2300      	movs	r3, #0
 8004f54:	f7fb fd28 	bl	80009a8 <__aeabi_dcmpeq>
 8004f58:	b9d8      	cbnz	r0, 8004f92 <_printf_float+0x41e>
 8004f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f5c:	f108 0201 	add.w	r2, r8, #1
 8004f60:	3b01      	subs	r3, #1
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d10e      	bne.n	8004f8a <_printf_float+0x416>
 8004f6c:	e65d      	b.n	8004c2a <_printf_float+0xb6>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	464a      	mov	r2, r9
 8004f72:	4631      	mov	r1, r6
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b8      	blx	r7
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae56 	beq.w	8004c2a <_printf_float+0xb6>
 8004f7e:	f108 0801 	add.w	r8, r8, #1
 8004f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f84:	3b01      	subs	r3, #1
 8004f86:	4543      	cmp	r3, r8
 8004f88:	dcf1      	bgt.n	8004f6e <_printf_float+0x3fa>
 8004f8a:	4653      	mov	r3, sl
 8004f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f90:	e6e0      	b.n	8004d54 <_printf_float+0x1e0>
 8004f92:	f04f 0800 	mov.w	r8, #0
 8004f96:	f104 091a 	add.w	r9, r4, #26
 8004f9a:	e7f2      	b.n	8004f82 <_printf_float+0x40e>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4642      	mov	r2, r8
 8004fa0:	e7df      	b.n	8004f62 <_printf_float+0x3ee>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	464a      	mov	r2, r9
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b8      	blx	r7
 8004fac:	3001      	adds	r0, #1
 8004fae:	f43f ae3c 	beq.w	8004c2a <_printf_float+0xb6>
 8004fb2:	f108 0801 	add.w	r8, r8, #1
 8004fb6:	68e3      	ldr	r3, [r4, #12]
 8004fb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fba:	1a5b      	subs	r3, r3, r1
 8004fbc:	4543      	cmp	r3, r8
 8004fbe:	dcf0      	bgt.n	8004fa2 <_printf_float+0x42e>
 8004fc0:	e6fd      	b.n	8004dbe <_printf_float+0x24a>
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	f104 0919 	add.w	r9, r4, #25
 8004fca:	e7f4      	b.n	8004fb6 <_printf_float+0x442>

08004fcc <_printf_common>:
 8004fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	4616      	mov	r6, r2
 8004fd2:	4699      	mov	r9, r3
 8004fd4:	688a      	ldr	r2, [r1, #8]
 8004fd6:	690b      	ldr	r3, [r1, #16]
 8004fd8:	4607      	mov	r7, r0
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	bfb8      	it	lt
 8004fde:	4613      	movlt	r3, r2
 8004fe0:	6033      	str	r3, [r6, #0]
 8004fe2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fec:	b10a      	cbz	r2, 8004ff2 <_printf_common+0x26>
 8004fee:	3301      	adds	r3, #1
 8004ff0:	6033      	str	r3, [r6, #0]
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	0699      	lsls	r1, r3, #26
 8004ff6:	bf42      	ittt	mi
 8004ff8:	6833      	ldrmi	r3, [r6, #0]
 8004ffa:	3302      	addmi	r3, #2
 8004ffc:	6033      	strmi	r3, [r6, #0]
 8004ffe:	6825      	ldr	r5, [r4, #0]
 8005000:	f015 0506 	ands.w	r5, r5, #6
 8005004:	d106      	bne.n	8005014 <_printf_common+0x48>
 8005006:	f104 0a19 	add.w	sl, r4, #25
 800500a:	68e3      	ldr	r3, [r4, #12]
 800500c:	6832      	ldr	r2, [r6, #0]
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	42ab      	cmp	r3, r5
 8005012:	dc28      	bgt.n	8005066 <_printf_common+0x9a>
 8005014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005018:	1e13      	subs	r3, r2, #0
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	bf18      	it	ne
 800501e:	2301      	movne	r3, #1
 8005020:	0692      	lsls	r2, r2, #26
 8005022:	d42d      	bmi.n	8005080 <_printf_common+0xb4>
 8005024:	4649      	mov	r1, r9
 8005026:	4638      	mov	r0, r7
 8005028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800502c:	47c0      	blx	r8
 800502e:	3001      	adds	r0, #1
 8005030:	d020      	beq.n	8005074 <_printf_common+0xa8>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	68e5      	ldr	r5, [r4, #12]
 8005036:	f003 0306 	and.w	r3, r3, #6
 800503a:	2b04      	cmp	r3, #4
 800503c:	bf18      	it	ne
 800503e:	2500      	movne	r5, #0
 8005040:	6832      	ldr	r2, [r6, #0]
 8005042:	f04f 0600 	mov.w	r6, #0
 8005046:	68a3      	ldr	r3, [r4, #8]
 8005048:	bf08      	it	eq
 800504a:	1aad      	subeq	r5, r5, r2
 800504c:	6922      	ldr	r2, [r4, #16]
 800504e:	bf08      	it	eq
 8005050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005054:	4293      	cmp	r3, r2
 8005056:	bfc4      	itt	gt
 8005058:	1a9b      	subgt	r3, r3, r2
 800505a:	18ed      	addgt	r5, r5, r3
 800505c:	341a      	adds	r4, #26
 800505e:	42b5      	cmp	r5, r6
 8005060:	d11a      	bne.n	8005098 <_printf_common+0xcc>
 8005062:	2000      	movs	r0, #0
 8005064:	e008      	b.n	8005078 <_printf_common+0xac>
 8005066:	2301      	movs	r3, #1
 8005068:	4652      	mov	r2, sl
 800506a:	4649      	mov	r1, r9
 800506c:	4638      	mov	r0, r7
 800506e:	47c0      	blx	r8
 8005070:	3001      	adds	r0, #1
 8005072:	d103      	bne.n	800507c <_printf_common+0xb0>
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507c:	3501      	adds	r5, #1
 800507e:	e7c4      	b.n	800500a <_printf_common+0x3e>
 8005080:	2030      	movs	r0, #48	; 0x30
 8005082:	18e1      	adds	r1, r4, r3
 8005084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800508e:	4422      	add	r2, r4
 8005090:	3302      	adds	r3, #2
 8005092:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005096:	e7c5      	b.n	8005024 <_printf_common+0x58>
 8005098:	2301      	movs	r3, #1
 800509a:	4622      	mov	r2, r4
 800509c:	4649      	mov	r1, r9
 800509e:	4638      	mov	r0, r7
 80050a0:	47c0      	blx	r8
 80050a2:	3001      	adds	r0, #1
 80050a4:	d0e6      	beq.n	8005074 <_printf_common+0xa8>
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7d9      	b.n	800505e <_printf_common+0x92>
	...

080050ac <_printf_i>:
 80050ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	7e0f      	ldrb	r7, [r1, #24]
 80050b2:	4691      	mov	r9, r2
 80050b4:	2f78      	cmp	r7, #120	; 0x78
 80050b6:	4680      	mov	r8, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	469a      	mov	sl, r3
 80050bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050c2:	d807      	bhi.n	80050d4 <_printf_i+0x28>
 80050c4:	2f62      	cmp	r7, #98	; 0x62
 80050c6:	d80a      	bhi.n	80050de <_printf_i+0x32>
 80050c8:	2f00      	cmp	r7, #0
 80050ca:	f000 80d9 	beq.w	8005280 <_printf_i+0x1d4>
 80050ce:	2f58      	cmp	r7, #88	; 0x58
 80050d0:	f000 80a4 	beq.w	800521c <_printf_i+0x170>
 80050d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050dc:	e03a      	b.n	8005154 <_printf_i+0xa8>
 80050de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050e2:	2b15      	cmp	r3, #21
 80050e4:	d8f6      	bhi.n	80050d4 <_printf_i+0x28>
 80050e6:	a101      	add	r1, pc, #4	; (adr r1, 80050ec <_printf_i+0x40>)
 80050e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050ec:	08005145 	.word	0x08005145
 80050f0:	08005159 	.word	0x08005159
 80050f4:	080050d5 	.word	0x080050d5
 80050f8:	080050d5 	.word	0x080050d5
 80050fc:	080050d5 	.word	0x080050d5
 8005100:	080050d5 	.word	0x080050d5
 8005104:	08005159 	.word	0x08005159
 8005108:	080050d5 	.word	0x080050d5
 800510c:	080050d5 	.word	0x080050d5
 8005110:	080050d5 	.word	0x080050d5
 8005114:	080050d5 	.word	0x080050d5
 8005118:	08005267 	.word	0x08005267
 800511c:	08005189 	.word	0x08005189
 8005120:	08005249 	.word	0x08005249
 8005124:	080050d5 	.word	0x080050d5
 8005128:	080050d5 	.word	0x080050d5
 800512c:	08005289 	.word	0x08005289
 8005130:	080050d5 	.word	0x080050d5
 8005134:	08005189 	.word	0x08005189
 8005138:	080050d5 	.word	0x080050d5
 800513c:	080050d5 	.word	0x080050d5
 8005140:	08005251 	.word	0x08005251
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	602a      	str	r2, [r5, #0]
 800514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005154:	2301      	movs	r3, #1
 8005156:	e0a4      	b.n	80052a2 <_printf_i+0x1f6>
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	6829      	ldr	r1, [r5, #0]
 800515c:	0606      	lsls	r6, r0, #24
 800515e:	f101 0304 	add.w	r3, r1, #4
 8005162:	d50a      	bpl.n	800517a <_printf_i+0xce>
 8005164:	680e      	ldr	r6, [r1, #0]
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	2e00      	cmp	r6, #0
 800516a:	da03      	bge.n	8005174 <_printf_i+0xc8>
 800516c:	232d      	movs	r3, #45	; 0x2d
 800516e:	4276      	negs	r6, r6
 8005170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005174:	230a      	movs	r3, #10
 8005176:	485e      	ldr	r0, [pc, #376]	; (80052f0 <_printf_i+0x244>)
 8005178:	e019      	b.n	80051ae <_printf_i+0x102>
 800517a:	680e      	ldr	r6, [r1, #0]
 800517c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	bf18      	it	ne
 8005184:	b236      	sxthne	r6, r6
 8005186:	e7ef      	b.n	8005168 <_printf_i+0xbc>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	6820      	ldr	r0, [r4, #0]
 800518c:	1d19      	adds	r1, r3, #4
 800518e:	6029      	str	r1, [r5, #0]
 8005190:	0601      	lsls	r1, r0, #24
 8005192:	d501      	bpl.n	8005198 <_printf_i+0xec>
 8005194:	681e      	ldr	r6, [r3, #0]
 8005196:	e002      	b.n	800519e <_printf_i+0xf2>
 8005198:	0646      	lsls	r6, r0, #25
 800519a:	d5fb      	bpl.n	8005194 <_printf_i+0xe8>
 800519c:	881e      	ldrh	r6, [r3, #0]
 800519e:	2f6f      	cmp	r7, #111	; 0x6f
 80051a0:	bf0c      	ite	eq
 80051a2:	2308      	moveq	r3, #8
 80051a4:	230a      	movne	r3, #10
 80051a6:	4852      	ldr	r0, [pc, #328]	; (80052f0 <_printf_i+0x244>)
 80051a8:	2100      	movs	r1, #0
 80051aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ae:	6865      	ldr	r5, [r4, #4]
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	bfa8      	it	ge
 80051b4:	6821      	ldrge	r1, [r4, #0]
 80051b6:	60a5      	str	r5, [r4, #8]
 80051b8:	bfa4      	itt	ge
 80051ba:	f021 0104 	bicge.w	r1, r1, #4
 80051be:	6021      	strge	r1, [r4, #0]
 80051c0:	b90e      	cbnz	r6, 80051c6 <_printf_i+0x11a>
 80051c2:	2d00      	cmp	r5, #0
 80051c4:	d04d      	beq.n	8005262 <_printf_i+0x1b6>
 80051c6:	4615      	mov	r5, r2
 80051c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80051cc:	fb03 6711 	mls	r7, r3, r1, r6
 80051d0:	5dc7      	ldrb	r7, [r0, r7]
 80051d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051d6:	4637      	mov	r7, r6
 80051d8:	42bb      	cmp	r3, r7
 80051da:	460e      	mov	r6, r1
 80051dc:	d9f4      	bls.n	80051c8 <_printf_i+0x11c>
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d10b      	bne.n	80051fa <_printf_i+0x14e>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	07de      	lsls	r6, r3, #31
 80051e6:	d508      	bpl.n	80051fa <_printf_i+0x14e>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	6861      	ldr	r1, [r4, #4]
 80051ec:	4299      	cmp	r1, r3
 80051ee:	bfde      	ittt	le
 80051f0:	2330      	movle	r3, #48	; 0x30
 80051f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051fa:	1b52      	subs	r2, r2, r5
 80051fc:	6122      	str	r2, [r4, #16]
 80051fe:	464b      	mov	r3, r9
 8005200:	4621      	mov	r1, r4
 8005202:	4640      	mov	r0, r8
 8005204:	f8cd a000 	str.w	sl, [sp]
 8005208:	aa03      	add	r2, sp, #12
 800520a:	f7ff fedf 	bl	8004fcc <_printf_common>
 800520e:	3001      	adds	r0, #1
 8005210:	d14c      	bne.n	80052ac <_printf_i+0x200>
 8005212:	f04f 30ff 	mov.w	r0, #4294967295
 8005216:	b004      	add	sp, #16
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521c:	4834      	ldr	r0, [pc, #208]	; (80052f0 <_printf_i+0x244>)
 800521e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005222:	6829      	ldr	r1, [r5, #0]
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	f851 6b04 	ldr.w	r6, [r1], #4
 800522a:	6029      	str	r1, [r5, #0]
 800522c:	061d      	lsls	r5, r3, #24
 800522e:	d514      	bpl.n	800525a <_printf_i+0x1ae>
 8005230:	07df      	lsls	r7, r3, #31
 8005232:	bf44      	itt	mi
 8005234:	f043 0320 	orrmi.w	r3, r3, #32
 8005238:	6023      	strmi	r3, [r4, #0]
 800523a:	b91e      	cbnz	r6, 8005244 <_printf_i+0x198>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	f023 0320 	bic.w	r3, r3, #32
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	2310      	movs	r3, #16
 8005246:	e7af      	b.n	80051a8 <_printf_i+0xfc>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	f043 0320 	orr.w	r3, r3, #32
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	2378      	movs	r3, #120	; 0x78
 8005252:	4828      	ldr	r0, [pc, #160]	; (80052f4 <_printf_i+0x248>)
 8005254:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005258:	e7e3      	b.n	8005222 <_printf_i+0x176>
 800525a:	0659      	lsls	r1, r3, #25
 800525c:	bf48      	it	mi
 800525e:	b2b6      	uxthmi	r6, r6
 8005260:	e7e6      	b.n	8005230 <_printf_i+0x184>
 8005262:	4615      	mov	r5, r2
 8005264:	e7bb      	b.n	80051de <_printf_i+0x132>
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	6826      	ldr	r6, [r4, #0]
 800526a:	1d18      	adds	r0, r3, #4
 800526c:	6961      	ldr	r1, [r4, #20]
 800526e:	6028      	str	r0, [r5, #0]
 8005270:	0635      	lsls	r5, r6, #24
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	d501      	bpl.n	800527a <_printf_i+0x1ce>
 8005276:	6019      	str	r1, [r3, #0]
 8005278:	e002      	b.n	8005280 <_printf_i+0x1d4>
 800527a:	0670      	lsls	r0, r6, #25
 800527c:	d5fb      	bpl.n	8005276 <_printf_i+0x1ca>
 800527e:	8019      	strh	r1, [r3, #0]
 8005280:	2300      	movs	r3, #0
 8005282:	4615      	mov	r5, r2
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	e7ba      	b.n	80051fe <_printf_i+0x152>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	2100      	movs	r1, #0
 800528c:	1d1a      	adds	r2, r3, #4
 800528e:	602a      	str	r2, [r5, #0]
 8005290:	681d      	ldr	r5, [r3, #0]
 8005292:	6862      	ldr	r2, [r4, #4]
 8005294:	4628      	mov	r0, r5
 8005296:	f002 faed 	bl	8007874 <memchr>
 800529a:	b108      	cbz	r0, 80052a0 <_printf_i+0x1f4>
 800529c:	1b40      	subs	r0, r0, r5
 800529e:	6060      	str	r0, [r4, #4]
 80052a0:	6863      	ldr	r3, [r4, #4]
 80052a2:	6123      	str	r3, [r4, #16]
 80052a4:	2300      	movs	r3, #0
 80052a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052aa:	e7a8      	b.n	80051fe <_printf_i+0x152>
 80052ac:	462a      	mov	r2, r5
 80052ae:	4649      	mov	r1, r9
 80052b0:	4640      	mov	r0, r8
 80052b2:	6923      	ldr	r3, [r4, #16]
 80052b4:	47d0      	blx	sl
 80052b6:	3001      	adds	r0, #1
 80052b8:	d0ab      	beq.n	8005212 <_printf_i+0x166>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	079b      	lsls	r3, r3, #30
 80052be:	d413      	bmi.n	80052e8 <_printf_i+0x23c>
 80052c0:	68e0      	ldr	r0, [r4, #12]
 80052c2:	9b03      	ldr	r3, [sp, #12]
 80052c4:	4298      	cmp	r0, r3
 80052c6:	bfb8      	it	lt
 80052c8:	4618      	movlt	r0, r3
 80052ca:	e7a4      	b.n	8005216 <_printf_i+0x16a>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4632      	mov	r2, r6
 80052d0:	4649      	mov	r1, r9
 80052d2:	4640      	mov	r0, r8
 80052d4:	47d0      	blx	sl
 80052d6:	3001      	adds	r0, #1
 80052d8:	d09b      	beq.n	8005212 <_printf_i+0x166>
 80052da:	3501      	adds	r5, #1
 80052dc:	68e3      	ldr	r3, [r4, #12]
 80052de:	9903      	ldr	r1, [sp, #12]
 80052e0:	1a5b      	subs	r3, r3, r1
 80052e2:	42ab      	cmp	r3, r5
 80052e4:	dcf2      	bgt.n	80052cc <_printf_i+0x220>
 80052e6:	e7eb      	b.n	80052c0 <_printf_i+0x214>
 80052e8:	2500      	movs	r5, #0
 80052ea:	f104 0619 	add.w	r6, r4, #25
 80052ee:	e7f5      	b.n	80052dc <_printf_i+0x230>
 80052f0:	08009526 	.word	0x08009526
 80052f4:	08009537 	.word	0x08009537

080052f8 <_scanf_float>:
 80052f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	b087      	sub	sp, #28
 80052fe:	9303      	str	r3, [sp, #12]
 8005300:	688b      	ldr	r3, [r1, #8]
 8005302:	4617      	mov	r7, r2
 8005304:	1e5a      	subs	r2, r3, #1
 8005306:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800530a:	bf85      	ittet	hi
 800530c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005310:	195b      	addhi	r3, r3, r5
 8005312:	2300      	movls	r3, #0
 8005314:	9302      	strhi	r3, [sp, #8]
 8005316:	bf88      	it	hi
 8005318:	f240 135d 	movwhi	r3, #349	; 0x15d
 800531c:	468b      	mov	fp, r1
 800531e:	f04f 0500 	mov.w	r5, #0
 8005322:	bf8c      	ite	hi
 8005324:	608b      	strhi	r3, [r1, #8]
 8005326:	9302      	strls	r3, [sp, #8]
 8005328:	680b      	ldr	r3, [r1, #0]
 800532a:	4680      	mov	r8, r0
 800532c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005330:	f84b 3b1c 	str.w	r3, [fp], #28
 8005334:	460c      	mov	r4, r1
 8005336:	465e      	mov	r6, fp
 8005338:	46aa      	mov	sl, r5
 800533a:	46a9      	mov	r9, r5
 800533c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005340:	9501      	str	r5, [sp, #4]
 8005342:	68a2      	ldr	r2, [r4, #8]
 8005344:	b152      	cbz	r2, 800535c <_scanf_float+0x64>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b4e      	cmp	r3, #78	; 0x4e
 800534c:	d864      	bhi.n	8005418 <_scanf_float+0x120>
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d83c      	bhi.n	80053cc <_scanf_float+0xd4>
 8005352:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005356:	b2c8      	uxtb	r0, r1
 8005358:	280e      	cmp	r0, #14
 800535a:	d93a      	bls.n	80053d2 <_scanf_float+0xda>
 800535c:	f1b9 0f00 	cmp.w	r9, #0
 8005360:	d003      	beq.n	800536a <_scanf_float+0x72>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800536e:	f1ba 0f01 	cmp.w	sl, #1
 8005372:	f200 8113 	bhi.w	800559c <_scanf_float+0x2a4>
 8005376:	455e      	cmp	r6, fp
 8005378:	f200 8105 	bhi.w	8005586 <_scanf_float+0x28e>
 800537c:	2501      	movs	r5, #1
 800537e:	4628      	mov	r0, r5
 8005380:	b007      	add	sp, #28
 8005382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005386:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800538a:	2a0d      	cmp	r2, #13
 800538c:	d8e6      	bhi.n	800535c <_scanf_float+0x64>
 800538e:	a101      	add	r1, pc, #4	; (adr r1, 8005394 <_scanf_float+0x9c>)
 8005390:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005394:	080054d3 	.word	0x080054d3
 8005398:	0800535d 	.word	0x0800535d
 800539c:	0800535d 	.word	0x0800535d
 80053a0:	0800535d 	.word	0x0800535d
 80053a4:	08005533 	.word	0x08005533
 80053a8:	0800550b 	.word	0x0800550b
 80053ac:	0800535d 	.word	0x0800535d
 80053b0:	0800535d 	.word	0x0800535d
 80053b4:	080054e1 	.word	0x080054e1
 80053b8:	0800535d 	.word	0x0800535d
 80053bc:	0800535d 	.word	0x0800535d
 80053c0:	0800535d 	.word	0x0800535d
 80053c4:	0800535d 	.word	0x0800535d
 80053c8:	08005499 	.word	0x08005499
 80053cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80053d0:	e7db      	b.n	800538a <_scanf_float+0x92>
 80053d2:	290e      	cmp	r1, #14
 80053d4:	d8c2      	bhi.n	800535c <_scanf_float+0x64>
 80053d6:	a001      	add	r0, pc, #4	; (adr r0, 80053dc <_scanf_float+0xe4>)
 80053d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80053dc:	0800548b 	.word	0x0800548b
 80053e0:	0800535d 	.word	0x0800535d
 80053e4:	0800548b 	.word	0x0800548b
 80053e8:	0800551f 	.word	0x0800551f
 80053ec:	0800535d 	.word	0x0800535d
 80053f0:	08005439 	.word	0x08005439
 80053f4:	08005475 	.word	0x08005475
 80053f8:	08005475 	.word	0x08005475
 80053fc:	08005475 	.word	0x08005475
 8005400:	08005475 	.word	0x08005475
 8005404:	08005475 	.word	0x08005475
 8005408:	08005475 	.word	0x08005475
 800540c:	08005475 	.word	0x08005475
 8005410:	08005475 	.word	0x08005475
 8005414:	08005475 	.word	0x08005475
 8005418:	2b6e      	cmp	r3, #110	; 0x6e
 800541a:	d809      	bhi.n	8005430 <_scanf_float+0x138>
 800541c:	2b60      	cmp	r3, #96	; 0x60
 800541e:	d8b2      	bhi.n	8005386 <_scanf_float+0x8e>
 8005420:	2b54      	cmp	r3, #84	; 0x54
 8005422:	d077      	beq.n	8005514 <_scanf_float+0x21c>
 8005424:	2b59      	cmp	r3, #89	; 0x59
 8005426:	d199      	bne.n	800535c <_scanf_float+0x64>
 8005428:	2d07      	cmp	r5, #7
 800542a:	d197      	bne.n	800535c <_scanf_float+0x64>
 800542c:	2508      	movs	r5, #8
 800542e:	e029      	b.n	8005484 <_scanf_float+0x18c>
 8005430:	2b74      	cmp	r3, #116	; 0x74
 8005432:	d06f      	beq.n	8005514 <_scanf_float+0x21c>
 8005434:	2b79      	cmp	r3, #121	; 0x79
 8005436:	e7f6      	b.n	8005426 <_scanf_float+0x12e>
 8005438:	6821      	ldr	r1, [r4, #0]
 800543a:	05c8      	lsls	r0, r1, #23
 800543c:	d51a      	bpl.n	8005474 <_scanf_float+0x17c>
 800543e:	9b02      	ldr	r3, [sp, #8]
 8005440:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005444:	6021      	str	r1, [r4, #0]
 8005446:	f109 0901 	add.w	r9, r9, #1
 800544a:	b11b      	cbz	r3, 8005454 <_scanf_float+0x15c>
 800544c:	3b01      	subs	r3, #1
 800544e:	3201      	adds	r2, #1
 8005450:	9302      	str	r3, [sp, #8]
 8005452:	60a2      	str	r2, [r4, #8]
 8005454:	68a3      	ldr	r3, [r4, #8]
 8005456:	3b01      	subs	r3, #1
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	3301      	adds	r3, #1
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3b01      	subs	r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	f340 8084 	ble.w	8005574 <_scanf_float+0x27c>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	3301      	adds	r3, #1
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	e766      	b.n	8005342 <_scanf_float+0x4a>
 8005474:	eb1a 0f05 	cmn.w	sl, r5
 8005478:	f47f af70 	bne.w	800535c <_scanf_float+0x64>
 800547c:	6822      	ldr	r2, [r4, #0]
 800547e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	f806 3b01 	strb.w	r3, [r6], #1
 8005488:	e7e4      	b.n	8005454 <_scanf_float+0x15c>
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	0610      	lsls	r0, r2, #24
 800548e:	f57f af65 	bpl.w	800535c <_scanf_float+0x64>
 8005492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005496:	e7f4      	b.n	8005482 <_scanf_float+0x18a>
 8005498:	f1ba 0f00 	cmp.w	sl, #0
 800549c:	d10e      	bne.n	80054bc <_scanf_float+0x1c4>
 800549e:	f1b9 0f00 	cmp.w	r9, #0
 80054a2:	d10e      	bne.n	80054c2 <_scanf_float+0x1ca>
 80054a4:	6822      	ldr	r2, [r4, #0]
 80054a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80054aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80054ae:	d108      	bne.n	80054c2 <_scanf_float+0x1ca>
 80054b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054b4:	f04f 0a01 	mov.w	sl, #1
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	e7e3      	b.n	8005484 <_scanf_float+0x18c>
 80054bc:	f1ba 0f02 	cmp.w	sl, #2
 80054c0:	d055      	beq.n	800556e <_scanf_float+0x276>
 80054c2:	2d01      	cmp	r5, #1
 80054c4:	d002      	beq.n	80054cc <_scanf_float+0x1d4>
 80054c6:	2d04      	cmp	r5, #4
 80054c8:	f47f af48 	bne.w	800535c <_scanf_float+0x64>
 80054cc:	3501      	adds	r5, #1
 80054ce:	b2ed      	uxtb	r5, r5
 80054d0:	e7d8      	b.n	8005484 <_scanf_float+0x18c>
 80054d2:	f1ba 0f01 	cmp.w	sl, #1
 80054d6:	f47f af41 	bne.w	800535c <_scanf_float+0x64>
 80054da:	f04f 0a02 	mov.w	sl, #2
 80054de:	e7d1      	b.n	8005484 <_scanf_float+0x18c>
 80054e0:	b97d      	cbnz	r5, 8005502 <_scanf_float+0x20a>
 80054e2:	f1b9 0f00 	cmp.w	r9, #0
 80054e6:	f47f af3c 	bne.w	8005362 <_scanf_float+0x6a>
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80054f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80054f4:	f47f af39 	bne.w	800536a <_scanf_float+0x72>
 80054f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054fc:	2501      	movs	r5, #1
 80054fe:	6022      	str	r2, [r4, #0]
 8005500:	e7c0      	b.n	8005484 <_scanf_float+0x18c>
 8005502:	2d03      	cmp	r5, #3
 8005504:	d0e2      	beq.n	80054cc <_scanf_float+0x1d4>
 8005506:	2d05      	cmp	r5, #5
 8005508:	e7de      	b.n	80054c8 <_scanf_float+0x1d0>
 800550a:	2d02      	cmp	r5, #2
 800550c:	f47f af26 	bne.w	800535c <_scanf_float+0x64>
 8005510:	2503      	movs	r5, #3
 8005512:	e7b7      	b.n	8005484 <_scanf_float+0x18c>
 8005514:	2d06      	cmp	r5, #6
 8005516:	f47f af21 	bne.w	800535c <_scanf_float+0x64>
 800551a:	2507      	movs	r5, #7
 800551c:	e7b2      	b.n	8005484 <_scanf_float+0x18c>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	0591      	lsls	r1, r2, #22
 8005522:	f57f af1b 	bpl.w	800535c <_scanf_float+0x64>
 8005526:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800552a:	6022      	str	r2, [r4, #0]
 800552c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005530:	e7a8      	b.n	8005484 <_scanf_float+0x18c>
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005538:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800553c:	d006      	beq.n	800554c <_scanf_float+0x254>
 800553e:	0550      	lsls	r0, r2, #21
 8005540:	f57f af0c 	bpl.w	800535c <_scanf_float+0x64>
 8005544:	f1b9 0f00 	cmp.w	r9, #0
 8005548:	f43f af0f 	beq.w	800536a <_scanf_float+0x72>
 800554c:	0591      	lsls	r1, r2, #22
 800554e:	bf58      	it	pl
 8005550:	9901      	ldrpl	r1, [sp, #4]
 8005552:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005556:	bf58      	it	pl
 8005558:	eba9 0101 	subpl.w	r1, r9, r1
 800555c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005560:	f04f 0900 	mov.w	r9, #0
 8005564:	bf58      	it	pl
 8005566:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	e78a      	b.n	8005484 <_scanf_float+0x18c>
 800556e:	f04f 0a03 	mov.w	sl, #3
 8005572:	e787      	b.n	8005484 <_scanf_float+0x18c>
 8005574:	4639      	mov	r1, r7
 8005576:	4640      	mov	r0, r8
 8005578:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800557c:	4798      	blx	r3
 800557e:	2800      	cmp	r0, #0
 8005580:	f43f aedf 	beq.w	8005342 <_scanf_float+0x4a>
 8005584:	e6ea      	b.n	800535c <_scanf_float+0x64>
 8005586:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800558a:	463a      	mov	r2, r7
 800558c:	4640      	mov	r0, r8
 800558e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005592:	4798      	blx	r3
 8005594:	6923      	ldr	r3, [r4, #16]
 8005596:	3b01      	subs	r3, #1
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	e6ec      	b.n	8005376 <_scanf_float+0x7e>
 800559c:	1e6b      	subs	r3, r5, #1
 800559e:	2b06      	cmp	r3, #6
 80055a0:	d825      	bhi.n	80055ee <_scanf_float+0x2f6>
 80055a2:	2d02      	cmp	r5, #2
 80055a4:	d836      	bhi.n	8005614 <_scanf_float+0x31c>
 80055a6:	455e      	cmp	r6, fp
 80055a8:	f67f aee8 	bls.w	800537c <_scanf_float+0x84>
 80055ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055b0:	463a      	mov	r2, r7
 80055b2:	4640      	mov	r0, r8
 80055b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055b8:	4798      	blx	r3
 80055ba:	6923      	ldr	r3, [r4, #16]
 80055bc:	3b01      	subs	r3, #1
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	e7f1      	b.n	80055a6 <_scanf_float+0x2ae>
 80055c2:	9802      	ldr	r0, [sp, #8]
 80055c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80055cc:	463a      	mov	r2, r7
 80055ce:	9002      	str	r0, [sp, #8]
 80055d0:	4640      	mov	r0, r8
 80055d2:	4798      	blx	r3
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	6123      	str	r3, [r4, #16]
 80055da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055de:	fa5f fa8a 	uxtb.w	sl, sl
 80055e2:	f1ba 0f02 	cmp.w	sl, #2
 80055e6:	d1ec      	bne.n	80055c2 <_scanf_float+0x2ca>
 80055e8:	3d03      	subs	r5, #3
 80055ea:	b2ed      	uxtb	r5, r5
 80055ec:	1b76      	subs	r6, r6, r5
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	05da      	lsls	r2, r3, #23
 80055f2:	d52f      	bpl.n	8005654 <_scanf_float+0x35c>
 80055f4:	055b      	lsls	r3, r3, #21
 80055f6:	d510      	bpl.n	800561a <_scanf_float+0x322>
 80055f8:	455e      	cmp	r6, fp
 80055fa:	f67f aebf 	bls.w	800537c <_scanf_float+0x84>
 80055fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005602:	463a      	mov	r2, r7
 8005604:	4640      	mov	r0, r8
 8005606:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800560a:	4798      	blx	r3
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	3b01      	subs	r3, #1
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	e7f1      	b.n	80055f8 <_scanf_float+0x300>
 8005614:	46aa      	mov	sl, r5
 8005616:	9602      	str	r6, [sp, #8]
 8005618:	e7df      	b.n	80055da <_scanf_float+0x2e2>
 800561a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	2965      	cmp	r1, #101	; 0x65
 8005622:	f103 33ff 	add.w	r3, r3, #4294967295
 8005626:	f106 35ff 	add.w	r5, r6, #4294967295
 800562a:	6123      	str	r3, [r4, #16]
 800562c:	d00c      	beq.n	8005648 <_scanf_float+0x350>
 800562e:	2945      	cmp	r1, #69	; 0x45
 8005630:	d00a      	beq.n	8005648 <_scanf_float+0x350>
 8005632:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005636:	463a      	mov	r2, r7
 8005638:	4640      	mov	r0, r8
 800563a:	4798      	blx	r3
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005642:	3b01      	subs	r3, #1
 8005644:	1eb5      	subs	r5, r6, #2
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	463a      	mov	r2, r7
 800564a:	4640      	mov	r0, r8
 800564c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005650:	4798      	blx	r3
 8005652:	462e      	mov	r6, r5
 8005654:	6825      	ldr	r5, [r4, #0]
 8005656:	f015 0510 	ands.w	r5, r5, #16
 800565a:	d155      	bne.n	8005708 <_scanf_float+0x410>
 800565c:	7035      	strb	r5, [r6, #0]
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005668:	d11b      	bne.n	80056a2 <_scanf_float+0x3aa>
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	454b      	cmp	r3, r9
 800566e:	eba3 0209 	sub.w	r2, r3, r9
 8005672:	d123      	bne.n	80056bc <_scanf_float+0x3c4>
 8005674:	2200      	movs	r2, #0
 8005676:	4659      	mov	r1, fp
 8005678:	4640      	mov	r0, r8
 800567a:	f000 fe79 	bl	8006370 <_strtod_r>
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	f012 0f02 	tst.w	r2, #2
 8005686:	4606      	mov	r6, r0
 8005688:	460f      	mov	r7, r1
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	d021      	beq.n	80056d2 <_scanf_float+0x3da>
 800568e:	1d1a      	adds	r2, r3, #4
 8005690:	9903      	ldr	r1, [sp, #12]
 8005692:	600a      	str	r2, [r1, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	e9c3 6700 	strd	r6, r7, [r3]
 800569a:	68e3      	ldr	r3, [r4, #12]
 800569c:	3301      	adds	r3, #1
 800569e:	60e3      	str	r3, [r4, #12]
 80056a0:	e66d      	b.n	800537e <_scanf_float+0x86>
 80056a2:	9b04      	ldr	r3, [sp, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0e5      	beq.n	8005674 <_scanf_float+0x37c>
 80056a8:	9905      	ldr	r1, [sp, #20]
 80056aa:	230a      	movs	r3, #10
 80056ac:	462a      	mov	r2, r5
 80056ae:	4640      	mov	r0, r8
 80056b0:	3101      	adds	r1, #1
 80056b2:	f000 fedf 	bl	8006474 <_strtol_r>
 80056b6:	9b04      	ldr	r3, [sp, #16]
 80056b8:	9e05      	ldr	r6, [sp, #20]
 80056ba:	1ac2      	subs	r2, r0, r3
 80056bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80056c0:	429e      	cmp	r6, r3
 80056c2:	bf28      	it	cs
 80056c4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80056c8:	4630      	mov	r0, r6
 80056ca:	4910      	ldr	r1, [pc, #64]	; (800570c <_scanf_float+0x414>)
 80056cc:	f000 f826 	bl	800571c <siprintf>
 80056d0:	e7d0      	b.n	8005674 <_scanf_float+0x37c>
 80056d2:	f012 0f04 	tst.w	r2, #4
 80056d6:	f103 0204 	add.w	r2, r3, #4
 80056da:	d1d9      	bne.n	8005690 <_scanf_float+0x398>
 80056dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80056e0:	f8cc 2000 	str.w	r2, [ip]
 80056e4:	f8d3 8000 	ldr.w	r8, [r3]
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	f7fb f98e 	bl	8000a0c <__aeabi_dcmpun>
 80056f0:	b128      	cbz	r0, 80056fe <_scanf_float+0x406>
 80056f2:	4807      	ldr	r0, [pc, #28]	; (8005710 <_scanf_float+0x418>)
 80056f4:	f000 f80e 	bl	8005714 <nanf>
 80056f8:	f8c8 0000 	str.w	r0, [r8]
 80056fc:	e7cd      	b.n	800569a <_scanf_float+0x3a2>
 80056fe:	4630      	mov	r0, r6
 8005700:	4639      	mov	r1, r7
 8005702:	f7fb f9e1 	bl	8000ac8 <__aeabi_d2f>
 8005706:	e7f7      	b.n	80056f8 <_scanf_float+0x400>
 8005708:	2500      	movs	r5, #0
 800570a:	e638      	b.n	800537e <_scanf_float+0x86>
 800570c:	08009548 	.word	0x08009548
 8005710:	08009950 	.word	0x08009950

08005714 <nanf>:
 8005714:	4800      	ldr	r0, [pc, #0]	; (8005718 <nanf+0x4>)
 8005716:	4770      	bx	lr
 8005718:	7fc00000 	.word	0x7fc00000

0800571c <siprintf>:
 800571c:	b40e      	push	{r1, r2, r3}
 800571e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005722:	b500      	push	{lr}
 8005724:	b09c      	sub	sp, #112	; 0x70
 8005726:	ab1d      	add	r3, sp, #116	; 0x74
 8005728:	9002      	str	r0, [sp, #8]
 800572a:	9006      	str	r0, [sp, #24]
 800572c:	9107      	str	r1, [sp, #28]
 800572e:	9104      	str	r1, [sp, #16]
 8005730:	4808      	ldr	r0, [pc, #32]	; (8005754 <siprintf+0x38>)
 8005732:	4909      	ldr	r1, [pc, #36]	; (8005758 <siprintf+0x3c>)
 8005734:	f853 2b04 	ldr.w	r2, [r3], #4
 8005738:	9105      	str	r1, [sp, #20]
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	a902      	add	r1, sp, #8
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	f002 feb8 	bl	80084b4 <_svfiprintf_r>
 8005744:	2200      	movs	r2, #0
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	b01c      	add	sp, #112	; 0x70
 800574c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005750:	b003      	add	sp, #12
 8005752:	4770      	bx	lr
 8005754:	2000000c 	.word	0x2000000c
 8005758:	ffff0208 	.word	0xffff0208

0800575c <sulp>:
 800575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005760:	460f      	mov	r7, r1
 8005762:	4690      	mov	r8, r2
 8005764:	f002 fc12 	bl	8007f8c <__ulp>
 8005768:	4604      	mov	r4, r0
 800576a:	460d      	mov	r5, r1
 800576c:	f1b8 0f00 	cmp.w	r8, #0
 8005770:	d011      	beq.n	8005796 <sulp+0x3a>
 8005772:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005776:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800577a:	2b00      	cmp	r3, #0
 800577c:	dd0b      	ble.n	8005796 <sulp+0x3a>
 800577e:	2400      	movs	r4, #0
 8005780:	051b      	lsls	r3, r3, #20
 8005782:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005786:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800578a:	4622      	mov	r2, r4
 800578c:	462b      	mov	r3, r5
 800578e:	f7fa fea3 	bl	80004d8 <__aeabi_dmul>
 8005792:	4604      	mov	r4, r0
 8005794:	460d      	mov	r5, r1
 8005796:	4620      	mov	r0, r4
 8005798:	4629      	mov	r1, r5
 800579a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080057a0 <_strtod_l>:
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	469b      	mov	fp, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	b09f      	sub	sp, #124	; 0x7c
 80057aa:	931a      	str	r3, [sp, #104]	; 0x68
 80057ac:	4b9e      	ldr	r3, [pc, #632]	; (8005a28 <_strtod_l+0x288>)
 80057ae:	4682      	mov	sl, r0
 80057b0:	681f      	ldr	r7, [r3, #0]
 80057b2:	460e      	mov	r6, r1
 80057b4:	4638      	mov	r0, r7
 80057b6:	9215      	str	r2, [sp, #84]	; 0x54
 80057b8:	f7fa fcca 	bl	8000150 <strlen>
 80057bc:	f04f 0800 	mov.w	r8, #0
 80057c0:	4604      	mov	r4, r0
 80057c2:	f04f 0900 	mov.w	r9, #0
 80057c6:	9619      	str	r6, [sp, #100]	; 0x64
 80057c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057ca:	781a      	ldrb	r2, [r3, #0]
 80057cc:	2a2b      	cmp	r2, #43	; 0x2b
 80057ce:	d04c      	beq.n	800586a <_strtod_l+0xca>
 80057d0:	d83a      	bhi.n	8005848 <_strtod_l+0xa8>
 80057d2:	2a0d      	cmp	r2, #13
 80057d4:	d833      	bhi.n	800583e <_strtod_l+0x9e>
 80057d6:	2a08      	cmp	r2, #8
 80057d8:	d833      	bhi.n	8005842 <_strtod_l+0xa2>
 80057da:	2a00      	cmp	r2, #0
 80057dc:	d03d      	beq.n	800585a <_strtod_l+0xba>
 80057de:	2300      	movs	r3, #0
 80057e0:	930a      	str	r3, [sp, #40]	; 0x28
 80057e2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80057e4:	782b      	ldrb	r3, [r5, #0]
 80057e6:	2b30      	cmp	r3, #48	; 0x30
 80057e8:	f040 80aa 	bne.w	8005940 <_strtod_l+0x1a0>
 80057ec:	786b      	ldrb	r3, [r5, #1]
 80057ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80057f2:	2b58      	cmp	r3, #88	; 0x58
 80057f4:	d166      	bne.n	80058c4 <_strtod_l+0x124>
 80057f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f8:	4650      	mov	r0, sl
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	ab1a      	add	r3, sp, #104	; 0x68
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	4a8a      	ldr	r2, [pc, #552]	; (8005a2c <_strtod_l+0x28c>)
 8005802:	f8cd b008 	str.w	fp, [sp, #8]
 8005806:	ab1b      	add	r3, sp, #108	; 0x6c
 8005808:	a919      	add	r1, sp, #100	; 0x64
 800580a:	f001 fd17 	bl	800723c <__gethex>
 800580e:	f010 0607 	ands.w	r6, r0, #7
 8005812:	4604      	mov	r4, r0
 8005814:	d005      	beq.n	8005822 <_strtod_l+0x82>
 8005816:	2e06      	cmp	r6, #6
 8005818:	d129      	bne.n	800586e <_strtod_l+0xce>
 800581a:	2300      	movs	r3, #0
 800581c:	3501      	adds	r5, #1
 800581e:	9519      	str	r5, [sp, #100]	; 0x64
 8005820:	930a      	str	r3, [sp, #40]	; 0x28
 8005822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	f040 858a 	bne.w	800633e <_strtod_l+0xb9e>
 800582a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582c:	b1d3      	cbz	r3, 8005864 <_strtod_l+0xc4>
 800582e:	4642      	mov	r2, r8
 8005830:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	b01f      	add	sp, #124	; 0x7c
 800583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583e:	2a20      	cmp	r2, #32
 8005840:	d1cd      	bne.n	80057de <_strtod_l+0x3e>
 8005842:	3301      	adds	r3, #1
 8005844:	9319      	str	r3, [sp, #100]	; 0x64
 8005846:	e7bf      	b.n	80057c8 <_strtod_l+0x28>
 8005848:	2a2d      	cmp	r2, #45	; 0x2d
 800584a:	d1c8      	bne.n	80057de <_strtod_l+0x3e>
 800584c:	2201      	movs	r2, #1
 800584e:	920a      	str	r2, [sp, #40]	; 0x28
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	9219      	str	r2, [sp, #100]	; 0x64
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1c3      	bne.n	80057e2 <_strtod_l+0x42>
 800585a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800585c:	9619      	str	r6, [sp, #100]	; 0x64
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 856b 	bne.w	800633a <_strtod_l+0xb9a>
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	e7e4      	b.n	8005834 <_strtod_l+0x94>
 800586a:	2200      	movs	r2, #0
 800586c:	e7ef      	b.n	800584e <_strtod_l+0xae>
 800586e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005870:	b13a      	cbz	r2, 8005882 <_strtod_l+0xe2>
 8005872:	2135      	movs	r1, #53	; 0x35
 8005874:	a81c      	add	r0, sp, #112	; 0x70
 8005876:	f002 fc8d 	bl	8008194 <__copybits>
 800587a:	4650      	mov	r0, sl
 800587c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800587e:	f002 f855 	bl	800792c <_Bfree>
 8005882:	3e01      	subs	r6, #1
 8005884:	2e04      	cmp	r6, #4
 8005886:	d806      	bhi.n	8005896 <_strtod_l+0xf6>
 8005888:	e8df f006 	tbb	[pc, r6]
 800588c:	1714030a 	.word	0x1714030a
 8005890:	0a          	.byte	0x0a
 8005891:	00          	.byte	0x00
 8005892:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005896:	0721      	lsls	r1, r4, #28
 8005898:	d5c3      	bpl.n	8005822 <_strtod_l+0x82>
 800589a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800589e:	e7c0      	b.n	8005822 <_strtod_l+0x82>
 80058a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80058a2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80058a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80058aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80058ae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80058b2:	e7f0      	b.n	8005896 <_strtod_l+0xf6>
 80058b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005a30 <_strtod_l+0x290>
 80058b8:	e7ed      	b.n	8005896 <_strtod_l+0xf6>
 80058ba:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80058be:	f04f 38ff 	mov.w	r8, #4294967295
 80058c2:	e7e8      	b.n	8005896 <_strtod_l+0xf6>
 80058c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	9219      	str	r2, [sp, #100]	; 0x64
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b30      	cmp	r3, #48	; 0x30
 80058ce:	d0f9      	beq.n	80058c4 <_strtod_l+0x124>
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0a6      	beq.n	8005822 <_strtod_l+0x82>
 80058d4:	2301      	movs	r3, #1
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80058da:	220a      	movs	r2, #10
 80058dc:	9308      	str	r3, [sp, #32]
 80058de:	2300      	movs	r3, #0
 80058e0:	469b      	mov	fp, r3
 80058e2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80058e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80058e8:	7805      	ldrb	r5, [r0, #0]
 80058ea:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80058ee:	b2d9      	uxtb	r1, r3
 80058f0:	2909      	cmp	r1, #9
 80058f2:	d927      	bls.n	8005944 <_strtod_l+0x1a4>
 80058f4:	4622      	mov	r2, r4
 80058f6:	4639      	mov	r1, r7
 80058f8:	f002 fef2 	bl	80086e0 <strncmp>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d033      	beq.n	8005968 <_strtod_l+0x1c8>
 8005900:	2000      	movs	r0, #0
 8005902:	462a      	mov	r2, r5
 8005904:	465c      	mov	r4, fp
 8005906:	4603      	mov	r3, r0
 8005908:	9004      	str	r0, [sp, #16]
 800590a:	2a65      	cmp	r2, #101	; 0x65
 800590c:	d001      	beq.n	8005912 <_strtod_l+0x172>
 800590e:	2a45      	cmp	r2, #69	; 0x45
 8005910:	d114      	bne.n	800593c <_strtod_l+0x19c>
 8005912:	b91c      	cbnz	r4, 800591c <_strtod_l+0x17c>
 8005914:	9a07      	ldr	r2, [sp, #28]
 8005916:	4302      	orrs	r2, r0
 8005918:	d09f      	beq.n	800585a <_strtod_l+0xba>
 800591a:	2400      	movs	r4, #0
 800591c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800591e:	1c72      	adds	r2, r6, #1
 8005920:	9219      	str	r2, [sp, #100]	; 0x64
 8005922:	7872      	ldrb	r2, [r6, #1]
 8005924:	2a2b      	cmp	r2, #43	; 0x2b
 8005926:	d079      	beq.n	8005a1c <_strtod_l+0x27c>
 8005928:	2a2d      	cmp	r2, #45	; 0x2d
 800592a:	f000 8083 	beq.w	8005a34 <_strtod_l+0x294>
 800592e:	2700      	movs	r7, #0
 8005930:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005934:	2909      	cmp	r1, #9
 8005936:	f240 8083 	bls.w	8005a40 <_strtod_l+0x2a0>
 800593a:	9619      	str	r6, [sp, #100]	; 0x64
 800593c:	2500      	movs	r5, #0
 800593e:	e09f      	b.n	8005a80 <_strtod_l+0x2e0>
 8005940:	2300      	movs	r3, #0
 8005942:	e7c8      	b.n	80058d6 <_strtod_l+0x136>
 8005944:	f1bb 0f08 	cmp.w	fp, #8
 8005948:	bfd5      	itete	le
 800594a:	9906      	ldrle	r1, [sp, #24]
 800594c:	9905      	ldrgt	r1, [sp, #20]
 800594e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005952:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005956:	f100 0001 	add.w	r0, r0, #1
 800595a:	bfd4      	ite	le
 800595c:	9306      	strle	r3, [sp, #24]
 800595e:	9305      	strgt	r3, [sp, #20]
 8005960:	f10b 0b01 	add.w	fp, fp, #1
 8005964:	9019      	str	r0, [sp, #100]	; 0x64
 8005966:	e7be      	b.n	80058e6 <_strtod_l+0x146>
 8005968:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800596a:	191a      	adds	r2, r3, r4
 800596c:	9219      	str	r2, [sp, #100]	; 0x64
 800596e:	5d1a      	ldrb	r2, [r3, r4]
 8005970:	f1bb 0f00 	cmp.w	fp, #0
 8005974:	d036      	beq.n	80059e4 <_strtod_l+0x244>
 8005976:	465c      	mov	r4, fp
 8005978:	9004      	str	r0, [sp, #16]
 800597a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800597e:	2b09      	cmp	r3, #9
 8005980:	d912      	bls.n	80059a8 <_strtod_l+0x208>
 8005982:	2301      	movs	r3, #1
 8005984:	e7c1      	b.n	800590a <_strtod_l+0x16a>
 8005986:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005988:	3001      	adds	r0, #1
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	9219      	str	r2, [sp, #100]	; 0x64
 800598e:	785a      	ldrb	r2, [r3, #1]
 8005990:	2a30      	cmp	r2, #48	; 0x30
 8005992:	d0f8      	beq.n	8005986 <_strtod_l+0x1e6>
 8005994:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005998:	2b08      	cmp	r3, #8
 800599a:	f200 84d5 	bhi.w	8006348 <_strtod_l+0xba8>
 800599e:	9004      	str	r0, [sp, #16]
 80059a0:	2000      	movs	r0, #0
 80059a2:	4604      	mov	r4, r0
 80059a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059a6:	9308      	str	r3, [sp, #32]
 80059a8:	3a30      	subs	r2, #48	; 0x30
 80059aa:	f100 0301 	add.w	r3, r0, #1
 80059ae:	d013      	beq.n	80059d8 <_strtod_l+0x238>
 80059b0:	9904      	ldr	r1, [sp, #16]
 80059b2:	1905      	adds	r5, r0, r4
 80059b4:	4419      	add	r1, r3
 80059b6:	9104      	str	r1, [sp, #16]
 80059b8:	4623      	mov	r3, r4
 80059ba:	210a      	movs	r1, #10
 80059bc:	42ab      	cmp	r3, r5
 80059be:	d113      	bne.n	80059e8 <_strtod_l+0x248>
 80059c0:	1823      	adds	r3, r4, r0
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	f104 0401 	add.w	r4, r4, #1
 80059c8:	4404      	add	r4, r0
 80059ca:	dc1b      	bgt.n	8005a04 <_strtod_l+0x264>
 80059cc:	230a      	movs	r3, #10
 80059ce:	9906      	ldr	r1, [sp, #24]
 80059d0:	fb03 2301 	mla	r3, r3, r1, r2
 80059d4:	9306      	str	r3, [sp, #24]
 80059d6:	2300      	movs	r3, #0
 80059d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80059da:	4618      	mov	r0, r3
 80059dc:	1c51      	adds	r1, r2, #1
 80059de:	9119      	str	r1, [sp, #100]	; 0x64
 80059e0:	7852      	ldrb	r2, [r2, #1]
 80059e2:	e7ca      	b.n	800597a <_strtod_l+0x1da>
 80059e4:	4658      	mov	r0, fp
 80059e6:	e7d3      	b.n	8005990 <_strtod_l+0x1f0>
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	dc04      	bgt.n	80059f6 <_strtod_l+0x256>
 80059ec:	9f06      	ldr	r7, [sp, #24]
 80059ee:	434f      	muls	r7, r1
 80059f0:	9706      	str	r7, [sp, #24]
 80059f2:	3301      	adds	r3, #1
 80059f4:	e7e2      	b.n	80059bc <_strtod_l+0x21c>
 80059f6:	1c5f      	adds	r7, r3, #1
 80059f8:	2f10      	cmp	r7, #16
 80059fa:	bfde      	ittt	le
 80059fc:	9f05      	ldrle	r7, [sp, #20]
 80059fe:	434f      	mulle	r7, r1
 8005a00:	9705      	strle	r7, [sp, #20]
 8005a02:	e7f6      	b.n	80059f2 <_strtod_l+0x252>
 8005a04:	2c10      	cmp	r4, #16
 8005a06:	bfdf      	itttt	le
 8005a08:	230a      	movle	r3, #10
 8005a0a:	9905      	ldrle	r1, [sp, #20]
 8005a0c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005a10:	9305      	strle	r3, [sp, #20]
 8005a12:	e7e0      	b.n	80059d6 <_strtod_l+0x236>
 8005a14:	2300      	movs	r3, #0
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e77b      	b.n	8005914 <_strtod_l+0x174>
 8005a1c:	2700      	movs	r7, #0
 8005a1e:	1cb2      	adds	r2, r6, #2
 8005a20:	9219      	str	r2, [sp, #100]	; 0x64
 8005a22:	78b2      	ldrb	r2, [r6, #2]
 8005a24:	e784      	b.n	8005930 <_strtod_l+0x190>
 8005a26:	bf00      	nop
 8005a28:	08009798 	.word	0x08009798
 8005a2c:	08009550 	.word	0x08009550
 8005a30:	7ff00000 	.word	0x7ff00000
 8005a34:	2701      	movs	r7, #1
 8005a36:	e7f2      	b.n	8005a1e <_strtod_l+0x27e>
 8005a38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a3a:	1c51      	adds	r1, r2, #1
 8005a3c:	9119      	str	r1, [sp, #100]	; 0x64
 8005a3e:	7852      	ldrb	r2, [r2, #1]
 8005a40:	2a30      	cmp	r2, #48	; 0x30
 8005a42:	d0f9      	beq.n	8005a38 <_strtod_l+0x298>
 8005a44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005a48:	2908      	cmp	r1, #8
 8005a4a:	f63f af77 	bhi.w	800593c <_strtod_l+0x19c>
 8005a4e:	f04f 0e0a 	mov.w	lr, #10
 8005a52:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005a56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a58:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a5c:	1c51      	adds	r1, r2, #1
 8005a5e:	9119      	str	r1, [sp, #100]	; 0x64
 8005a60:	7852      	ldrb	r2, [r2, #1]
 8005a62:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005a66:	2d09      	cmp	r5, #9
 8005a68:	d935      	bls.n	8005ad6 <_strtod_l+0x336>
 8005a6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a6c:	1b49      	subs	r1, r1, r5
 8005a6e:	2908      	cmp	r1, #8
 8005a70:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005a74:	dc02      	bgt.n	8005a7c <_strtod_l+0x2dc>
 8005a76:	4565      	cmp	r5, ip
 8005a78:	bfa8      	it	ge
 8005a7a:	4665      	movge	r5, ip
 8005a7c:	b107      	cbz	r7, 8005a80 <_strtod_l+0x2e0>
 8005a7e:	426d      	negs	r5, r5
 8005a80:	2c00      	cmp	r4, #0
 8005a82:	d14c      	bne.n	8005b1e <_strtod_l+0x37e>
 8005a84:	9907      	ldr	r1, [sp, #28]
 8005a86:	4301      	orrs	r1, r0
 8005a88:	f47f aecb 	bne.w	8005822 <_strtod_l+0x82>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f47f aee4 	bne.w	800585a <_strtod_l+0xba>
 8005a92:	2a69      	cmp	r2, #105	; 0x69
 8005a94:	d026      	beq.n	8005ae4 <_strtod_l+0x344>
 8005a96:	dc23      	bgt.n	8005ae0 <_strtod_l+0x340>
 8005a98:	2a49      	cmp	r2, #73	; 0x49
 8005a9a:	d023      	beq.n	8005ae4 <_strtod_l+0x344>
 8005a9c:	2a4e      	cmp	r2, #78	; 0x4e
 8005a9e:	f47f aedc 	bne.w	800585a <_strtod_l+0xba>
 8005aa2:	499d      	ldr	r1, [pc, #628]	; (8005d18 <_strtod_l+0x578>)
 8005aa4:	a819      	add	r0, sp, #100	; 0x64
 8005aa6:	f001 fe17 	bl	80076d8 <__match>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	f43f aed5 	beq.w	800585a <_strtod_l+0xba>
 8005ab0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b28      	cmp	r3, #40	; 0x28
 8005ab6:	d12c      	bne.n	8005b12 <_strtod_l+0x372>
 8005ab8:	4998      	ldr	r1, [pc, #608]	; (8005d1c <_strtod_l+0x57c>)
 8005aba:	aa1c      	add	r2, sp, #112	; 0x70
 8005abc:	a819      	add	r0, sp, #100	; 0x64
 8005abe:	f001 fe1f 	bl	8007700 <__hexnan>
 8005ac2:	2805      	cmp	r0, #5
 8005ac4:	d125      	bne.n	8005b12 <_strtod_l+0x372>
 8005ac6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ac8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005acc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005ad0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005ad4:	e6a5      	b.n	8005822 <_strtod_l+0x82>
 8005ad6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005ada:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005ade:	e7bc      	b.n	8005a5a <_strtod_l+0x2ba>
 8005ae0:	2a6e      	cmp	r2, #110	; 0x6e
 8005ae2:	e7dc      	b.n	8005a9e <_strtod_l+0x2fe>
 8005ae4:	498e      	ldr	r1, [pc, #568]	; (8005d20 <_strtod_l+0x580>)
 8005ae6:	a819      	add	r0, sp, #100	; 0x64
 8005ae8:	f001 fdf6 	bl	80076d8 <__match>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f43f aeb4 	beq.w	800585a <_strtod_l+0xba>
 8005af2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005af4:	498b      	ldr	r1, [pc, #556]	; (8005d24 <_strtod_l+0x584>)
 8005af6:	3b01      	subs	r3, #1
 8005af8:	a819      	add	r0, sp, #100	; 0x64
 8005afa:	9319      	str	r3, [sp, #100]	; 0x64
 8005afc:	f001 fdec 	bl	80076d8 <__match>
 8005b00:	b910      	cbnz	r0, 8005b08 <_strtod_l+0x368>
 8005b02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b04:	3301      	adds	r3, #1
 8005b06:	9319      	str	r3, [sp, #100]	; 0x64
 8005b08:	f04f 0800 	mov.w	r8, #0
 8005b0c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005d28 <_strtod_l+0x588>
 8005b10:	e687      	b.n	8005822 <_strtod_l+0x82>
 8005b12:	4886      	ldr	r0, [pc, #536]	; (8005d2c <_strtod_l+0x58c>)
 8005b14:	f002 fdce 	bl	80086b4 <nan>
 8005b18:	4680      	mov	r8, r0
 8005b1a:	4689      	mov	r9, r1
 8005b1c:	e681      	b.n	8005822 <_strtod_l+0x82>
 8005b1e:	9b04      	ldr	r3, [sp, #16]
 8005b20:	f1bb 0f00 	cmp.w	fp, #0
 8005b24:	bf08      	it	eq
 8005b26:	46a3      	moveq	fp, r4
 8005b28:	1aeb      	subs	r3, r5, r3
 8005b2a:	2c10      	cmp	r4, #16
 8005b2c:	9806      	ldr	r0, [sp, #24]
 8005b2e:	4626      	mov	r6, r4
 8005b30:	9307      	str	r3, [sp, #28]
 8005b32:	bfa8      	it	ge
 8005b34:	2610      	movge	r6, #16
 8005b36:	f7fa fc55 	bl	80003e4 <__aeabi_ui2d>
 8005b3a:	2c09      	cmp	r4, #9
 8005b3c:	4680      	mov	r8, r0
 8005b3e:	4689      	mov	r9, r1
 8005b40:	dd13      	ble.n	8005b6a <_strtod_l+0x3ca>
 8005b42:	4b7b      	ldr	r3, [pc, #492]	; (8005d30 <_strtod_l+0x590>)
 8005b44:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b48:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005b4c:	f7fa fcc4 	bl	80004d8 <__aeabi_dmul>
 8005b50:	4680      	mov	r8, r0
 8005b52:	9805      	ldr	r0, [sp, #20]
 8005b54:	4689      	mov	r9, r1
 8005b56:	f7fa fc45 	bl	80003e4 <__aeabi_ui2d>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4640      	mov	r0, r8
 8005b60:	4649      	mov	r1, r9
 8005b62:	f7fa fb03 	bl	800016c <__adddf3>
 8005b66:	4680      	mov	r8, r0
 8005b68:	4689      	mov	r9, r1
 8005b6a:	2c0f      	cmp	r4, #15
 8005b6c:	dc36      	bgt.n	8005bdc <_strtod_l+0x43c>
 8005b6e:	9b07      	ldr	r3, [sp, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f43f ae56 	beq.w	8005822 <_strtod_l+0x82>
 8005b76:	dd22      	ble.n	8005bbe <_strtod_l+0x41e>
 8005b78:	2b16      	cmp	r3, #22
 8005b7a:	dc09      	bgt.n	8005b90 <_strtod_l+0x3f0>
 8005b7c:	496c      	ldr	r1, [pc, #432]	; (8005d30 <_strtod_l+0x590>)
 8005b7e:	4642      	mov	r2, r8
 8005b80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b84:	464b      	mov	r3, r9
 8005b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b8a:	f7fa fca5 	bl	80004d8 <__aeabi_dmul>
 8005b8e:	e7c3      	b.n	8005b18 <_strtod_l+0x378>
 8005b90:	9a07      	ldr	r2, [sp, #28]
 8005b92:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005b96:	4293      	cmp	r3, r2
 8005b98:	db20      	blt.n	8005bdc <_strtod_l+0x43c>
 8005b9a:	4d65      	ldr	r5, [pc, #404]	; (8005d30 <_strtod_l+0x590>)
 8005b9c:	f1c4 040f 	rsb	r4, r4, #15
 8005ba0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005baa:	464b      	mov	r3, r9
 8005bac:	f7fa fc94 	bl	80004d8 <__aeabi_dmul>
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	1b1c      	subs	r4, r3, r4
 8005bb4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005bb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bbc:	e7e5      	b.n	8005b8a <_strtod_l+0x3ea>
 8005bbe:	9b07      	ldr	r3, [sp, #28]
 8005bc0:	3316      	adds	r3, #22
 8005bc2:	db0b      	blt.n	8005bdc <_strtod_l+0x43c>
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	1b5d      	subs	r5, r3, r5
 8005bca:	4b59      	ldr	r3, [pc, #356]	; (8005d30 <_strtod_l+0x590>)
 8005bcc:	4649      	mov	r1, r9
 8005bce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bd6:	f7fa fda9 	bl	800072c <__aeabi_ddiv>
 8005bda:	e79d      	b.n	8005b18 <_strtod_l+0x378>
 8005bdc:	9b07      	ldr	r3, [sp, #28]
 8005bde:	1ba6      	subs	r6, r4, r6
 8005be0:	441e      	add	r6, r3
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	dd74      	ble.n	8005cd0 <_strtod_l+0x530>
 8005be6:	f016 030f 	ands.w	r3, r6, #15
 8005bea:	d00a      	beq.n	8005c02 <_strtod_l+0x462>
 8005bec:	4950      	ldr	r1, [pc, #320]	; (8005d30 <_strtod_l+0x590>)
 8005bee:	4642      	mov	r2, r8
 8005bf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	f7fa fc6d 	bl	80004d8 <__aeabi_dmul>
 8005bfe:	4680      	mov	r8, r0
 8005c00:	4689      	mov	r9, r1
 8005c02:	f036 060f 	bics.w	r6, r6, #15
 8005c06:	d052      	beq.n	8005cae <_strtod_l+0x50e>
 8005c08:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005c0c:	dd27      	ble.n	8005c5e <_strtod_l+0x4be>
 8005c0e:	f04f 0b00 	mov.w	fp, #0
 8005c12:	f8cd b010 	str.w	fp, [sp, #16]
 8005c16:	f8cd b020 	str.w	fp, [sp, #32]
 8005c1a:	f8cd b018 	str.w	fp, [sp, #24]
 8005c1e:	2322      	movs	r3, #34	; 0x22
 8005c20:	f04f 0800 	mov.w	r8, #0
 8005c24:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005d28 <_strtod_l+0x588>
 8005c28:	f8ca 3000 	str.w	r3, [sl]
 8005c2c:	9b08      	ldr	r3, [sp, #32]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f43f adf7 	beq.w	8005822 <_strtod_l+0x82>
 8005c34:	4650      	mov	r0, sl
 8005c36:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c38:	f001 fe78 	bl	800792c <_Bfree>
 8005c3c:	4650      	mov	r0, sl
 8005c3e:	9906      	ldr	r1, [sp, #24]
 8005c40:	f001 fe74 	bl	800792c <_Bfree>
 8005c44:	4650      	mov	r0, sl
 8005c46:	9904      	ldr	r1, [sp, #16]
 8005c48:	f001 fe70 	bl	800792c <_Bfree>
 8005c4c:	4650      	mov	r0, sl
 8005c4e:	9908      	ldr	r1, [sp, #32]
 8005c50:	f001 fe6c 	bl	800792c <_Bfree>
 8005c54:	4659      	mov	r1, fp
 8005c56:	4650      	mov	r0, sl
 8005c58:	f001 fe68 	bl	800792c <_Bfree>
 8005c5c:	e5e1      	b.n	8005822 <_strtod_l+0x82>
 8005c5e:	4b35      	ldr	r3, [pc, #212]	; (8005d34 <_strtod_l+0x594>)
 8005c60:	4640      	mov	r0, r8
 8005c62:	9305      	str	r3, [sp, #20]
 8005c64:	2300      	movs	r3, #0
 8005c66:	4649      	mov	r1, r9
 8005c68:	461f      	mov	r7, r3
 8005c6a:	1136      	asrs	r6, r6, #4
 8005c6c:	2e01      	cmp	r6, #1
 8005c6e:	dc21      	bgt.n	8005cb4 <_strtod_l+0x514>
 8005c70:	b10b      	cbz	r3, 8005c76 <_strtod_l+0x4d6>
 8005c72:	4680      	mov	r8, r0
 8005c74:	4689      	mov	r9, r1
 8005c76:	4b2f      	ldr	r3, [pc, #188]	; (8005d34 <_strtod_l+0x594>)
 8005c78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005c7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005c80:	4642      	mov	r2, r8
 8005c82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c86:	464b      	mov	r3, r9
 8005c88:	f7fa fc26 	bl	80004d8 <__aeabi_dmul>
 8005c8c:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <_strtod_l+0x588>)
 8005c8e:	460a      	mov	r2, r1
 8005c90:	400b      	ands	r3, r1
 8005c92:	4929      	ldr	r1, [pc, #164]	; (8005d38 <_strtod_l+0x598>)
 8005c94:	4680      	mov	r8, r0
 8005c96:	428b      	cmp	r3, r1
 8005c98:	d8b9      	bhi.n	8005c0e <_strtod_l+0x46e>
 8005c9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c9e:	428b      	cmp	r3, r1
 8005ca0:	bf86      	itte	hi
 8005ca2:	f04f 38ff 	movhi.w	r8, #4294967295
 8005ca6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005d3c <_strtod_l+0x59c>
 8005caa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9305      	str	r3, [sp, #20]
 8005cb2:	e07f      	b.n	8005db4 <_strtod_l+0x614>
 8005cb4:	07f2      	lsls	r2, r6, #31
 8005cb6:	d505      	bpl.n	8005cc4 <_strtod_l+0x524>
 8005cb8:	9b05      	ldr	r3, [sp, #20]
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	f7fa fc0b 	bl	80004d8 <__aeabi_dmul>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	9a05      	ldr	r2, [sp, #20]
 8005cc6:	3701      	adds	r7, #1
 8005cc8:	3208      	adds	r2, #8
 8005cca:	1076      	asrs	r6, r6, #1
 8005ccc:	9205      	str	r2, [sp, #20]
 8005cce:	e7cd      	b.n	8005c6c <_strtod_l+0x4cc>
 8005cd0:	d0ed      	beq.n	8005cae <_strtod_l+0x50e>
 8005cd2:	4276      	negs	r6, r6
 8005cd4:	f016 020f 	ands.w	r2, r6, #15
 8005cd8:	d00a      	beq.n	8005cf0 <_strtod_l+0x550>
 8005cda:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <_strtod_l+0x590>)
 8005cdc:	4640      	mov	r0, r8
 8005cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f7fa fd20 	bl	800072c <__aeabi_ddiv>
 8005cec:	4680      	mov	r8, r0
 8005cee:	4689      	mov	r9, r1
 8005cf0:	1136      	asrs	r6, r6, #4
 8005cf2:	d0dc      	beq.n	8005cae <_strtod_l+0x50e>
 8005cf4:	2e1f      	cmp	r6, #31
 8005cf6:	dd23      	ble.n	8005d40 <_strtod_l+0x5a0>
 8005cf8:	f04f 0b00 	mov.w	fp, #0
 8005cfc:	f8cd b010 	str.w	fp, [sp, #16]
 8005d00:	f8cd b020 	str.w	fp, [sp, #32]
 8005d04:	f8cd b018 	str.w	fp, [sp, #24]
 8005d08:	2322      	movs	r3, #34	; 0x22
 8005d0a:	f04f 0800 	mov.w	r8, #0
 8005d0e:	f04f 0900 	mov.w	r9, #0
 8005d12:	f8ca 3000 	str.w	r3, [sl]
 8005d16:	e789      	b.n	8005c2c <_strtod_l+0x48c>
 8005d18:	08009521 	.word	0x08009521
 8005d1c:	08009564 	.word	0x08009564
 8005d20:	08009519 	.word	0x08009519
 8005d24:	080096a4 	.word	0x080096a4
 8005d28:	7ff00000 	.word	0x7ff00000
 8005d2c:	08009950 	.word	0x08009950
 8005d30:	08009830 	.word	0x08009830
 8005d34:	08009808 	.word	0x08009808
 8005d38:	7ca00000 	.word	0x7ca00000
 8005d3c:	7fefffff 	.word	0x7fefffff
 8005d40:	f016 0310 	ands.w	r3, r6, #16
 8005d44:	bf18      	it	ne
 8005d46:	236a      	movne	r3, #106	; 0x6a
 8005d48:	4640      	mov	r0, r8
 8005d4a:	9305      	str	r3, [sp, #20]
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	2300      	movs	r3, #0
 8005d50:	4fb0      	ldr	r7, [pc, #704]	; (8006014 <_strtod_l+0x874>)
 8005d52:	07f2      	lsls	r2, r6, #31
 8005d54:	d504      	bpl.n	8005d60 <_strtod_l+0x5c0>
 8005d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5a:	f7fa fbbd 	bl	80004d8 <__aeabi_dmul>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	1076      	asrs	r6, r6, #1
 8005d62:	f107 0708 	add.w	r7, r7, #8
 8005d66:	d1f4      	bne.n	8005d52 <_strtod_l+0x5b2>
 8005d68:	b10b      	cbz	r3, 8005d6e <_strtod_l+0x5ce>
 8005d6a:	4680      	mov	r8, r0
 8005d6c:	4689      	mov	r9, r1
 8005d6e:	9b05      	ldr	r3, [sp, #20]
 8005d70:	b1c3      	cbz	r3, 8005da4 <_strtod_l+0x604>
 8005d72:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005d76:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	dd11      	ble.n	8005da4 <_strtod_l+0x604>
 8005d80:	2b1f      	cmp	r3, #31
 8005d82:	f340 8127 	ble.w	8005fd4 <_strtod_l+0x834>
 8005d86:	2b34      	cmp	r3, #52	; 0x34
 8005d88:	bfd8      	it	le
 8005d8a:	f04f 33ff 	movle.w	r3, #4294967295
 8005d8e:	f04f 0800 	mov.w	r8, #0
 8005d92:	bfcf      	iteee	gt
 8005d94:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005d98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005d9c:	fa03 f202 	lslle.w	r2, r3, r2
 8005da0:	ea02 0901 	andle.w	r9, r2, r1
 8005da4:	2200      	movs	r2, #0
 8005da6:	2300      	movs	r3, #0
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	f7fa fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d1a1      	bne.n	8005cf8 <_strtod_l+0x558>
 8005db4:	9b06      	ldr	r3, [sp, #24]
 8005db6:	465a      	mov	r2, fp
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4623      	mov	r3, r4
 8005dbe:	9908      	ldr	r1, [sp, #32]
 8005dc0:	f001 fe1c 	bl	80079fc <__s2b>
 8005dc4:	9008      	str	r0, [sp, #32]
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f43f af21 	beq.w	8005c0e <_strtod_l+0x46e>
 8005dcc:	9b04      	ldr	r3, [sp, #16]
 8005dce:	f04f 0b00 	mov.w	fp, #0
 8005dd2:	1b5d      	subs	r5, r3, r5
 8005dd4:	9b07      	ldr	r3, [sp, #28]
 8005dd6:	f8cd b010 	str.w	fp, [sp, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bfb4      	ite	lt
 8005dde:	462b      	movlt	r3, r5
 8005de0:	2300      	movge	r3, #0
 8005de2:	930e      	str	r3, [sp, #56]	; 0x38
 8005de4:	9b07      	ldr	r3, [sp, #28]
 8005de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005dea:	9314      	str	r3, [sp, #80]	; 0x50
 8005dec:	9b08      	ldr	r3, [sp, #32]
 8005dee:	4650      	mov	r0, sl
 8005df0:	6859      	ldr	r1, [r3, #4]
 8005df2:	f001 fd5b 	bl	80078ac <_Balloc>
 8005df6:	9006      	str	r0, [sp, #24]
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f43f af10 	beq.w	8005c1e <_strtod_l+0x47e>
 8005dfe:	9b08      	ldr	r3, [sp, #32]
 8005e00:	300c      	adds	r0, #12
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	f103 010c 	add.w	r1, r3, #12
 8005e08:	3202      	adds	r2, #2
 8005e0a:	0092      	lsls	r2, r2, #2
 8005e0c:	f001 fd40 	bl	8007890 <memcpy>
 8005e10:	ab1c      	add	r3, sp, #112	; 0x70
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	ab1b      	add	r3, sp, #108	; 0x6c
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	4650      	mov	r0, sl
 8005e1e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005e22:	f002 f92d 	bl	8008080 <__d2b>
 8005e26:	901a      	str	r0, [sp, #104]	; 0x68
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f43f aef8 	beq.w	8005c1e <_strtod_l+0x47e>
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4650      	mov	r0, sl
 8005e32:	f001 fe7b 	bl	8007b2c <__i2b>
 8005e36:	4603      	mov	r3, r0
 8005e38:	9004      	str	r0, [sp, #16]
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f43f aeef 	beq.w	8005c1e <_strtod_l+0x47e>
 8005e40:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005e42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	bfab      	itete	ge
 8005e48:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005e4a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005e4c:	18ee      	addge	r6, r5, r3
 8005e4e:	1b5c      	sublt	r4, r3, r5
 8005e50:	9b05      	ldr	r3, [sp, #20]
 8005e52:	bfa8      	it	ge
 8005e54:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005e56:	eba5 0503 	sub.w	r5, r5, r3
 8005e5a:	4415      	add	r5, r2
 8005e5c:	4b6e      	ldr	r3, [pc, #440]	; (8006018 <_strtod_l+0x878>)
 8005e5e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005e62:	bfb8      	it	lt
 8005e64:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005e66:	429d      	cmp	r5, r3
 8005e68:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005e6c:	f280 80c4 	bge.w	8005ff8 <_strtod_l+0x858>
 8005e70:	1b5b      	subs	r3, r3, r5
 8005e72:	2b1f      	cmp	r3, #31
 8005e74:	f04f 0701 	mov.w	r7, #1
 8005e78:	eba2 0203 	sub.w	r2, r2, r3
 8005e7c:	f300 80b1 	bgt.w	8005fe2 <_strtod_l+0x842>
 8005e80:	2500      	movs	r5, #0
 8005e82:	fa07 f303 	lsl.w	r3, r7, r3
 8005e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e88:	18b7      	adds	r7, r6, r2
 8005e8a:	9b05      	ldr	r3, [sp, #20]
 8005e8c:	42be      	cmp	r6, r7
 8005e8e:	4414      	add	r4, r2
 8005e90:	441c      	add	r4, r3
 8005e92:	4633      	mov	r3, r6
 8005e94:	bfa8      	it	ge
 8005e96:	463b      	movge	r3, r7
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	bfa8      	it	ge
 8005e9c:	4623      	movge	r3, r4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfc2      	ittt	gt
 8005ea2:	1aff      	subgt	r7, r7, r3
 8005ea4:	1ae4      	subgt	r4, r4, r3
 8005ea6:	1af6      	subgt	r6, r6, r3
 8005ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dd17      	ble.n	8005ede <_strtod_l+0x73e>
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	9904      	ldr	r1, [sp, #16]
 8005eb4:	f001 fef8 	bl	8007ca8 <__pow5mult>
 8005eb8:	9004      	str	r0, [sp, #16]
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	f43f aeaf 	beq.w	8005c1e <_strtod_l+0x47e>
 8005ec0:	4601      	mov	r1, r0
 8005ec2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ec4:	4650      	mov	r0, sl
 8005ec6:	f001 fe47 	bl	8007b58 <__multiply>
 8005eca:	9009      	str	r0, [sp, #36]	; 0x24
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	f43f aea6 	beq.w	8005c1e <_strtod_l+0x47e>
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ed6:	f001 fd29 	bl	800792c <_Bfree>
 8005eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005edc:	931a      	str	r3, [sp, #104]	; 0x68
 8005ede:	2f00      	cmp	r7, #0
 8005ee0:	f300 808e 	bgt.w	8006000 <_strtod_l+0x860>
 8005ee4:	9b07      	ldr	r3, [sp, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dd08      	ble.n	8005efc <_strtod_l+0x75c>
 8005eea:	4650      	mov	r0, sl
 8005eec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005eee:	9906      	ldr	r1, [sp, #24]
 8005ef0:	f001 feda 	bl	8007ca8 <__pow5mult>
 8005ef4:	9006      	str	r0, [sp, #24]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f43f ae91 	beq.w	8005c1e <_strtod_l+0x47e>
 8005efc:	2c00      	cmp	r4, #0
 8005efe:	dd08      	ble.n	8005f12 <_strtod_l+0x772>
 8005f00:	4622      	mov	r2, r4
 8005f02:	4650      	mov	r0, sl
 8005f04:	9906      	ldr	r1, [sp, #24]
 8005f06:	f001 ff29 	bl	8007d5c <__lshift>
 8005f0a:	9006      	str	r0, [sp, #24]
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f43f ae86 	beq.w	8005c1e <_strtod_l+0x47e>
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	dd08      	ble.n	8005f28 <_strtod_l+0x788>
 8005f16:	4632      	mov	r2, r6
 8005f18:	4650      	mov	r0, sl
 8005f1a:	9904      	ldr	r1, [sp, #16]
 8005f1c:	f001 ff1e 	bl	8007d5c <__lshift>
 8005f20:	9004      	str	r0, [sp, #16]
 8005f22:	2800      	cmp	r0, #0
 8005f24:	f43f ae7b 	beq.w	8005c1e <_strtod_l+0x47e>
 8005f28:	4650      	mov	r0, sl
 8005f2a:	9a06      	ldr	r2, [sp, #24]
 8005f2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f2e:	f001 ffa1 	bl	8007e74 <__mdiff>
 8005f32:	4683      	mov	fp, r0
 8005f34:	2800      	cmp	r0, #0
 8005f36:	f43f ae72 	beq.w	8005c1e <_strtod_l+0x47e>
 8005f3a:	2400      	movs	r4, #0
 8005f3c:	68c3      	ldr	r3, [r0, #12]
 8005f3e:	9904      	ldr	r1, [sp, #16]
 8005f40:	60c4      	str	r4, [r0, #12]
 8005f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f44:	f001 ff7a 	bl	8007e3c <__mcmp>
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	da6b      	bge.n	8006024 <_strtod_l+0x884>
 8005f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f4e:	ea53 0308 	orrs.w	r3, r3, r8
 8005f52:	f040 8091 	bne.w	8006078 <_strtod_l+0x8d8>
 8005f56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 808c 	bne.w	8006078 <_strtod_l+0x8d8>
 8005f60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f64:	0d1b      	lsrs	r3, r3, #20
 8005f66:	051b      	lsls	r3, r3, #20
 8005f68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005f6c:	f240 8084 	bls.w	8006078 <_strtod_l+0x8d8>
 8005f70:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005f74:	b91b      	cbnz	r3, 8005f7e <_strtod_l+0x7de>
 8005f76:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	dd7c      	ble.n	8006078 <_strtod_l+0x8d8>
 8005f7e:	4659      	mov	r1, fp
 8005f80:	2201      	movs	r2, #1
 8005f82:	4650      	mov	r0, sl
 8005f84:	f001 feea 	bl	8007d5c <__lshift>
 8005f88:	9904      	ldr	r1, [sp, #16]
 8005f8a:	4683      	mov	fp, r0
 8005f8c:	f001 ff56 	bl	8007e3c <__mcmp>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	dd71      	ble.n	8006078 <_strtod_l+0x8d8>
 8005f94:	9905      	ldr	r1, [sp, #20]
 8005f96:	464b      	mov	r3, r9
 8005f98:	4a20      	ldr	r2, [pc, #128]	; (800601c <_strtod_l+0x87c>)
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	f000 808c 	beq.w	80060b8 <_strtod_l+0x918>
 8005fa0:	ea02 0109 	and.w	r1, r2, r9
 8005fa4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005fa8:	f300 8086 	bgt.w	80060b8 <_strtod_l+0x918>
 8005fac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005fb0:	f77f aeaa 	ble.w	8005d08 <_strtod_l+0x568>
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4b19      	ldr	r3, [pc, #100]	; (8006020 <_strtod_l+0x880>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f7fa fa8c 	bl	80004d8 <__aeabi_dmul>
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4303      	orrs	r3, r0
 8005fc4:	bf08      	it	eq
 8005fc6:	2322      	moveq	r3, #34	; 0x22
 8005fc8:	4680      	mov	r8, r0
 8005fca:	4689      	mov	r9, r1
 8005fcc:	bf08      	it	eq
 8005fce:	f8ca 3000 	streq.w	r3, [sl]
 8005fd2:	e62f      	b.n	8005c34 <_strtod_l+0x494>
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	ea03 0808 	and.w	r8, r3, r8
 8005fe0:	e6e0      	b.n	8005da4 <_strtod_l+0x604>
 8005fe2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005fe6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005fea:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005fee:	35e2      	adds	r5, #226	; 0xe2
 8005ff0:	fa07 f505 	lsl.w	r5, r7, r5
 8005ff4:	970f      	str	r7, [sp, #60]	; 0x3c
 8005ff6:	e747      	b.n	8005e88 <_strtod_l+0x6e8>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	2500      	movs	r5, #0
 8005ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ffe:	e743      	b.n	8005e88 <_strtod_l+0x6e8>
 8006000:	463a      	mov	r2, r7
 8006002:	4650      	mov	r0, sl
 8006004:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006006:	f001 fea9 	bl	8007d5c <__lshift>
 800600a:	901a      	str	r0, [sp, #104]	; 0x68
 800600c:	2800      	cmp	r0, #0
 800600e:	f47f af69 	bne.w	8005ee4 <_strtod_l+0x744>
 8006012:	e604      	b.n	8005c1e <_strtod_l+0x47e>
 8006014:	08009578 	.word	0x08009578
 8006018:	fffffc02 	.word	0xfffffc02
 800601c:	7ff00000 	.word	0x7ff00000
 8006020:	39500000 	.word	0x39500000
 8006024:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006028:	d165      	bne.n	80060f6 <_strtod_l+0x956>
 800602a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800602c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006030:	b35a      	cbz	r2, 800608a <_strtod_l+0x8ea>
 8006032:	4a99      	ldr	r2, [pc, #612]	; (8006298 <_strtod_l+0xaf8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d12b      	bne.n	8006090 <_strtod_l+0x8f0>
 8006038:	9b05      	ldr	r3, [sp, #20]
 800603a:	4641      	mov	r1, r8
 800603c:	b303      	cbz	r3, 8006080 <_strtod_l+0x8e0>
 800603e:	464a      	mov	r2, r9
 8006040:	4b96      	ldr	r3, [pc, #600]	; (800629c <_strtod_l+0xafc>)
 8006042:	4013      	ands	r3, r2
 8006044:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006048:	f04f 32ff 	mov.w	r2, #4294967295
 800604c:	d81b      	bhi.n	8006086 <_strtod_l+0x8e6>
 800604e:	0d1b      	lsrs	r3, r3, #20
 8006050:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	4299      	cmp	r1, r3
 800605a:	d119      	bne.n	8006090 <_strtod_l+0x8f0>
 800605c:	4b90      	ldr	r3, [pc, #576]	; (80062a0 <_strtod_l+0xb00>)
 800605e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006060:	429a      	cmp	r2, r3
 8006062:	d102      	bne.n	800606a <_strtod_l+0x8ca>
 8006064:	3101      	adds	r1, #1
 8006066:	f43f adda 	beq.w	8005c1e <_strtod_l+0x47e>
 800606a:	f04f 0800 	mov.w	r8, #0
 800606e:	4b8b      	ldr	r3, [pc, #556]	; (800629c <_strtod_l+0xafc>)
 8006070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006072:	401a      	ands	r2, r3
 8006074:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006078:	9b05      	ldr	r3, [sp, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d19a      	bne.n	8005fb4 <_strtod_l+0x814>
 800607e:	e5d9      	b.n	8005c34 <_strtod_l+0x494>
 8006080:	f04f 33ff 	mov.w	r3, #4294967295
 8006084:	e7e8      	b.n	8006058 <_strtod_l+0x8b8>
 8006086:	4613      	mov	r3, r2
 8006088:	e7e6      	b.n	8006058 <_strtod_l+0x8b8>
 800608a:	ea53 0308 	orrs.w	r3, r3, r8
 800608e:	d081      	beq.n	8005f94 <_strtod_l+0x7f4>
 8006090:	b1e5      	cbz	r5, 80060cc <_strtod_l+0x92c>
 8006092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006094:	421d      	tst	r5, r3
 8006096:	d0ef      	beq.n	8006078 <_strtod_l+0x8d8>
 8006098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800609a:	4640      	mov	r0, r8
 800609c:	4649      	mov	r1, r9
 800609e:	9a05      	ldr	r2, [sp, #20]
 80060a0:	b1c3      	cbz	r3, 80060d4 <_strtod_l+0x934>
 80060a2:	f7ff fb5b 	bl	800575c <sulp>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060ae:	f7fa f85d 	bl	800016c <__adddf3>
 80060b2:	4680      	mov	r8, r0
 80060b4:	4689      	mov	r9, r1
 80060b6:	e7df      	b.n	8006078 <_strtod_l+0x8d8>
 80060b8:	4013      	ands	r3, r2
 80060ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80060be:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80060c2:	f04f 38ff 	mov.w	r8, #4294967295
 80060c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80060ca:	e7d5      	b.n	8006078 <_strtod_l+0x8d8>
 80060cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ce:	ea13 0f08 	tst.w	r3, r8
 80060d2:	e7e0      	b.n	8006096 <_strtod_l+0x8f6>
 80060d4:	f7ff fb42 	bl	800575c <sulp>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060e0:	f7fa f842 	bl	8000168 <__aeabi_dsub>
 80060e4:	2200      	movs	r2, #0
 80060e6:	2300      	movs	r3, #0
 80060e8:	4680      	mov	r8, r0
 80060ea:	4689      	mov	r9, r1
 80060ec:	f7fa fc5c 	bl	80009a8 <__aeabi_dcmpeq>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d0c1      	beq.n	8006078 <_strtod_l+0x8d8>
 80060f4:	e608      	b.n	8005d08 <_strtod_l+0x568>
 80060f6:	4658      	mov	r0, fp
 80060f8:	9904      	ldr	r1, [sp, #16]
 80060fa:	f002 f81d 	bl	8008138 <__ratio>
 80060fe:	2200      	movs	r2, #0
 8006100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	f7fa fc62 	bl	80009d0 <__aeabi_dcmple>
 800610c:	2800      	cmp	r0, #0
 800610e:	d070      	beq.n	80061f2 <_strtod_l+0xa52>
 8006110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d042      	beq.n	800619c <_strtod_l+0x9fc>
 8006116:	2600      	movs	r6, #0
 8006118:	4f62      	ldr	r7, [pc, #392]	; (80062a4 <_strtod_l+0xb04>)
 800611a:	4d62      	ldr	r5, [pc, #392]	; (80062a4 <_strtod_l+0xb04>)
 800611c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006122:	0d1b      	lsrs	r3, r3, #20
 8006124:	051b      	lsls	r3, r3, #20
 8006126:	930f      	str	r3, [sp, #60]	; 0x3c
 8006128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800612a:	4b5f      	ldr	r3, [pc, #380]	; (80062a8 <_strtod_l+0xb08>)
 800612c:	429a      	cmp	r2, r3
 800612e:	f040 80c3 	bne.w	80062b8 <_strtod_l+0xb18>
 8006132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006134:	4640      	mov	r0, r8
 8006136:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800613a:	4649      	mov	r1, r9
 800613c:	f001 ff26 	bl	8007f8c <__ulp>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa f9c6 	bl	80004d8 <__aeabi_dmul>
 800614c:	4642      	mov	r2, r8
 800614e:	464b      	mov	r3, r9
 8006150:	f7fa f80c 	bl	800016c <__adddf3>
 8006154:	460b      	mov	r3, r1
 8006156:	4951      	ldr	r1, [pc, #324]	; (800629c <_strtod_l+0xafc>)
 8006158:	4a54      	ldr	r2, [pc, #336]	; (80062ac <_strtod_l+0xb0c>)
 800615a:	4019      	ands	r1, r3
 800615c:	4291      	cmp	r1, r2
 800615e:	4680      	mov	r8, r0
 8006160:	d95d      	bls.n	800621e <_strtod_l+0xa7e>
 8006162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006164:	4b4e      	ldr	r3, [pc, #312]	; (80062a0 <_strtod_l+0xb00>)
 8006166:	429a      	cmp	r2, r3
 8006168:	d103      	bne.n	8006172 <_strtod_l+0x9d2>
 800616a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800616c:	3301      	adds	r3, #1
 800616e:	f43f ad56 	beq.w	8005c1e <_strtod_l+0x47e>
 8006172:	f04f 38ff 	mov.w	r8, #4294967295
 8006176:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80062a0 <_strtod_l+0xb00>
 800617a:	4650      	mov	r0, sl
 800617c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800617e:	f001 fbd5 	bl	800792c <_Bfree>
 8006182:	4650      	mov	r0, sl
 8006184:	9906      	ldr	r1, [sp, #24]
 8006186:	f001 fbd1 	bl	800792c <_Bfree>
 800618a:	4650      	mov	r0, sl
 800618c:	9904      	ldr	r1, [sp, #16]
 800618e:	f001 fbcd 	bl	800792c <_Bfree>
 8006192:	4659      	mov	r1, fp
 8006194:	4650      	mov	r0, sl
 8006196:	f001 fbc9 	bl	800792c <_Bfree>
 800619a:	e627      	b.n	8005dec <_strtod_l+0x64c>
 800619c:	f1b8 0f00 	cmp.w	r8, #0
 80061a0:	d119      	bne.n	80061d6 <_strtod_l+0xa36>
 80061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061a8:	b9e3      	cbnz	r3, 80061e4 <_strtod_l+0xa44>
 80061aa:	2200      	movs	r2, #0
 80061ac:	4630      	mov	r0, r6
 80061ae:	4639      	mov	r1, r7
 80061b0:	4b3c      	ldr	r3, [pc, #240]	; (80062a4 <_strtod_l+0xb04>)
 80061b2:	f7fa fc03 	bl	80009bc <__aeabi_dcmplt>
 80061b6:	b9c8      	cbnz	r0, 80061ec <_strtod_l+0xa4c>
 80061b8:	2200      	movs	r2, #0
 80061ba:	4630      	mov	r0, r6
 80061bc:	4639      	mov	r1, r7
 80061be:	4b3c      	ldr	r3, [pc, #240]	; (80062b0 <_strtod_l+0xb10>)
 80061c0:	f7fa f98a 	bl	80004d8 <__aeabi_dmul>
 80061c4:	4604      	mov	r4, r0
 80061c6:	460d      	mov	r5, r1
 80061c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80061cc:	9416      	str	r4, [sp, #88]	; 0x58
 80061ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80061d0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80061d4:	e7a2      	b.n	800611c <_strtod_l+0x97c>
 80061d6:	f1b8 0f01 	cmp.w	r8, #1
 80061da:	d103      	bne.n	80061e4 <_strtod_l+0xa44>
 80061dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f43f ad92 	beq.w	8005d08 <_strtod_l+0x568>
 80061e4:	2600      	movs	r6, #0
 80061e6:	2400      	movs	r4, #0
 80061e8:	4f32      	ldr	r7, [pc, #200]	; (80062b4 <_strtod_l+0xb14>)
 80061ea:	e796      	b.n	800611a <_strtod_l+0x97a>
 80061ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80061ee:	4d30      	ldr	r5, [pc, #192]	; (80062b0 <_strtod_l+0xb10>)
 80061f0:	e7ea      	b.n	80061c8 <_strtod_l+0xa28>
 80061f2:	4b2f      	ldr	r3, [pc, #188]	; (80062b0 <_strtod_l+0xb10>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	4630      	mov	r0, r6
 80061f8:	4639      	mov	r1, r7
 80061fa:	f7fa f96d 	bl	80004d8 <__aeabi_dmul>
 80061fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	b933      	cbnz	r3, 8006214 <_strtod_l+0xa74>
 8006206:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800620a:	9010      	str	r0, [sp, #64]	; 0x40
 800620c:	9311      	str	r3, [sp, #68]	; 0x44
 800620e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006212:	e783      	b.n	800611c <_strtod_l+0x97c>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800621c:	e7f7      	b.n	800620e <_strtod_l+0xa6e>
 800621e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006222:	9b05      	ldr	r3, [sp, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1a8      	bne.n	800617a <_strtod_l+0x9da>
 8006228:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800622c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800622e:	0d1b      	lsrs	r3, r3, #20
 8006230:	051b      	lsls	r3, r3, #20
 8006232:	429a      	cmp	r2, r3
 8006234:	d1a1      	bne.n	800617a <_strtod_l+0x9da>
 8006236:	4620      	mov	r0, r4
 8006238:	4629      	mov	r1, r5
 800623a:	f7fa fda3 	bl	8000d84 <__aeabi_d2lz>
 800623e:	f7fa f91d 	bl	800047c <__aeabi_l2d>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7f9 ff8d 	bl	8000168 <__aeabi_dsub>
 800624e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006254:	ea43 0308 	orr.w	r3, r3, r8
 8006258:	4313      	orrs	r3, r2
 800625a:	4604      	mov	r4, r0
 800625c:	460d      	mov	r5, r1
 800625e:	d066      	beq.n	800632e <_strtod_l+0xb8e>
 8006260:	a309      	add	r3, pc, #36	; (adr r3, 8006288 <_strtod_l+0xae8>)
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f7fa fba9 	bl	80009bc <__aeabi_dcmplt>
 800626a:	2800      	cmp	r0, #0
 800626c:	f47f ace2 	bne.w	8005c34 <_strtod_l+0x494>
 8006270:	a307      	add	r3, pc, #28	; (adr r3, 8006290 <_strtod_l+0xaf0>)
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa fbbd 	bl	80009f8 <__aeabi_dcmpgt>
 800627e:	2800      	cmp	r0, #0
 8006280:	f43f af7b 	beq.w	800617a <_strtod_l+0x9da>
 8006284:	e4d6      	b.n	8005c34 <_strtod_l+0x494>
 8006286:	bf00      	nop
 8006288:	94a03595 	.word	0x94a03595
 800628c:	3fdfffff 	.word	0x3fdfffff
 8006290:	35afe535 	.word	0x35afe535
 8006294:	3fe00000 	.word	0x3fe00000
 8006298:	000fffff 	.word	0x000fffff
 800629c:	7ff00000 	.word	0x7ff00000
 80062a0:	7fefffff 	.word	0x7fefffff
 80062a4:	3ff00000 	.word	0x3ff00000
 80062a8:	7fe00000 	.word	0x7fe00000
 80062ac:	7c9fffff 	.word	0x7c9fffff
 80062b0:	3fe00000 	.word	0x3fe00000
 80062b4:	bff00000 	.word	0xbff00000
 80062b8:	9b05      	ldr	r3, [sp, #20]
 80062ba:	b313      	cbz	r3, 8006302 <_strtod_l+0xb62>
 80062bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80062c2:	d81e      	bhi.n	8006302 <_strtod_l+0xb62>
 80062c4:	a326      	add	r3, pc, #152	; (adr r3, 8006360 <_strtod_l+0xbc0>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	4620      	mov	r0, r4
 80062cc:	4629      	mov	r1, r5
 80062ce:	f7fa fb7f 	bl	80009d0 <__aeabi_dcmple>
 80062d2:	b190      	cbz	r0, 80062fa <_strtod_l+0xb5a>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4620      	mov	r0, r4
 80062d8:	f7fa fbd6 	bl	8000a88 <__aeabi_d2uiz>
 80062dc:	2801      	cmp	r0, #1
 80062de:	bf38      	it	cc
 80062e0:	2001      	movcc	r0, #1
 80062e2:	f7fa f87f 	bl	80003e4 <__aeabi_ui2d>
 80062e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e8:	4604      	mov	r4, r0
 80062ea:	460d      	mov	r5, r1
 80062ec:	b9d3      	cbnz	r3, 8006324 <_strtod_l+0xb84>
 80062ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062f2:	9012      	str	r0, [sp, #72]	; 0x48
 80062f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80062f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80062fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006300:	1a9f      	subs	r7, r3, r2
 8006302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006306:	f001 fe41 	bl	8007f8c <__ulp>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4630      	mov	r0, r6
 8006310:	4639      	mov	r1, r7
 8006312:	f7fa f8e1 	bl	80004d8 <__aeabi_dmul>
 8006316:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800631a:	f7f9 ff27 	bl	800016c <__adddf3>
 800631e:	4680      	mov	r8, r0
 8006320:	4689      	mov	r9, r1
 8006322:	e77e      	b.n	8006222 <_strtod_l+0xa82>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800632c:	e7e3      	b.n	80062f6 <_strtod_l+0xb56>
 800632e:	a30e      	add	r3, pc, #56	; (adr r3, 8006368 <_strtod_l+0xbc8>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f7fa fb42 	bl	80009bc <__aeabi_dcmplt>
 8006338:	e7a1      	b.n	800627e <_strtod_l+0xade>
 800633a:	2300      	movs	r3, #0
 800633c:	930a      	str	r3, [sp, #40]	; 0x28
 800633e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006340:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	f7ff ba71 	b.w	800582a <_strtod_l+0x8a>
 8006348:	2a65      	cmp	r2, #101	; 0x65
 800634a:	f43f ab63 	beq.w	8005a14 <_strtod_l+0x274>
 800634e:	2a45      	cmp	r2, #69	; 0x45
 8006350:	f43f ab60 	beq.w	8005a14 <_strtod_l+0x274>
 8006354:	2301      	movs	r3, #1
 8006356:	f7ff bb95 	b.w	8005a84 <_strtod_l+0x2e4>
 800635a:	bf00      	nop
 800635c:	f3af 8000 	nop.w
 8006360:	ffc00000 	.word	0xffc00000
 8006364:	41dfffff 	.word	0x41dfffff
 8006368:	94a03595 	.word	0x94a03595
 800636c:	3fcfffff 	.word	0x3fcfffff

08006370 <_strtod_r>:
 8006370:	4b01      	ldr	r3, [pc, #4]	; (8006378 <_strtod_r+0x8>)
 8006372:	f7ff ba15 	b.w	80057a0 <_strtod_l>
 8006376:	bf00      	nop
 8006378:	20000074 	.word	0x20000074

0800637c <_strtol_l.constprop.0>:
 800637c:	2b01      	cmp	r3, #1
 800637e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006382:	4680      	mov	r8, r0
 8006384:	d001      	beq.n	800638a <_strtol_l.constprop.0+0xe>
 8006386:	2b24      	cmp	r3, #36	; 0x24
 8006388:	d906      	bls.n	8006398 <_strtol_l.constprop.0+0x1c>
 800638a:	f7fe fb23 	bl	80049d4 <__errno>
 800638e:	2316      	movs	r3, #22
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	2000      	movs	r0, #0
 8006394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006398:	460d      	mov	r5, r1
 800639a:	4f35      	ldr	r7, [pc, #212]	; (8006470 <_strtol_l.constprop.0+0xf4>)
 800639c:	4628      	mov	r0, r5
 800639e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063a2:	5de6      	ldrb	r6, [r4, r7]
 80063a4:	f016 0608 	ands.w	r6, r6, #8
 80063a8:	d1f8      	bne.n	800639c <_strtol_l.constprop.0+0x20>
 80063aa:	2c2d      	cmp	r4, #45	; 0x2d
 80063ac:	d12f      	bne.n	800640e <_strtol_l.constprop.0+0x92>
 80063ae:	2601      	movs	r6, #1
 80063b0:	782c      	ldrb	r4, [r5, #0]
 80063b2:	1c85      	adds	r5, r0, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d057      	beq.n	8006468 <_strtol_l.constprop.0+0xec>
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d109      	bne.n	80063d0 <_strtol_l.constprop.0+0x54>
 80063bc:	2c30      	cmp	r4, #48	; 0x30
 80063be:	d107      	bne.n	80063d0 <_strtol_l.constprop.0+0x54>
 80063c0:	7828      	ldrb	r0, [r5, #0]
 80063c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80063c6:	2858      	cmp	r0, #88	; 0x58
 80063c8:	d149      	bne.n	800645e <_strtol_l.constprop.0+0xe2>
 80063ca:	2310      	movs	r3, #16
 80063cc:	786c      	ldrb	r4, [r5, #1]
 80063ce:	3502      	adds	r5, #2
 80063d0:	2700      	movs	r7, #0
 80063d2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80063d6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80063da:	fbbe f9f3 	udiv	r9, lr, r3
 80063de:	4638      	mov	r0, r7
 80063e0:	fb03 ea19 	mls	sl, r3, r9, lr
 80063e4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80063e8:	f1bc 0f09 	cmp.w	ip, #9
 80063ec:	d814      	bhi.n	8006418 <_strtol_l.constprop.0+0x9c>
 80063ee:	4664      	mov	r4, ip
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	dd22      	ble.n	800643a <_strtol_l.constprop.0+0xbe>
 80063f4:	2f00      	cmp	r7, #0
 80063f6:	db1d      	blt.n	8006434 <_strtol_l.constprop.0+0xb8>
 80063f8:	4581      	cmp	r9, r0
 80063fa:	d31b      	bcc.n	8006434 <_strtol_l.constprop.0+0xb8>
 80063fc:	d101      	bne.n	8006402 <_strtol_l.constprop.0+0x86>
 80063fe:	45a2      	cmp	sl, r4
 8006400:	db18      	blt.n	8006434 <_strtol_l.constprop.0+0xb8>
 8006402:	2701      	movs	r7, #1
 8006404:	fb00 4003 	mla	r0, r0, r3, r4
 8006408:	f815 4b01 	ldrb.w	r4, [r5], #1
 800640c:	e7ea      	b.n	80063e4 <_strtol_l.constprop.0+0x68>
 800640e:	2c2b      	cmp	r4, #43	; 0x2b
 8006410:	bf04      	itt	eq
 8006412:	782c      	ldrbeq	r4, [r5, #0]
 8006414:	1c85      	addeq	r5, r0, #2
 8006416:	e7cd      	b.n	80063b4 <_strtol_l.constprop.0+0x38>
 8006418:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800641c:	f1bc 0f19 	cmp.w	ip, #25
 8006420:	d801      	bhi.n	8006426 <_strtol_l.constprop.0+0xaa>
 8006422:	3c37      	subs	r4, #55	; 0x37
 8006424:	e7e4      	b.n	80063f0 <_strtol_l.constprop.0+0x74>
 8006426:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800642a:	f1bc 0f19 	cmp.w	ip, #25
 800642e:	d804      	bhi.n	800643a <_strtol_l.constprop.0+0xbe>
 8006430:	3c57      	subs	r4, #87	; 0x57
 8006432:	e7dd      	b.n	80063f0 <_strtol_l.constprop.0+0x74>
 8006434:	f04f 37ff 	mov.w	r7, #4294967295
 8006438:	e7e6      	b.n	8006408 <_strtol_l.constprop.0+0x8c>
 800643a:	2f00      	cmp	r7, #0
 800643c:	da07      	bge.n	800644e <_strtol_l.constprop.0+0xd2>
 800643e:	2322      	movs	r3, #34	; 0x22
 8006440:	4670      	mov	r0, lr
 8006442:	f8c8 3000 	str.w	r3, [r8]
 8006446:	2a00      	cmp	r2, #0
 8006448:	d0a4      	beq.n	8006394 <_strtol_l.constprop.0+0x18>
 800644a:	1e69      	subs	r1, r5, #1
 800644c:	e005      	b.n	800645a <_strtol_l.constprop.0+0xde>
 800644e:	b106      	cbz	r6, 8006452 <_strtol_l.constprop.0+0xd6>
 8006450:	4240      	negs	r0, r0
 8006452:	2a00      	cmp	r2, #0
 8006454:	d09e      	beq.n	8006394 <_strtol_l.constprop.0+0x18>
 8006456:	2f00      	cmp	r7, #0
 8006458:	d1f7      	bne.n	800644a <_strtol_l.constprop.0+0xce>
 800645a:	6011      	str	r1, [r2, #0]
 800645c:	e79a      	b.n	8006394 <_strtol_l.constprop.0+0x18>
 800645e:	2430      	movs	r4, #48	; 0x30
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1b5      	bne.n	80063d0 <_strtol_l.constprop.0+0x54>
 8006464:	2308      	movs	r3, #8
 8006466:	e7b3      	b.n	80063d0 <_strtol_l.constprop.0+0x54>
 8006468:	2c30      	cmp	r4, #48	; 0x30
 800646a:	d0a9      	beq.n	80063c0 <_strtol_l.constprop.0+0x44>
 800646c:	230a      	movs	r3, #10
 800646e:	e7af      	b.n	80063d0 <_strtol_l.constprop.0+0x54>
 8006470:	080095a1 	.word	0x080095a1

08006474 <_strtol_r>:
 8006474:	f7ff bf82 	b.w	800637c <_strtol_l.constprop.0>

08006478 <quorem>:
 8006478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	6903      	ldr	r3, [r0, #16]
 800647e:	690c      	ldr	r4, [r1, #16]
 8006480:	4607      	mov	r7, r0
 8006482:	42a3      	cmp	r3, r4
 8006484:	f2c0 8082 	blt.w	800658c <quorem+0x114>
 8006488:	3c01      	subs	r4, #1
 800648a:	f100 0514 	add.w	r5, r0, #20
 800648e:	f101 0814 	add.w	r8, r1, #20
 8006492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800649c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a0:	3301      	adds	r3, #1
 80064a2:	429a      	cmp	r2, r3
 80064a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80064a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064b0:	d331      	bcc.n	8006516 <quorem+0x9e>
 80064b2:	f04f 0e00 	mov.w	lr, #0
 80064b6:	4640      	mov	r0, r8
 80064b8:	46ac      	mov	ip, r5
 80064ba:	46f2      	mov	sl, lr
 80064bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c0:	b293      	uxth	r3, r2
 80064c2:	fb06 e303 	mla	r3, r6, r3, lr
 80064c6:	0c12      	lsrs	r2, r2, #16
 80064c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	fb06 e202 	mla	r2, r6, r2, lr
 80064d2:	ebaa 0303 	sub.w	r3, sl, r3
 80064d6:	f8dc a000 	ldr.w	sl, [ip]
 80064da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064de:	fa1f fa8a 	uxth.w	sl, sl
 80064e2:	4453      	add	r3, sl
 80064e4:	f8dc a000 	ldr.w	sl, [ip]
 80064e8:	b292      	uxth	r2, r2
 80064ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064f8:	4581      	cmp	r9, r0
 80064fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006502:	d2db      	bcs.n	80064bc <quorem+0x44>
 8006504:	f855 300b 	ldr.w	r3, [r5, fp]
 8006508:	b92b      	cbnz	r3, 8006516 <quorem+0x9e>
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	3b04      	subs	r3, #4
 800650e:	429d      	cmp	r5, r3
 8006510:	461a      	mov	r2, r3
 8006512:	d32f      	bcc.n	8006574 <quorem+0xfc>
 8006514:	613c      	str	r4, [r7, #16]
 8006516:	4638      	mov	r0, r7
 8006518:	f001 fc90 	bl	8007e3c <__mcmp>
 800651c:	2800      	cmp	r0, #0
 800651e:	db25      	blt.n	800656c <quorem+0xf4>
 8006520:	4628      	mov	r0, r5
 8006522:	f04f 0c00 	mov.w	ip, #0
 8006526:	3601      	adds	r6, #1
 8006528:	f858 1b04 	ldr.w	r1, [r8], #4
 800652c:	f8d0 e000 	ldr.w	lr, [r0]
 8006530:	b28b      	uxth	r3, r1
 8006532:	ebac 0303 	sub.w	r3, ip, r3
 8006536:	fa1f f28e 	uxth.w	r2, lr
 800653a:	4413      	add	r3, r2
 800653c:	0c0a      	lsrs	r2, r1, #16
 800653e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006542:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006546:	b29b      	uxth	r3, r3
 8006548:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654c:	45c1      	cmp	r9, r8
 800654e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006552:	f840 3b04 	str.w	r3, [r0], #4
 8006556:	d2e7      	bcs.n	8006528 <quorem+0xb0>
 8006558:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006560:	b922      	cbnz	r2, 800656c <quorem+0xf4>
 8006562:	3b04      	subs	r3, #4
 8006564:	429d      	cmp	r5, r3
 8006566:	461a      	mov	r2, r3
 8006568:	d30a      	bcc.n	8006580 <quorem+0x108>
 800656a:	613c      	str	r4, [r7, #16]
 800656c:	4630      	mov	r0, r6
 800656e:	b003      	add	sp, #12
 8006570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	3b04      	subs	r3, #4
 8006578:	2a00      	cmp	r2, #0
 800657a:	d1cb      	bne.n	8006514 <quorem+0x9c>
 800657c:	3c01      	subs	r4, #1
 800657e:	e7c6      	b.n	800650e <quorem+0x96>
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	3b04      	subs	r3, #4
 8006584:	2a00      	cmp	r2, #0
 8006586:	d1f0      	bne.n	800656a <quorem+0xf2>
 8006588:	3c01      	subs	r4, #1
 800658a:	e7eb      	b.n	8006564 <quorem+0xec>
 800658c:	2000      	movs	r0, #0
 800658e:	e7ee      	b.n	800656e <quorem+0xf6>

08006590 <_dtoa_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	4616      	mov	r6, r2
 8006596:	461f      	mov	r7, r3
 8006598:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800659a:	b099      	sub	sp, #100	; 0x64
 800659c:	4605      	mov	r5, r0
 800659e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80065a6:	b974      	cbnz	r4, 80065c6 <_dtoa_r+0x36>
 80065a8:	2010      	movs	r0, #16
 80065aa:	f001 f949 	bl	8007840 <malloc>
 80065ae:	4602      	mov	r2, r0
 80065b0:	6268      	str	r0, [r5, #36]	; 0x24
 80065b2:	b920      	cbnz	r0, 80065be <_dtoa_r+0x2e>
 80065b4:	21ea      	movs	r1, #234	; 0xea
 80065b6:	4ba8      	ldr	r3, [pc, #672]	; (8006858 <_dtoa_r+0x2c8>)
 80065b8:	48a8      	ldr	r0, [pc, #672]	; (800685c <_dtoa_r+0x2cc>)
 80065ba:	f002 f8b3 	bl	8008724 <__assert_func>
 80065be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065c2:	6004      	str	r4, [r0, #0]
 80065c4:	60c4      	str	r4, [r0, #12]
 80065c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065c8:	6819      	ldr	r1, [r3, #0]
 80065ca:	b151      	cbz	r1, 80065e2 <_dtoa_r+0x52>
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	2301      	movs	r3, #1
 80065d0:	4093      	lsls	r3, r2
 80065d2:	604a      	str	r2, [r1, #4]
 80065d4:	608b      	str	r3, [r1, #8]
 80065d6:	4628      	mov	r0, r5
 80065d8:	f001 f9a8 	bl	800792c <_Bfree>
 80065dc:	2200      	movs	r2, #0
 80065de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	1e3b      	subs	r3, r7, #0
 80065e4:	bfaf      	iteee	ge
 80065e6:	2300      	movge	r3, #0
 80065e8:	2201      	movlt	r2, #1
 80065ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065ee:	9305      	strlt	r3, [sp, #20]
 80065f0:	bfa8      	it	ge
 80065f2:	f8c8 3000 	strge.w	r3, [r8]
 80065f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80065fa:	4b99      	ldr	r3, [pc, #612]	; (8006860 <_dtoa_r+0x2d0>)
 80065fc:	bfb8      	it	lt
 80065fe:	f8c8 2000 	strlt.w	r2, [r8]
 8006602:	ea33 0309 	bics.w	r3, r3, r9
 8006606:	d119      	bne.n	800663c <_dtoa_r+0xac>
 8006608:	f242 730f 	movw	r3, #9999	; 0x270f
 800660c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006614:	4333      	orrs	r3, r6
 8006616:	f000 857f 	beq.w	8007118 <_dtoa_r+0xb88>
 800661a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800661c:	b953      	cbnz	r3, 8006634 <_dtoa_r+0xa4>
 800661e:	4b91      	ldr	r3, [pc, #580]	; (8006864 <_dtoa_r+0x2d4>)
 8006620:	e022      	b.n	8006668 <_dtoa_r+0xd8>
 8006622:	4b91      	ldr	r3, [pc, #580]	; (8006868 <_dtoa_r+0x2d8>)
 8006624:	9303      	str	r3, [sp, #12]
 8006626:	3308      	adds	r3, #8
 8006628:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	9803      	ldr	r0, [sp, #12]
 800662e:	b019      	add	sp, #100	; 0x64
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	4b8b      	ldr	r3, [pc, #556]	; (8006864 <_dtoa_r+0x2d4>)
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	3303      	adds	r3, #3
 800663a:	e7f5      	b.n	8006628 <_dtoa_r+0x98>
 800663c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006640:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006648:	2200      	movs	r2, #0
 800664a:	2300      	movs	r3, #0
 800664c:	f7fa f9ac 	bl	80009a8 <__aeabi_dcmpeq>
 8006650:	4680      	mov	r8, r0
 8006652:	b158      	cbz	r0, 800666c <_dtoa_r+0xdc>
 8006654:	2301      	movs	r3, #1
 8006656:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8558 	beq.w	8007112 <_dtoa_r+0xb82>
 8006662:	4882      	ldr	r0, [pc, #520]	; (800686c <_dtoa_r+0x2dc>)
 8006664:	6018      	str	r0, [r3, #0]
 8006666:	1e43      	subs	r3, r0, #1
 8006668:	9303      	str	r3, [sp, #12]
 800666a:	e7df      	b.n	800662c <_dtoa_r+0x9c>
 800666c:	ab16      	add	r3, sp, #88	; 0x58
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	ab17      	add	r3, sp, #92	; 0x5c
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	4628      	mov	r0, r5
 8006676:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800667a:	f001 fd01 	bl	8008080 <__d2b>
 800667e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006682:	4683      	mov	fp, r0
 8006684:	2c00      	cmp	r4, #0
 8006686:	d07f      	beq.n	8006788 <_dtoa_r+0x1f8>
 8006688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800668c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800668e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006696:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800669a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800669e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80066a2:	2200      	movs	r2, #0
 80066a4:	4b72      	ldr	r3, [pc, #456]	; (8006870 <_dtoa_r+0x2e0>)
 80066a6:	f7f9 fd5f 	bl	8000168 <__aeabi_dsub>
 80066aa:	a365      	add	r3, pc, #404	; (adr r3, 8006840 <_dtoa_r+0x2b0>)
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f7f9 ff12 	bl	80004d8 <__aeabi_dmul>
 80066b4:	a364      	add	r3, pc, #400	; (adr r3, 8006848 <_dtoa_r+0x2b8>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7f9 fd57 	bl	800016c <__adddf3>
 80066be:	4606      	mov	r6, r0
 80066c0:	4620      	mov	r0, r4
 80066c2:	460f      	mov	r7, r1
 80066c4:	f7f9 fe9e 	bl	8000404 <__aeabi_i2d>
 80066c8:	a361      	add	r3, pc, #388	; (adr r3, 8006850 <_dtoa_r+0x2c0>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7f9 ff03 	bl	80004d8 <__aeabi_dmul>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	f7f9 fd47 	bl	800016c <__adddf3>
 80066de:	4606      	mov	r6, r0
 80066e0:	460f      	mov	r7, r1
 80066e2:	f7fa f9a9 	bl	8000a38 <__aeabi_d2iz>
 80066e6:	2200      	movs	r2, #0
 80066e8:	4682      	mov	sl, r0
 80066ea:	2300      	movs	r3, #0
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7fa f964 	bl	80009bc <__aeabi_dcmplt>
 80066f4:	b148      	cbz	r0, 800670a <_dtoa_r+0x17a>
 80066f6:	4650      	mov	r0, sl
 80066f8:	f7f9 fe84 	bl	8000404 <__aeabi_i2d>
 80066fc:	4632      	mov	r2, r6
 80066fe:	463b      	mov	r3, r7
 8006700:	f7fa f952 	bl	80009a8 <__aeabi_dcmpeq>
 8006704:	b908      	cbnz	r0, 800670a <_dtoa_r+0x17a>
 8006706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800670a:	f1ba 0f16 	cmp.w	sl, #22
 800670e:	d858      	bhi.n	80067c2 <_dtoa_r+0x232>
 8006710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006714:	4b57      	ldr	r3, [pc, #348]	; (8006874 <_dtoa_r+0x2e4>)
 8006716:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f7fa f94d 	bl	80009bc <__aeabi_dcmplt>
 8006722:	2800      	cmp	r0, #0
 8006724:	d04f      	beq.n	80067c6 <_dtoa_r+0x236>
 8006726:	2300      	movs	r3, #0
 8006728:	f10a 3aff 	add.w	sl, sl, #4294967295
 800672c:	930f      	str	r3, [sp, #60]	; 0x3c
 800672e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006730:	1b1c      	subs	r4, r3, r4
 8006732:	1e63      	subs	r3, r4, #1
 8006734:	9309      	str	r3, [sp, #36]	; 0x24
 8006736:	bf49      	itett	mi
 8006738:	f1c4 0301 	rsbmi	r3, r4, #1
 800673c:	2300      	movpl	r3, #0
 800673e:	9306      	strmi	r3, [sp, #24]
 8006740:	2300      	movmi	r3, #0
 8006742:	bf54      	ite	pl
 8006744:	9306      	strpl	r3, [sp, #24]
 8006746:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006748:	f1ba 0f00 	cmp.w	sl, #0
 800674c:	db3d      	blt.n	80067ca <_dtoa_r+0x23a>
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006754:	4453      	add	r3, sl
 8006756:	9309      	str	r3, [sp, #36]	; 0x24
 8006758:	2300      	movs	r3, #0
 800675a:	930a      	str	r3, [sp, #40]	; 0x28
 800675c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800675e:	2b09      	cmp	r3, #9
 8006760:	f200 808c 	bhi.w	800687c <_dtoa_r+0x2ec>
 8006764:	2b05      	cmp	r3, #5
 8006766:	bfc4      	itt	gt
 8006768:	3b04      	subgt	r3, #4
 800676a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800676c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800676e:	bfc8      	it	gt
 8006770:	2400      	movgt	r4, #0
 8006772:	f1a3 0302 	sub.w	r3, r3, #2
 8006776:	bfd8      	it	le
 8006778:	2401      	movle	r4, #1
 800677a:	2b03      	cmp	r3, #3
 800677c:	f200 808a 	bhi.w	8006894 <_dtoa_r+0x304>
 8006780:	e8df f003 	tbb	[pc, r3]
 8006784:	5b4d4f2d 	.word	0x5b4d4f2d
 8006788:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800678c:	441c      	add	r4, r3
 800678e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006792:	2b20      	cmp	r3, #32
 8006794:	bfc3      	ittte	gt
 8006796:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800679a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800679e:	fa09 f303 	lslgt.w	r3, r9, r3
 80067a2:	f1c3 0320 	rsble	r3, r3, #32
 80067a6:	bfc6      	itte	gt
 80067a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067ac:	4318      	orrgt	r0, r3
 80067ae:	fa06 f003 	lslle.w	r0, r6, r3
 80067b2:	f7f9 fe17 	bl	80003e4 <__aeabi_ui2d>
 80067b6:	2301      	movs	r3, #1
 80067b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80067bc:	3c01      	subs	r4, #1
 80067be:	9313      	str	r3, [sp, #76]	; 0x4c
 80067c0:	e76f      	b.n	80066a2 <_dtoa_r+0x112>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e7b2      	b.n	800672c <_dtoa_r+0x19c>
 80067c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80067c8:	e7b1      	b.n	800672e <_dtoa_r+0x19e>
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	eba3 030a 	sub.w	r3, r3, sl
 80067d0:	9306      	str	r3, [sp, #24]
 80067d2:	f1ca 0300 	rsb	r3, sl, #0
 80067d6:	930a      	str	r3, [sp, #40]	; 0x28
 80067d8:	2300      	movs	r3, #0
 80067da:	930e      	str	r3, [sp, #56]	; 0x38
 80067dc:	e7be      	b.n	800675c <_dtoa_r+0x1cc>
 80067de:	2300      	movs	r3, #0
 80067e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dc58      	bgt.n	800689a <_dtoa_r+0x30a>
 80067e8:	f04f 0901 	mov.w	r9, #1
 80067ec:	464b      	mov	r3, r9
 80067ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80067f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80067f6:	2200      	movs	r2, #0
 80067f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80067fa:	6042      	str	r2, [r0, #4]
 80067fc:	2204      	movs	r2, #4
 80067fe:	f102 0614 	add.w	r6, r2, #20
 8006802:	429e      	cmp	r6, r3
 8006804:	6841      	ldr	r1, [r0, #4]
 8006806:	d94e      	bls.n	80068a6 <_dtoa_r+0x316>
 8006808:	4628      	mov	r0, r5
 800680a:	f001 f84f 	bl	80078ac <_Balloc>
 800680e:	9003      	str	r0, [sp, #12]
 8006810:	2800      	cmp	r0, #0
 8006812:	d14c      	bne.n	80068ae <_dtoa_r+0x31e>
 8006814:	4602      	mov	r2, r0
 8006816:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800681a:	4b17      	ldr	r3, [pc, #92]	; (8006878 <_dtoa_r+0x2e8>)
 800681c:	e6cc      	b.n	80065b8 <_dtoa_r+0x28>
 800681e:	2301      	movs	r3, #1
 8006820:	e7de      	b.n	80067e0 <_dtoa_r+0x250>
 8006822:	2300      	movs	r3, #0
 8006824:	930b      	str	r3, [sp, #44]	; 0x2c
 8006826:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006828:	eb0a 0903 	add.w	r9, sl, r3
 800682c:	f109 0301 	add.w	r3, r9, #1
 8006830:	2b01      	cmp	r3, #1
 8006832:	9308      	str	r3, [sp, #32]
 8006834:	bfb8      	it	lt
 8006836:	2301      	movlt	r3, #1
 8006838:	e7dd      	b.n	80067f6 <_dtoa_r+0x266>
 800683a:	2301      	movs	r3, #1
 800683c:	e7f2      	b.n	8006824 <_dtoa_r+0x294>
 800683e:	bf00      	nop
 8006840:	636f4361 	.word	0x636f4361
 8006844:	3fd287a7 	.word	0x3fd287a7
 8006848:	8b60c8b3 	.word	0x8b60c8b3
 800684c:	3fc68a28 	.word	0x3fc68a28
 8006850:	509f79fb 	.word	0x509f79fb
 8006854:	3fd34413 	.word	0x3fd34413
 8006858:	080096ae 	.word	0x080096ae
 800685c:	080096c5 	.word	0x080096c5
 8006860:	7ff00000 	.word	0x7ff00000
 8006864:	080096aa 	.word	0x080096aa
 8006868:	080096a1 	.word	0x080096a1
 800686c:	08009525 	.word	0x08009525
 8006870:	3ff80000 	.word	0x3ff80000
 8006874:	08009830 	.word	0x08009830
 8006878:	08009720 	.word	0x08009720
 800687c:	2401      	movs	r4, #1
 800687e:	2300      	movs	r3, #0
 8006880:	940b      	str	r4, [sp, #44]	; 0x2c
 8006882:	9322      	str	r3, [sp, #136]	; 0x88
 8006884:	f04f 39ff 	mov.w	r9, #4294967295
 8006888:	2200      	movs	r2, #0
 800688a:	2312      	movs	r3, #18
 800688c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006890:	9223      	str	r2, [sp, #140]	; 0x8c
 8006892:	e7b0      	b.n	80067f6 <_dtoa_r+0x266>
 8006894:	2301      	movs	r3, #1
 8006896:	930b      	str	r3, [sp, #44]	; 0x2c
 8006898:	e7f4      	b.n	8006884 <_dtoa_r+0x2f4>
 800689a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800689e:	464b      	mov	r3, r9
 80068a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80068a4:	e7a7      	b.n	80067f6 <_dtoa_r+0x266>
 80068a6:	3101      	adds	r1, #1
 80068a8:	6041      	str	r1, [r0, #4]
 80068aa:	0052      	lsls	r2, r2, #1
 80068ac:	e7a7      	b.n	80067fe <_dtoa_r+0x26e>
 80068ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068b0:	9a03      	ldr	r2, [sp, #12]
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	9b08      	ldr	r3, [sp, #32]
 80068b6:	2b0e      	cmp	r3, #14
 80068b8:	f200 80a8 	bhi.w	8006a0c <_dtoa_r+0x47c>
 80068bc:	2c00      	cmp	r4, #0
 80068be:	f000 80a5 	beq.w	8006a0c <_dtoa_r+0x47c>
 80068c2:	f1ba 0f00 	cmp.w	sl, #0
 80068c6:	dd34      	ble.n	8006932 <_dtoa_r+0x3a2>
 80068c8:	4a9a      	ldr	r2, [pc, #616]	; (8006b34 <_dtoa_r+0x5a4>)
 80068ca:	f00a 030f 	and.w	r3, sl, #15
 80068ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80068d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80068e2:	d016      	beq.n	8006912 <_dtoa_r+0x382>
 80068e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068e8:	4b93      	ldr	r3, [pc, #588]	; (8006b38 <_dtoa_r+0x5a8>)
 80068ea:	2703      	movs	r7, #3
 80068ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068f0:	f7f9 ff1c 	bl	800072c <__aeabi_ddiv>
 80068f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068f8:	f004 040f 	and.w	r4, r4, #15
 80068fc:	4e8e      	ldr	r6, [pc, #568]	; (8006b38 <_dtoa_r+0x5a8>)
 80068fe:	b954      	cbnz	r4, 8006916 <_dtoa_r+0x386>
 8006900:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006908:	f7f9 ff10 	bl	800072c <__aeabi_ddiv>
 800690c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006910:	e029      	b.n	8006966 <_dtoa_r+0x3d6>
 8006912:	2702      	movs	r7, #2
 8006914:	e7f2      	b.n	80068fc <_dtoa_r+0x36c>
 8006916:	07e1      	lsls	r1, r4, #31
 8006918:	d508      	bpl.n	800692c <_dtoa_r+0x39c>
 800691a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800691e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006922:	f7f9 fdd9 	bl	80004d8 <__aeabi_dmul>
 8006926:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800692a:	3701      	adds	r7, #1
 800692c:	1064      	asrs	r4, r4, #1
 800692e:	3608      	adds	r6, #8
 8006930:	e7e5      	b.n	80068fe <_dtoa_r+0x36e>
 8006932:	f000 80a5 	beq.w	8006a80 <_dtoa_r+0x4f0>
 8006936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800693a:	f1ca 0400 	rsb	r4, sl, #0
 800693e:	4b7d      	ldr	r3, [pc, #500]	; (8006b34 <_dtoa_r+0x5a4>)
 8006940:	f004 020f 	and.w	r2, r4, #15
 8006944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f7f9 fdc4 	bl	80004d8 <__aeabi_dmul>
 8006950:	2702      	movs	r7, #2
 8006952:	2300      	movs	r3, #0
 8006954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006958:	4e77      	ldr	r6, [pc, #476]	; (8006b38 <_dtoa_r+0x5a8>)
 800695a:	1124      	asrs	r4, r4, #4
 800695c:	2c00      	cmp	r4, #0
 800695e:	f040 8084 	bne.w	8006a6a <_dtoa_r+0x4da>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1d2      	bne.n	800690c <_dtoa_r+0x37c>
 8006966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 808b 	beq.w	8006a84 <_dtoa_r+0x4f4>
 800696e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006972:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006976:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800697a:	2200      	movs	r2, #0
 800697c:	4b6f      	ldr	r3, [pc, #444]	; (8006b3c <_dtoa_r+0x5ac>)
 800697e:	f7fa f81d 	bl	80009bc <__aeabi_dcmplt>
 8006982:	2800      	cmp	r0, #0
 8006984:	d07e      	beq.n	8006a84 <_dtoa_r+0x4f4>
 8006986:	9b08      	ldr	r3, [sp, #32]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d07b      	beq.n	8006a84 <_dtoa_r+0x4f4>
 800698c:	f1b9 0f00 	cmp.w	r9, #0
 8006990:	dd38      	ble.n	8006a04 <_dtoa_r+0x474>
 8006992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006996:	2200      	movs	r2, #0
 8006998:	4b69      	ldr	r3, [pc, #420]	; (8006b40 <_dtoa_r+0x5b0>)
 800699a:	f7f9 fd9d 	bl	80004d8 <__aeabi_dmul>
 800699e:	464c      	mov	r4, r9
 80069a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80069a8:	3701      	adds	r7, #1
 80069aa:	4638      	mov	r0, r7
 80069ac:	f7f9 fd2a 	bl	8000404 <__aeabi_i2d>
 80069b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b4:	f7f9 fd90 	bl	80004d8 <__aeabi_dmul>
 80069b8:	2200      	movs	r2, #0
 80069ba:	4b62      	ldr	r3, [pc, #392]	; (8006b44 <_dtoa_r+0x5b4>)
 80069bc:	f7f9 fbd6 	bl	800016c <__adddf3>
 80069c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069c8:	9611      	str	r6, [sp, #68]	; 0x44
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	d15d      	bne.n	8006a8a <_dtoa_r+0x4fa>
 80069ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d2:	2200      	movs	r2, #0
 80069d4:	4b5c      	ldr	r3, [pc, #368]	; (8006b48 <_dtoa_r+0x5b8>)
 80069d6:	f7f9 fbc7 	bl	8000168 <__aeabi_dsub>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069e2:	4633      	mov	r3, r6
 80069e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069e6:	f7fa f807 	bl	80009f8 <__aeabi_dcmpgt>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	f040 829c 	bne.w	8006f28 <_dtoa_r+0x998>
 80069f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069fa:	f7f9 ffdf 	bl	80009bc <__aeabi_dcmplt>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f040 8290 	bne.w	8006f24 <_dtoa_r+0x994>
 8006a04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f2c0 8152 	blt.w	8006cb8 <_dtoa_r+0x728>
 8006a14:	f1ba 0f0e 	cmp.w	sl, #14
 8006a18:	f300 814e 	bgt.w	8006cb8 <_dtoa_r+0x728>
 8006a1c:	4b45      	ldr	r3, [pc, #276]	; (8006b34 <_dtoa_r+0x5a4>)
 8006a1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f280 80db 	bge.w	8006be8 <_dtoa_r+0x658>
 8006a32:	9b08      	ldr	r3, [sp, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f300 80d7 	bgt.w	8006be8 <_dtoa_r+0x658>
 8006a3a:	f040 8272 	bne.w	8006f22 <_dtoa_r+0x992>
 8006a3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a42:	2200      	movs	r2, #0
 8006a44:	4b40      	ldr	r3, [pc, #256]	; (8006b48 <_dtoa_r+0x5b8>)
 8006a46:	f7f9 fd47 	bl	80004d8 <__aeabi_dmul>
 8006a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4e:	f7f9 ffc9 	bl	80009e4 <__aeabi_dcmpge>
 8006a52:	9c08      	ldr	r4, [sp, #32]
 8006a54:	4626      	mov	r6, r4
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f040 8248 	bne.w	8006eec <_dtoa_r+0x95c>
 8006a5c:	2331      	movs	r3, #49	; 0x31
 8006a5e:	9f03      	ldr	r7, [sp, #12]
 8006a60:	f10a 0a01 	add.w	sl, sl, #1
 8006a64:	f807 3b01 	strb.w	r3, [r7], #1
 8006a68:	e244      	b.n	8006ef4 <_dtoa_r+0x964>
 8006a6a:	07e2      	lsls	r2, r4, #31
 8006a6c:	d505      	bpl.n	8006a7a <_dtoa_r+0x4ea>
 8006a6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a72:	f7f9 fd31 	bl	80004d8 <__aeabi_dmul>
 8006a76:	2301      	movs	r3, #1
 8006a78:	3701      	adds	r7, #1
 8006a7a:	1064      	asrs	r4, r4, #1
 8006a7c:	3608      	adds	r6, #8
 8006a7e:	e76d      	b.n	800695c <_dtoa_r+0x3cc>
 8006a80:	2702      	movs	r7, #2
 8006a82:	e770      	b.n	8006966 <_dtoa_r+0x3d6>
 8006a84:	46d0      	mov	r8, sl
 8006a86:	9c08      	ldr	r4, [sp, #32]
 8006a88:	e78f      	b.n	80069aa <_dtoa_r+0x41a>
 8006a8a:	9903      	ldr	r1, [sp, #12]
 8006a8c:	4b29      	ldr	r3, [pc, #164]	; (8006b34 <_dtoa_r+0x5a4>)
 8006a8e:	4421      	add	r1, r4
 8006a90:	9112      	str	r1, [sp, #72]	; 0x48
 8006a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	d055      	beq.n	8006b50 <_dtoa_r+0x5c0>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	4929      	ldr	r1, [pc, #164]	; (8006b4c <_dtoa_r+0x5bc>)
 8006aa8:	f7f9 fe40 	bl	800072c <__aeabi_ddiv>
 8006aac:	463b      	mov	r3, r7
 8006aae:	4632      	mov	r2, r6
 8006ab0:	f7f9 fb5a 	bl	8000168 <__aeabi_dsub>
 8006ab4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ab8:	9f03      	ldr	r7, [sp, #12]
 8006aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006abe:	f7f9 ffbb 	bl	8000a38 <__aeabi_d2iz>
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	f7f9 fc9e 	bl	8000404 <__aeabi_i2d>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ad0:	f7f9 fb4a 	bl	8000168 <__aeabi_dsub>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	3430      	adds	r4, #48	; 0x30
 8006ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ade:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ae2:	f807 4b01 	strb.w	r4, [r7], #1
 8006ae6:	f7f9 ff69 	bl	80009bc <__aeabi_dcmplt>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d174      	bne.n	8006bd8 <_dtoa_r+0x648>
 8006aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006af2:	2000      	movs	r0, #0
 8006af4:	4911      	ldr	r1, [pc, #68]	; (8006b3c <_dtoa_r+0x5ac>)
 8006af6:	f7f9 fb37 	bl	8000168 <__aeabi_dsub>
 8006afa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006afe:	f7f9 ff5d 	bl	80009bc <__aeabi_dcmplt>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	f040 80b7 	bne.w	8006c76 <_dtoa_r+0x6e6>
 8006b08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b0a:	429f      	cmp	r7, r3
 8006b0c:	f43f af7a 	beq.w	8006a04 <_dtoa_r+0x474>
 8006b10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b14:	2200      	movs	r2, #0
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <_dtoa_r+0x5b0>)
 8006b18:	f7f9 fcde 	bl	80004d8 <__aeabi_dmul>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b26:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <_dtoa_r+0x5b0>)
 8006b28:	f7f9 fcd6 	bl	80004d8 <__aeabi_dmul>
 8006b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b30:	e7c3      	b.n	8006aba <_dtoa_r+0x52a>
 8006b32:	bf00      	nop
 8006b34:	08009830 	.word	0x08009830
 8006b38:	08009808 	.word	0x08009808
 8006b3c:	3ff00000 	.word	0x3ff00000
 8006b40:	40240000 	.word	0x40240000
 8006b44:	401c0000 	.word	0x401c0000
 8006b48:	40140000 	.word	0x40140000
 8006b4c:	3fe00000 	.word	0x3fe00000
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 fcc0 	bl	80004d8 <__aeabi_dmul>
 8006b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b5e:	9c03      	ldr	r4, [sp, #12]
 8006b60:	9314      	str	r3, [sp, #80]	; 0x50
 8006b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b66:	f7f9 ff67 	bl	8000a38 <__aeabi_d2iz>
 8006b6a:	9015      	str	r0, [sp, #84]	; 0x54
 8006b6c:	f7f9 fc4a 	bl	8000404 <__aeabi_i2d>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b78:	f7f9 faf6 	bl	8000168 <__aeabi_dsub>
 8006b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b7e:	4606      	mov	r6, r0
 8006b80:	3330      	adds	r3, #48	; 0x30
 8006b82:	f804 3b01 	strb.w	r3, [r4], #1
 8006b86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b88:	460f      	mov	r7, r1
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	d124      	bne.n	8006bdc <_dtoa_r+0x64c>
 8006b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b96:	4bb0      	ldr	r3, [pc, #704]	; (8006e58 <_dtoa_r+0x8c8>)
 8006b98:	f7f9 fae8 	bl	800016c <__adddf3>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 ff28 	bl	80009f8 <__aeabi_dcmpgt>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d163      	bne.n	8006c74 <_dtoa_r+0x6e4>
 8006bac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	49a9      	ldr	r1, [pc, #676]	; (8006e58 <_dtoa_r+0x8c8>)
 8006bb4:	f7f9 fad8 	bl	8000168 <__aeabi_dsub>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f7f9 fefc 	bl	80009bc <__aeabi_dcmplt>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f43f af1d 	beq.w	8006a04 <_dtoa_r+0x474>
 8006bca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006bcc:	1e7b      	subs	r3, r7, #1
 8006bce:	9314      	str	r3, [sp, #80]	; 0x50
 8006bd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006bd4:	2b30      	cmp	r3, #48	; 0x30
 8006bd6:	d0f8      	beq.n	8006bca <_dtoa_r+0x63a>
 8006bd8:	46c2      	mov	sl, r8
 8006bda:	e03b      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006bdc:	4b9f      	ldr	r3, [pc, #636]	; (8006e5c <_dtoa_r+0x8cc>)
 8006bde:	f7f9 fc7b 	bl	80004d8 <__aeabi_dmul>
 8006be2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006be6:	e7bc      	b.n	8006b62 <_dtoa_r+0x5d2>
 8006be8:	9f03      	ldr	r7, [sp, #12]
 8006bea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fd99 	bl	800072c <__aeabi_ddiv>
 8006bfa:	f7f9 ff1d 	bl	8000a38 <__aeabi_d2iz>
 8006bfe:	4604      	mov	r4, r0
 8006c00:	f7f9 fc00 	bl	8000404 <__aeabi_i2d>
 8006c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c08:	f7f9 fc66 	bl	80004d8 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	f7f9 faa8 	bl	8000168 <__aeabi_dsub>
 8006c18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006c1c:	f807 6b01 	strb.w	r6, [r7], #1
 8006c20:	9e03      	ldr	r6, [sp, #12]
 8006c22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c26:	1bbe      	subs	r6, r7, r6
 8006c28:	45b4      	cmp	ip, r6
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	d136      	bne.n	8006c9e <_dtoa_r+0x70e>
 8006c30:	f7f9 fa9c 	bl	800016c <__adddf3>
 8006c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4689      	mov	r9, r1
 8006c3c:	f7f9 fedc 	bl	80009f8 <__aeabi_dcmpgt>
 8006c40:	bb58      	cbnz	r0, 8006c9a <_dtoa_r+0x70a>
 8006c42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 fead 	bl	80009a8 <__aeabi_dcmpeq>
 8006c4e:	b108      	cbz	r0, 8006c54 <_dtoa_r+0x6c4>
 8006c50:	07e1      	lsls	r1, r4, #31
 8006c52:	d422      	bmi.n	8006c9a <_dtoa_r+0x70a>
 8006c54:	4628      	mov	r0, r5
 8006c56:	4659      	mov	r1, fp
 8006c58:	f000 fe68 	bl	800792c <_Bfree>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	703b      	strb	r3, [r7, #0]
 8006c60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c62:	f10a 0001 	add.w	r0, sl, #1
 8006c66:	6018      	str	r0, [r3, #0]
 8006c68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f43f acde 	beq.w	800662c <_dtoa_r+0x9c>
 8006c70:	601f      	str	r7, [r3, #0]
 8006c72:	e4db      	b.n	800662c <_dtoa_r+0x9c>
 8006c74:	4627      	mov	r7, r4
 8006c76:	463b      	mov	r3, r7
 8006c78:	461f      	mov	r7, r3
 8006c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c7e:	2a39      	cmp	r2, #57	; 0x39
 8006c80:	d107      	bne.n	8006c92 <_dtoa_r+0x702>
 8006c82:	9a03      	ldr	r2, [sp, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1f7      	bne.n	8006c78 <_dtoa_r+0x6e8>
 8006c88:	2230      	movs	r2, #48	; 0x30
 8006c8a:	9903      	ldr	r1, [sp, #12]
 8006c8c:	f108 0801 	add.w	r8, r8, #1
 8006c90:	700a      	strb	r2, [r1, #0]
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	3201      	adds	r2, #1
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	e79e      	b.n	8006bd8 <_dtoa_r+0x648>
 8006c9a:	46d0      	mov	r8, sl
 8006c9c:	e7eb      	b.n	8006c76 <_dtoa_r+0x6e6>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4b6e      	ldr	r3, [pc, #440]	; (8006e5c <_dtoa_r+0x8cc>)
 8006ca2:	f7f9 fc19 	bl	80004d8 <__aeabi_dmul>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4680      	mov	r8, r0
 8006cac:	4689      	mov	r9, r1
 8006cae:	f7f9 fe7b 	bl	80009a8 <__aeabi_dcmpeq>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d09b      	beq.n	8006bee <_dtoa_r+0x65e>
 8006cb6:	e7cd      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	f000 80d0 	beq.w	8006e60 <_dtoa_r+0x8d0>
 8006cc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cc2:	2a01      	cmp	r2, #1
 8006cc4:	f300 80ae 	bgt.w	8006e24 <_dtoa_r+0x894>
 8006cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f000 80a6 	beq.w	8006e1c <_dtoa_r+0x88c>
 8006cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cd6:	9f06      	ldr	r7, [sp, #24]
 8006cd8:	9a06      	ldr	r2, [sp, #24]
 8006cda:	2101      	movs	r1, #1
 8006cdc:	441a      	add	r2, r3
 8006cde:	9206      	str	r2, [sp, #24]
 8006ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	441a      	add	r2, r3
 8006ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce8:	f000 ff20 	bl	8007b2c <__i2b>
 8006cec:	4606      	mov	r6, r0
 8006cee:	2f00      	cmp	r7, #0
 8006cf0:	dd0c      	ble.n	8006d0c <_dtoa_r+0x77c>
 8006cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dd09      	ble.n	8006d0c <_dtoa_r+0x77c>
 8006cf8:	42bb      	cmp	r3, r7
 8006cfa:	bfa8      	it	ge
 8006cfc:	463b      	movge	r3, r7
 8006cfe:	9a06      	ldr	r2, [sp, #24]
 8006d00:	1aff      	subs	r7, r7, r3
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	9206      	str	r2, [sp, #24]
 8006d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d0e:	b1f3      	cbz	r3, 8006d4e <_dtoa_r+0x7be>
 8006d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 80a8 	beq.w	8006e68 <_dtoa_r+0x8d8>
 8006d18:	2c00      	cmp	r4, #0
 8006d1a:	dd10      	ble.n	8006d3e <_dtoa_r+0x7ae>
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4622      	mov	r2, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 ffc1 	bl	8007ca8 <__pow5mult>
 8006d26:	465a      	mov	r2, fp
 8006d28:	4601      	mov	r1, r0
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 ff13 	bl	8007b58 <__multiply>
 8006d32:	4680      	mov	r8, r0
 8006d34:	4659      	mov	r1, fp
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 fdf8 	bl	800792c <_Bfree>
 8006d3c:	46c3      	mov	fp, r8
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d40:	1b1a      	subs	r2, r3, r4
 8006d42:	d004      	beq.n	8006d4e <_dtoa_r+0x7be>
 8006d44:	4659      	mov	r1, fp
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 ffae 	bl	8007ca8 <__pow5mult>
 8006d4c:	4683      	mov	fp, r0
 8006d4e:	2101      	movs	r1, #1
 8006d50:	4628      	mov	r0, r5
 8006d52:	f000 feeb 	bl	8007b2c <__i2b>
 8006d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d58:	4604      	mov	r4, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f340 8086 	ble.w	8006e6c <_dtoa_r+0x8dc>
 8006d60:	461a      	mov	r2, r3
 8006d62:	4601      	mov	r1, r0
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 ff9f 	bl	8007ca8 <__pow5mult>
 8006d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	dd7f      	ble.n	8006e72 <_dtoa_r+0x8e2>
 8006d72:	f04f 0800 	mov.w	r8, #0
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d7c:	6918      	ldr	r0, [r3, #16]
 8006d7e:	f000 fe87 	bl	8007a90 <__hi0bits>
 8006d82:	f1c0 0020 	rsb	r0, r0, #32
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	4418      	add	r0, r3
 8006d8a:	f010 001f 	ands.w	r0, r0, #31
 8006d8e:	f000 8092 	beq.w	8006eb6 <_dtoa_r+0x926>
 8006d92:	f1c0 0320 	rsb	r3, r0, #32
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	f340 808a 	ble.w	8006eb0 <_dtoa_r+0x920>
 8006d9c:	f1c0 001c 	rsb	r0, r0, #28
 8006da0:	9b06      	ldr	r3, [sp, #24]
 8006da2:	4407      	add	r7, r0
 8006da4:	4403      	add	r3, r0
 8006da6:	9306      	str	r3, [sp, #24]
 8006da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006daa:	4403      	add	r3, r0
 8006dac:	9309      	str	r3, [sp, #36]	; 0x24
 8006dae:	9b06      	ldr	r3, [sp, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	dd05      	ble.n	8006dc0 <_dtoa_r+0x830>
 8006db4:	4659      	mov	r1, fp
 8006db6:	461a      	mov	r2, r3
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 ffcf 	bl	8007d5c <__lshift>
 8006dbe:	4683      	mov	fp, r0
 8006dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dd05      	ble.n	8006dd2 <_dtoa_r+0x842>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f000 ffc6 	bl	8007d5c <__lshift>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d070      	beq.n	8006eba <_dtoa_r+0x92a>
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f001 f82e 	bl	8007e3c <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	da6a      	bge.n	8006eba <_dtoa_r+0x92a>
 8006de4:	2300      	movs	r3, #0
 8006de6:	4659      	mov	r1, fp
 8006de8:	220a      	movs	r2, #10
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 fdc0 	bl	8007970 <__multadd>
 8006df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df2:	4683      	mov	fp, r0
 8006df4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8194 	beq.w	8007126 <_dtoa_r+0xb96>
 8006dfe:	4631      	mov	r1, r6
 8006e00:	2300      	movs	r3, #0
 8006e02:	220a      	movs	r2, #10
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 fdb3 	bl	8007970 <__multadd>
 8006e0a:	f1b9 0f00 	cmp.w	r9, #0
 8006e0e:	4606      	mov	r6, r0
 8006e10:	f300 8093 	bgt.w	8006f3a <_dtoa_r+0x9aa>
 8006e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	dc57      	bgt.n	8006eca <_dtoa_r+0x93a>
 8006e1a:	e08e      	b.n	8006f3a <_dtoa_r+0x9aa>
 8006e1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e22:	e757      	b.n	8006cd4 <_dtoa_r+0x744>
 8006e24:	9b08      	ldr	r3, [sp, #32]
 8006e26:	1e5c      	subs	r4, r3, #1
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	42a3      	cmp	r3, r4
 8006e2c:	bfb7      	itett	lt
 8006e2e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e30:	1b1c      	subge	r4, r3, r4
 8006e32:	1ae2      	sublt	r2, r4, r3
 8006e34:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e36:	bfbe      	ittt	lt
 8006e38:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e3a:	189b      	addlt	r3, r3, r2
 8006e3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	bfb8      	it	lt
 8006e42:	2400      	movlt	r4, #0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bfbb      	ittet	lt
 8006e48:	9b06      	ldrlt	r3, [sp, #24]
 8006e4a:	9a08      	ldrlt	r2, [sp, #32]
 8006e4c:	9f06      	ldrge	r7, [sp, #24]
 8006e4e:	1a9f      	sublt	r7, r3, r2
 8006e50:	bfac      	ite	ge
 8006e52:	9b08      	ldrge	r3, [sp, #32]
 8006e54:	2300      	movlt	r3, #0
 8006e56:	e73f      	b.n	8006cd8 <_dtoa_r+0x748>
 8006e58:	3fe00000 	.word	0x3fe00000
 8006e5c:	40240000 	.word	0x40240000
 8006e60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e62:	9f06      	ldr	r7, [sp, #24]
 8006e64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e66:	e742      	b.n	8006cee <_dtoa_r+0x75e>
 8006e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e6a:	e76b      	b.n	8006d44 <_dtoa_r+0x7b4>
 8006e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	dc19      	bgt.n	8006ea6 <_dtoa_r+0x916>
 8006e72:	9b04      	ldr	r3, [sp, #16]
 8006e74:	b9bb      	cbnz	r3, 8006ea6 <_dtoa_r+0x916>
 8006e76:	9b05      	ldr	r3, [sp, #20]
 8006e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e7c:	b99b      	cbnz	r3, 8006ea6 <_dtoa_r+0x916>
 8006e7e:	9b05      	ldr	r3, [sp, #20]
 8006e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	0d1b      	lsrs	r3, r3, #20
 8006e86:	051b      	lsls	r3, r3, #20
 8006e88:	b183      	cbz	r3, 8006eac <_dtoa_r+0x91c>
 8006e8a:	f04f 0801 	mov.w	r8, #1
 8006e8e:	9b06      	ldr	r3, [sp, #24]
 8006e90:	3301      	adds	r3, #1
 8006e92:	9306      	str	r3, [sp, #24]
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	3301      	adds	r3, #1
 8006e98:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f47f af6a 	bne.w	8006d76 <_dtoa_r+0x7e6>
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	e76f      	b.n	8006d86 <_dtoa_r+0x7f6>
 8006ea6:	f04f 0800 	mov.w	r8, #0
 8006eaa:	e7f6      	b.n	8006e9a <_dtoa_r+0x90a>
 8006eac:	4698      	mov	r8, r3
 8006eae:	e7f4      	b.n	8006e9a <_dtoa_r+0x90a>
 8006eb0:	f43f af7d 	beq.w	8006dae <_dtoa_r+0x81e>
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	301c      	adds	r0, #28
 8006eb8:	e772      	b.n	8006da0 <_dtoa_r+0x810>
 8006eba:	9b08      	ldr	r3, [sp, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dc36      	bgt.n	8006f2e <_dtoa_r+0x99e>
 8006ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	dd33      	ble.n	8006f2e <_dtoa_r+0x99e>
 8006ec6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eca:	f1b9 0f00 	cmp.w	r9, #0
 8006ece:	d10d      	bne.n	8006eec <_dtoa_r+0x95c>
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	2205      	movs	r2, #5
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 fd4a 	bl	8007970 <__multadd>
 8006edc:	4601      	mov	r1, r0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4658      	mov	r0, fp
 8006ee2:	f000 ffab 	bl	8007e3c <__mcmp>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f73f adb8 	bgt.w	8006a5c <_dtoa_r+0x4cc>
 8006eec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006eee:	9f03      	ldr	r7, [sp, #12]
 8006ef0:	ea6f 0a03 	mvn.w	sl, r3
 8006ef4:	f04f 0800 	mov.w	r8, #0
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 fd16 	bl	800792c <_Bfree>
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	f43f aea7 	beq.w	8006c54 <_dtoa_r+0x6c4>
 8006f06:	f1b8 0f00 	cmp.w	r8, #0
 8006f0a:	d005      	beq.n	8006f18 <_dtoa_r+0x988>
 8006f0c:	45b0      	cmp	r8, r6
 8006f0e:	d003      	beq.n	8006f18 <_dtoa_r+0x988>
 8006f10:	4641      	mov	r1, r8
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 fd0a 	bl	800792c <_Bfree>
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 fd06 	bl	800792c <_Bfree>
 8006f20:	e698      	b.n	8006c54 <_dtoa_r+0x6c4>
 8006f22:	2400      	movs	r4, #0
 8006f24:	4626      	mov	r6, r4
 8006f26:	e7e1      	b.n	8006eec <_dtoa_r+0x95c>
 8006f28:	46c2      	mov	sl, r8
 8006f2a:	4626      	mov	r6, r4
 8006f2c:	e596      	b.n	8006a5c <_dtoa_r+0x4cc>
 8006f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80fd 	beq.w	8007134 <_dtoa_r+0xba4>
 8006f3a:	2f00      	cmp	r7, #0
 8006f3c:	dd05      	ble.n	8006f4a <_dtoa_r+0x9ba>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	463a      	mov	r2, r7
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 ff0a 	bl	8007d5c <__lshift>
 8006f48:	4606      	mov	r6, r0
 8006f4a:	f1b8 0f00 	cmp.w	r8, #0
 8006f4e:	d05c      	beq.n	800700a <_dtoa_r+0xa7a>
 8006f50:	4628      	mov	r0, r5
 8006f52:	6871      	ldr	r1, [r6, #4]
 8006f54:	f000 fcaa 	bl	80078ac <_Balloc>
 8006f58:	4607      	mov	r7, r0
 8006f5a:	b928      	cbnz	r0, 8006f68 <_dtoa_r+0x9d8>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f62:	4b7f      	ldr	r3, [pc, #508]	; (8007160 <_dtoa_r+0xbd0>)
 8006f64:	f7ff bb28 	b.w	80065b8 <_dtoa_r+0x28>
 8006f68:	6932      	ldr	r2, [r6, #16]
 8006f6a:	f106 010c 	add.w	r1, r6, #12
 8006f6e:	3202      	adds	r2, #2
 8006f70:	0092      	lsls	r2, r2, #2
 8006f72:	300c      	adds	r0, #12
 8006f74:	f000 fc8c 	bl	8007890 <memcpy>
 8006f78:	2201      	movs	r2, #1
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f000 feed 	bl	8007d5c <__lshift>
 8006f82:	46b0      	mov	r8, r6
 8006f84:	4606      	mov	r6, r0
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	444b      	add	r3, r9
 8006f90:	930a      	str	r3, [sp, #40]	; 0x28
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	4658      	mov	r0, fp
 8006fa2:	9304      	str	r3, [sp, #16]
 8006fa4:	f7ff fa68 	bl	8006478 <quorem>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	4641      	mov	r1, r8
 8006fac:	3330      	adds	r3, #48	; 0x30
 8006fae:	9006      	str	r0, [sp, #24]
 8006fb0:	4658      	mov	r0, fp
 8006fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fb4:	f000 ff42 	bl	8007e3c <__mcmp>
 8006fb8:	4632      	mov	r2, r6
 8006fba:	4681      	mov	r9, r0
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 ff58 	bl	8007e74 <__mdiff>
 8006fc4:	68c2      	ldr	r2, [r0, #12]
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fca:	bb02      	cbnz	r2, 800700e <_dtoa_r+0xa7e>
 8006fcc:	4601      	mov	r1, r0
 8006fce:	4658      	mov	r0, fp
 8006fd0:	f000 ff34 	bl	8007e3c <__mcmp>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd8:	4639      	mov	r1, r7
 8006fda:	4628      	mov	r0, r5
 8006fdc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006fe0:	f000 fca4 	bl	800792c <_Bfree>
 8006fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fe8:	9f08      	ldr	r7, [sp, #32]
 8006fea:	ea43 0102 	orr.w	r1, r3, r2
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff4:	d10d      	bne.n	8007012 <_dtoa_r+0xa82>
 8006ff6:	2b39      	cmp	r3, #57	; 0x39
 8006ff8:	d029      	beq.n	800704e <_dtoa_r+0xabe>
 8006ffa:	f1b9 0f00 	cmp.w	r9, #0
 8006ffe:	dd01      	ble.n	8007004 <_dtoa_r+0xa74>
 8007000:	9b06      	ldr	r3, [sp, #24]
 8007002:	3331      	adds	r3, #49	; 0x31
 8007004:	9a04      	ldr	r2, [sp, #16]
 8007006:	7013      	strb	r3, [r2, #0]
 8007008:	e776      	b.n	8006ef8 <_dtoa_r+0x968>
 800700a:	4630      	mov	r0, r6
 800700c:	e7b9      	b.n	8006f82 <_dtoa_r+0x9f2>
 800700e:	2201      	movs	r2, #1
 8007010:	e7e2      	b.n	8006fd8 <_dtoa_r+0xa48>
 8007012:	f1b9 0f00 	cmp.w	r9, #0
 8007016:	db06      	blt.n	8007026 <_dtoa_r+0xa96>
 8007018:	9922      	ldr	r1, [sp, #136]	; 0x88
 800701a:	ea41 0909 	orr.w	r9, r1, r9
 800701e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007020:	ea59 0101 	orrs.w	r1, r9, r1
 8007024:	d120      	bne.n	8007068 <_dtoa_r+0xad8>
 8007026:	2a00      	cmp	r2, #0
 8007028:	ddec      	ble.n	8007004 <_dtoa_r+0xa74>
 800702a:	4659      	mov	r1, fp
 800702c:	2201      	movs	r2, #1
 800702e:	4628      	mov	r0, r5
 8007030:	9308      	str	r3, [sp, #32]
 8007032:	f000 fe93 	bl	8007d5c <__lshift>
 8007036:	4621      	mov	r1, r4
 8007038:	4683      	mov	fp, r0
 800703a:	f000 feff 	bl	8007e3c <__mcmp>
 800703e:	2800      	cmp	r0, #0
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	dc02      	bgt.n	800704a <_dtoa_r+0xaba>
 8007044:	d1de      	bne.n	8007004 <_dtoa_r+0xa74>
 8007046:	07da      	lsls	r2, r3, #31
 8007048:	d5dc      	bpl.n	8007004 <_dtoa_r+0xa74>
 800704a:	2b39      	cmp	r3, #57	; 0x39
 800704c:	d1d8      	bne.n	8007000 <_dtoa_r+0xa70>
 800704e:	2339      	movs	r3, #57	; 0x39
 8007050:	9a04      	ldr	r2, [sp, #16]
 8007052:	7013      	strb	r3, [r2, #0]
 8007054:	463b      	mov	r3, r7
 8007056:	461f      	mov	r7, r3
 8007058:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800705c:	3b01      	subs	r3, #1
 800705e:	2a39      	cmp	r2, #57	; 0x39
 8007060:	d050      	beq.n	8007104 <_dtoa_r+0xb74>
 8007062:	3201      	adds	r2, #1
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e747      	b.n	8006ef8 <_dtoa_r+0x968>
 8007068:	2a00      	cmp	r2, #0
 800706a:	dd03      	ble.n	8007074 <_dtoa_r+0xae4>
 800706c:	2b39      	cmp	r3, #57	; 0x39
 800706e:	d0ee      	beq.n	800704e <_dtoa_r+0xabe>
 8007070:	3301      	adds	r3, #1
 8007072:	e7c7      	b.n	8007004 <_dtoa_r+0xa74>
 8007074:	9a08      	ldr	r2, [sp, #32]
 8007076:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007078:	f802 3c01 	strb.w	r3, [r2, #-1]
 800707c:	428a      	cmp	r2, r1
 800707e:	d02a      	beq.n	80070d6 <_dtoa_r+0xb46>
 8007080:	4659      	mov	r1, fp
 8007082:	2300      	movs	r3, #0
 8007084:	220a      	movs	r2, #10
 8007086:	4628      	mov	r0, r5
 8007088:	f000 fc72 	bl	8007970 <__multadd>
 800708c:	45b0      	cmp	r8, r6
 800708e:	4683      	mov	fp, r0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	f04f 020a 	mov.w	r2, #10
 8007098:	4641      	mov	r1, r8
 800709a:	4628      	mov	r0, r5
 800709c:	d107      	bne.n	80070ae <_dtoa_r+0xb1e>
 800709e:	f000 fc67 	bl	8007970 <__multadd>
 80070a2:	4680      	mov	r8, r0
 80070a4:	4606      	mov	r6, r0
 80070a6:	9b08      	ldr	r3, [sp, #32]
 80070a8:	3301      	adds	r3, #1
 80070aa:	9308      	str	r3, [sp, #32]
 80070ac:	e775      	b.n	8006f9a <_dtoa_r+0xa0a>
 80070ae:	f000 fc5f 	bl	8007970 <__multadd>
 80070b2:	4631      	mov	r1, r6
 80070b4:	4680      	mov	r8, r0
 80070b6:	2300      	movs	r3, #0
 80070b8:	220a      	movs	r2, #10
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 fc58 	bl	8007970 <__multadd>
 80070c0:	4606      	mov	r6, r0
 80070c2:	e7f0      	b.n	80070a6 <_dtoa_r+0xb16>
 80070c4:	f1b9 0f00 	cmp.w	r9, #0
 80070c8:	bfcc      	ite	gt
 80070ca:	464f      	movgt	r7, r9
 80070cc:	2701      	movle	r7, #1
 80070ce:	f04f 0800 	mov.w	r8, #0
 80070d2:	9a03      	ldr	r2, [sp, #12]
 80070d4:	4417      	add	r7, r2
 80070d6:	4659      	mov	r1, fp
 80070d8:	2201      	movs	r2, #1
 80070da:	4628      	mov	r0, r5
 80070dc:	9308      	str	r3, [sp, #32]
 80070de:	f000 fe3d 	bl	8007d5c <__lshift>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4683      	mov	fp, r0
 80070e6:	f000 fea9 	bl	8007e3c <__mcmp>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	dcb2      	bgt.n	8007054 <_dtoa_r+0xac4>
 80070ee:	d102      	bne.n	80070f6 <_dtoa_r+0xb66>
 80070f0:	9b08      	ldr	r3, [sp, #32]
 80070f2:	07db      	lsls	r3, r3, #31
 80070f4:	d4ae      	bmi.n	8007054 <_dtoa_r+0xac4>
 80070f6:	463b      	mov	r3, r7
 80070f8:	461f      	mov	r7, r3
 80070fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070fe:	2a30      	cmp	r2, #48	; 0x30
 8007100:	d0fa      	beq.n	80070f8 <_dtoa_r+0xb68>
 8007102:	e6f9      	b.n	8006ef8 <_dtoa_r+0x968>
 8007104:	9a03      	ldr	r2, [sp, #12]
 8007106:	429a      	cmp	r2, r3
 8007108:	d1a5      	bne.n	8007056 <_dtoa_r+0xac6>
 800710a:	2331      	movs	r3, #49	; 0x31
 800710c:	f10a 0a01 	add.w	sl, sl, #1
 8007110:	e779      	b.n	8007006 <_dtoa_r+0xa76>
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <_dtoa_r+0xbd4>)
 8007114:	f7ff baa8 	b.w	8006668 <_dtoa_r+0xd8>
 8007118:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800711a:	2b00      	cmp	r3, #0
 800711c:	f47f aa81 	bne.w	8006622 <_dtoa_r+0x92>
 8007120:	4b11      	ldr	r3, [pc, #68]	; (8007168 <_dtoa_r+0xbd8>)
 8007122:	f7ff baa1 	b.w	8006668 <_dtoa_r+0xd8>
 8007126:	f1b9 0f00 	cmp.w	r9, #0
 800712a:	dc03      	bgt.n	8007134 <_dtoa_r+0xba4>
 800712c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800712e:	2b02      	cmp	r3, #2
 8007130:	f73f aecb 	bgt.w	8006eca <_dtoa_r+0x93a>
 8007134:	9f03      	ldr	r7, [sp, #12]
 8007136:	4621      	mov	r1, r4
 8007138:	4658      	mov	r0, fp
 800713a:	f7ff f99d 	bl	8006478 <quorem>
 800713e:	9a03      	ldr	r2, [sp, #12]
 8007140:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007144:	f807 3b01 	strb.w	r3, [r7], #1
 8007148:	1aba      	subs	r2, r7, r2
 800714a:	4591      	cmp	r9, r2
 800714c:	ddba      	ble.n	80070c4 <_dtoa_r+0xb34>
 800714e:	4659      	mov	r1, fp
 8007150:	2300      	movs	r3, #0
 8007152:	220a      	movs	r2, #10
 8007154:	4628      	mov	r0, r5
 8007156:	f000 fc0b 	bl	8007970 <__multadd>
 800715a:	4683      	mov	fp, r0
 800715c:	e7eb      	b.n	8007136 <_dtoa_r+0xba6>
 800715e:	bf00      	nop
 8007160:	08009720 	.word	0x08009720
 8007164:	08009524 	.word	0x08009524
 8007168:	080096a1 	.word	0x080096a1

0800716c <rshift>:
 800716c:	6903      	ldr	r3, [r0, #16]
 800716e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007172:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007176:	f100 0414 	add.w	r4, r0, #20
 800717a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800717e:	dd46      	ble.n	800720e <rshift+0xa2>
 8007180:	f011 011f 	ands.w	r1, r1, #31
 8007184:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007188:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800718c:	d10c      	bne.n	80071a8 <rshift+0x3c>
 800718e:	4629      	mov	r1, r5
 8007190:	f100 0710 	add.w	r7, r0, #16
 8007194:	42b1      	cmp	r1, r6
 8007196:	d335      	bcc.n	8007204 <rshift+0x98>
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	1eea      	subs	r2, r5, #3
 800719e:	4296      	cmp	r6, r2
 80071a0:	bf38      	it	cc
 80071a2:	2300      	movcc	r3, #0
 80071a4:	4423      	add	r3, r4
 80071a6:	e015      	b.n	80071d4 <rshift+0x68>
 80071a8:	46a1      	mov	r9, r4
 80071aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071ae:	f1c1 0820 	rsb	r8, r1, #32
 80071b2:	40cf      	lsrs	r7, r1
 80071b4:	f105 0e04 	add.w	lr, r5, #4
 80071b8:	4576      	cmp	r6, lr
 80071ba:	46f4      	mov	ip, lr
 80071bc:	d816      	bhi.n	80071ec <rshift+0x80>
 80071be:	1a9a      	subs	r2, r3, r2
 80071c0:	0092      	lsls	r2, r2, #2
 80071c2:	3a04      	subs	r2, #4
 80071c4:	3501      	adds	r5, #1
 80071c6:	42ae      	cmp	r6, r5
 80071c8:	bf38      	it	cc
 80071ca:	2200      	movcc	r2, #0
 80071cc:	18a3      	adds	r3, r4, r2
 80071ce:	50a7      	str	r7, [r4, r2]
 80071d0:	b107      	cbz	r7, 80071d4 <rshift+0x68>
 80071d2:	3304      	adds	r3, #4
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	eba3 0204 	sub.w	r2, r3, r4
 80071da:	bf08      	it	eq
 80071dc:	2300      	moveq	r3, #0
 80071de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80071e2:	6102      	str	r2, [r0, #16]
 80071e4:	bf08      	it	eq
 80071e6:	6143      	streq	r3, [r0, #20]
 80071e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ec:	f8dc c000 	ldr.w	ip, [ip]
 80071f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80071f4:	ea4c 0707 	orr.w	r7, ip, r7
 80071f8:	f849 7b04 	str.w	r7, [r9], #4
 80071fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007200:	40cf      	lsrs	r7, r1
 8007202:	e7d9      	b.n	80071b8 <rshift+0x4c>
 8007204:	f851 cb04 	ldr.w	ip, [r1], #4
 8007208:	f847 cf04 	str.w	ip, [r7, #4]!
 800720c:	e7c2      	b.n	8007194 <rshift+0x28>
 800720e:	4623      	mov	r3, r4
 8007210:	e7e0      	b.n	80071d4 <rshift+0x68>

08007212 <__hexdig_fun>:
 8007212:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007216:	2b09      	cmp	r3, #9
 8007218:	d802      	bhi.n	8007220 <__hexdig_fun+0xe>
 800721a:	3820      	subs	r0, #32
 800721c:	b2c0      	uxtb	r0, r0
 800721e:	4770      	bx	lr
 8007220:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007224:	2b05      	cmp	r3, #5
 8007226:	d801      	bhi.n	800722c <__hexdig_fun+0x1a>
 8007228:	3847      	subs	r0, #71	; 0x47
 800722a:	e7f7      	b.n	800721c <__hexdig_fun+0xa>
 800722c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007230:	2b05      	cmp	r3, #5
 8007232:	d801      	bhi.n	8007238 <__hexdig_fun+0x26>
 8007234:	3827      	subs	r0, #39	; 0x27
 8007236:	e7f1      	b.n	800721c <__hexdig_fun+0xa>
 8007238:	2000      	movs	r0, #0
 800723a:	4770      	bx	lr

0800723c <__gethex>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	b08b      	sub	sp, #44	; 0x2c
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	4bb2      	ldr	r3, [pc, #712]	; (8007510 <__gethex+0x2d4>)
 8007246:	9002      	str	r0, [sp, #8]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	468b      	mov	fp, r1
 800724c:	4618      	mov	r0, r3
 800724e:	4690      	mov	r8, r2
 8007250:	9303      	str	r3, [sp, #12]
 8007252:	f7f8 ff7d 	bl	8000150 <strlen>
 8007256:	4682      	mov	sl, r0
 8007258:	9b03      	ldr	r3, [sp, #12]
 800725a:	f8db 2000 	ldr.w	r2, [fp]
 800725e:	4403      	add	r3, r0
 8007260:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007264:	9306      	str	r3, [sp, #24]
 8007266:	1c93      	adds	r3, r2, #2
 8007268:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800726c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007270:	32fe      	adds	r2, #254	; 0xfe
 8007272:	18d1      	adds	r1, r2, r3
 8007274:	461f      	mov	r7, r3
 8007276:	f813 0b01 	ldrb.w	r0, [r3], #1
 800727a:	9101      	str	r1, [sp, #4]
 800727c:	2830      	cmp	r0, #48	; 0x30
 800727e:	d0f8      	beq.n	8007272 <__gethex+0x36>
 8007280:	f7ff ffc7 	bl	8007212 <__hexdig_fun>
 8007284:	4604      	mov	r4, r0
 8007286:	2800      	cmp	r0, #0
 8007288:	d13a      	bne.n	8007300 <__gethex+0xc4>
 800728a:	4652      	mov	r2, sl
 800728c:	4638      	mov	r0, r7
 800728e:	9903      	ldr	r1, [sp, #12]
 8007290:	f001 fa26 	bl	80086e0 <strncmp>
 8007294:	4605      	mov	r5, r0
 8007296:	2800      	cmp	r0, #0
 8007298:	d166      	bne.n	8007368 <__gethex+0x12c>
 800729a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800729e:	eb07 060a 	add.w	r6, r7, sl
 80072a2:	f7ff ffb6 	bl	8007212 <__hexdig_fun>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d060      	beq.n	800736c <__gethex+0x130>
 80072aa:	4633      	mov	r3, r6
 80072ac:	7818      	ldrb	r0, [r3, #0]
 80072ae:	461f      	mov	r7, r3
 80072b0:	2830      	cmp	r0, #48	; 0x30
 80072b2:	f103 0301 	add.w	r3, r3, #1
 80072b6:	d0f9      	beq.n	80072ac <__gethex+0x70>
 80072b8:	f7ff ffab 	bl	8007212 <__hexdig_fun>
 80072bc:	2301      	movs	r3, #1
 80072be:	fab0 f480 	clz	r4, r0
 80072c2:	4635      	mov	r5, r6
 80072c4:	0964      	lsrs	r4, r4, #5
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	463a      	mov	r2, r7
 80072ca:	4616      	mov	r6, r2
 80072cc:	7830      	ldrb	r0, [r6, #0]
 80072ce:	3201      	adds	r2, #1
 80072d0:	f7ff ff9f 	bl	8007212 <__hexdig_fun>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1f8      	bne.n	80072ca <__gethex+0x8e>
 80072d8:	4652      	mov	r2, sl
 80072da:	4630      	mov	r0, r6
 80072dc:	9903      	ldr	r1, [sp, #12]
 80072de:	f001 f9ff 	bl	80086e0 <strncmp>
 80072e2:	b980      	cbnz	r0, 8007306 <__gethex+0xca>
 80072e4:	b94d      	cbnz	r5, 80072fa <__gethex+0xbe>
 80072e6:	eb06 050a 	add.w	r5, r6, sl
 80072ea:	462a      	mov	r2, r5
 80072ec:	4616      	mov	r6, r2
 80072ee:	7830      	ldrb	r0, [r6, #0]
 80072f0:	3201      	adds	r2, #1
 80072f2:	f7ff ff8e 	bl	8007212 <__hexdig_fun>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d1f8      	bne.n	80072ec <__gethex+0xb0>
 80072fa:	1bad      	subs	r5, r5, r6
 80072fc:	00ad      	lsls	r5, r5, #2
 80072fe:	e004      	b.n	800730a <__gethex+0xce>
 8007300:	2400      	movs	r4, #0
 8007302:	4625      	mov	r5, r4
 8007304:	e7e0      	b.n	80072c8 <__gethex+0x8c>
 8007306:	2d00      	cmp	r5, #0
 8007308:	d1f7      	bne.n	80072fa <__gethex+0xbe>
 800730a:	7833      	ldrb	r3, [r6, #0]
 800730c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007310:	2b50      	cmp	r3, #80	; 0x50
 8007312:	d139      	bne.n	8007388 <__gethex+0x14c>
 8007314:	7873      	ldrb	r3, [r6, #1]
 8007316:	2b2b      	cmp	r3, #43	; 0x2b
 8007318:	d02a      	beq.n	8007370 <__gethex+0x134>
 800731a:	2b2d      	cmp	r3, #45	; 0x2d
 800731c:	d02c      	beq.n	8007378 <__gethex+0x13c>
 800731e:	f04f 0900 	mov.w	r9, #0
 8007322:	1c71      	adds	r1, r6, #1
 8007324:	7808      	ldrb	r0, [r1, #0]
 8007326:	f7ff ff74 	bl	8007212 <__hexdig_fun>
 800732a:	1e43      	subs	r3, r0, #1
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b18      	cmp	r3, #24
 8007330:	d82a      	bhi.n	8007388 <__gethex+0x14c>
 8007332:	f1a0 0210 	sub.w	r2, r0, #16
 8007336:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800733a:	f7ff ff6a 	bl	8007212 <__hexdig_fun>
 800733e:	1e43      	subs	r3, r0, #1
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b18      	cmp	r3, #24
 8007344:	d91b      	bls.n	800737e <__gethex+0x142>
 8007346:	f1b9 0f00 	cmp.w	r9, #0
 800734a:	d000      	beq.n	800734e <__gethex+0x112>
 800734c:	4252      	negs	r2, r2
 800734e:	4415      	add	r5, r2
 8007350:	f8cb 1000 	str.w	r1, [fp]
 8007354:	b1d4      	cbz	r4, 800738c <__gethex+0x150>
 8007356:	9b01      	ldr	r3, [sp, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	bf14      	ite	ne
 800735c:	2700      	movne	r7, #0
 800735e:	2706      	moveq	r7, #6
 8007360:	4638      	mov	r0, r7
 8007362:	b00b      	add	sp, #44	; 0x2c
 8007364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007368:	463e      	mov	r6, r7
 800736a:	4625      	mov	r5, r4
 800736c:	2401      	movs	r4, #1
 800736e:	e7cc      	b.n	800730a <__gethex+0xce>
 8007370:	f04f 0900 	mov.w	r9, #0
 8007374:	1cb1      	adds	r1, r6, #2
 8007376:	e7d5      	b.n	8007324 <__gethex+0xe8>
 8007378:	f04f 0901 	mov.w	r9, #1
 800737c:	e7fa      	b.n	8007374 <__gethex+0x138>
 800737e:	230a      	movs	r3, #10
 8007380:	fb03 0202 	mla	r2, r3, r2, r0
 8007384:	3a10      	subs	r2, #16
 8007386:	e7d6      	b.n	8007336 <__gethex+0xfa>
 8007388:	4631      	mov	r1, r6
 800738a:	e7e1      	b.n	8007350 <__gethex+0x114>
 800738c:	4621      	mov	r1, r4
 800738e:	1bf3      	subs	r3, r6, r7
 8007390:	3b01      	subs	r3, #1
 8007392:	2b07      	cmp	r3, #7
 8007394:	dc0a      	bgt.n	80073ac <__gethex+0x170>
 8007396:	9802      	ldr	r0, [sp, #8]
 8007398:	f000 fa88 	bl	80078ac <_Balloc>
 800739c:	4604      	mov	r4, r0
 800739e:	b940      	cbnz	r0, 80073b2 <__gethex+0x176>
 80073a0:	4602      	mov	r2, r0
 80073a2:	21de      	movs	r1, #222	; 0xde
 80073a4:	4b5b      	ldr	r3, [pc, #364]	; (8007514 <__gethex+0x2d8>)
 80073a6:	485c      	ldr	r0, [pc, #368]	; (8007518 <__gethex+0x2dc>)
 80073a8:	f001 f9bc 	bl	8008724 <__assert_func>
 80073ac:	3101      	adds	r1, #1
 80073ae:	105b      	asrs	r3, r3, #1
 80073b0:	e7ef      	b.n	8007392 <__gethex+0x156>
 80073b2:	f04f 0b00 	mov.w	fp, #0
 80073b6:	f100 0914 	add.w	r9, r0, #20
 80073ba:	f1ca 0301 	rsb	r3, sl, #1
 80073be:	f8cd 9010 	str.w	r9, [sp, #16]
 80073c2:	f8cd b004 	str.w	fp, [sp, #4]
 80073c6:	9308      	str	r3, [sp, #32]
 80073c8:	42b7      	cmp	r7, r6
 80073ca:	d33f      	bcc.n	800744c <__gethex+0x210>
 80073cc:	9f04      	ldr	r7, [sp, #16]
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	f847 3b04 	str.w	r3, [r7], #4
 80073d4:	eba7 0709 	sub.w	r7, r7, r9
 80073d8:	10bf      	asrs	r7, r7, #2
 80073da:	6127      	str	r7, [r4, #16]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fb57 	bl	8007a90 <__hi0bits>
 80073e2:	017f      	lsls	r7, r7, #5
 80073e4:	f8d8 6000 	ldr.w	r6, [r8]
 80073e8:	1a3f      	subs	r7, r7, r0
 80073ea:	42b7      	cmp	r7, r6
 80073ec:	dd62      	ble.n	80074b4 <__gethex+0x278>
 80073ee:	1bbf      	subs	r7, r7, r6
 80073f0:	4639      	mov	r1, r7
 80073f2:	4620      	mov	r0, r4
 80073f4:	f000 fef1 	bl	80081da <__any_on>
 80073f8:	4682      	mov	sl, r0
 80073fa:	b1a8      	cbz	r0, 8007428 <__gethex+0x1ec>
 80073fc:	f04f 0a01 	mov.w	sl, #1
 8007400:	1e7b      	subs	r3, r7, #1
 8007402:	1159      	asrs	r1, r3, #5
 8007404:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007408:	f003 021f 	and.w	r2, r3, #31
 800740c:	fa0a f202 	lsl.w	r2, sl, r2
 8007410:	420a      	tst	r2, r1
 8007412:	d009      	beq.n	8007428 <__gethex+0x1ec>
 8007414:	4553      	cmp	r3, sl
 8007416:	dd05      	ble.n	8007424 <__gethex+0x1e8>
 8007418:	4620      	mov	r0, r4
 800741a:	1eb9      	subs	r1, r7, #2
 800741c:	f000 fedd 	bl	80081da <__any_on>
 8007420:	2800      	cmp	r0, #0
 8007422:	d144      	bne.n	80074ae <__gethex+0x272>
 8007424:	f04f 0a02 	mov.w	sl, #2
 8007428:	4639      	mov	r1, r7
 800742a:	4620      	mov	r0, r4
 800742c:	f7ff fe9e 	bl	800716c <rshift>
 8007430:	443d      	add	r5, r7
 8007432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007436:	42ab      	cmp	r3, r5
 8007438:	da4a      	bge.n	80074d0 <__gethex+0x294>
 800743a:	4621      	mov	r1, r4
 800743c:	9802      	ldr	r0, [sp, #8]
 800743e:	f000 fa75 	bl	800792c <_Bfree>
 8007442:	2300      	movs	r3, #0
 8007444:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007446:	27a3      	movs	r7, #163	; 0xa3
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e789      	b.n	8007360 <__gethex+0x124>
 800744c:	1e73      	subs	r3, r6, #1
 800744e:	9a06      	ldr	r2, [sp, #24]
 8007450:	9307      	str	r3, [sp, #28]
 8007452:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007456:	4293      	cmp	r3, r2
 8007458:	d019      	beq.n	800748e <__gethex+0x252>
 800745a:	f1bb 0f20 	cmp.w	fp, #32
 800745e:	d107      	bne.n	8007470 <__gethex+0x234>
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	9a01      	ldr	r2, [sp, #4]
 8007464:	f843 2b04 	str.w	r2, [r3], #4
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	2300      	movs	r3, #0
 800746c:	469b      	mov	fp, r3
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007474:	f7ff fecd 	bl	8007212 <__hexdig_fun>
 8007478:	9b01      	ldr	r3, [sp, #4]
 800747a:	f000 000f 	and.w	r0, r0, #15
 800747e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007482:	4303      	orrs	r3, r0
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	f10b 0b04 	add.w	fp, fp, #4
 800748a:	9b07      	ldr	r3, [sp, #28]
 800748c:	e00d      	b.n	80074aa <__gethex+0x26e>
 800748e:	9a08      	ldr	r2, [sp, #32]
 8007490:	1e73      	subs	r3, r6, #1
 8007492:	4413      	add	r3, r2
 8007494:	42bb      	cmp	r3, r7
 8007496:	d3e0      	bcc.n	800745a <__gethex+0x21e>
 8007498:	4618      	mov	r0, r3
 800749a:	4652      	mov	r2, sl
 800749c:	9903      	ldr	r1, [sp, #12]
 800749e:	9309      	str	r3, [sp, #36]	; 0x24
 80074a0:	f001 f91e 	bl	80086e0 <strncmp>
 80074a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d1d7      	bne.n	800745a <__gethex+0x21e>
 80074aa:	461e      	mov	r6, r3
 80074ac:	e78c      	b.n	80073c8 <__gethex+0x18c>
 80074ae:	f04f 0a03 	mov.w	sl, #3
 80074b2:	e7b9      	b.n	8007428 <__gethex+0x1ec>
 80074b4:	da09      	bge.n	80074ca <__gethex+0x28e>
 80074b6:	1bf7      	subs	r7, r6, r7
 80074b8:	4621      	mov	r1, r4
 80074ba:	463a      	mov	r2, r7
 80074bc:	9802      	ldr	r0, [sp, #8]
 80074be:	f000 fc4d 	bl	8007d5c <__lshift>
 80074c2:	4604      	mov	r4, r0
 80074c4:	1bed      	subs	r5, r5, r7
 80074c6:	f100 0914 	add.w	r9, r0, #20
 80074ca:	f04f 0a00 	mov.w	sl, #0
 80074ce:	e7b0      	b.n	8007432 <__gethex+0x1f6>
 80074d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074d4:	42a8      	cmp	r0, r5
 80074d6:	dd72      	ble.n	80075be <__gethex+0x382>
 80074d8:	1b45      	subs	r5, r0, r5
 80074da:	42ae      	cmp	r6, r5
 80074dc:	dc35      	bgt.n	800754a <__gethex+0x30e>
 80074de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d029      	beq.n	800753a <__gethex+0x2fe>
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d02b      	beq.n	8007542 <__gethex+0x306>
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d11c      	bne.n	8007528 <__gethex+0x2ec>
 80074ee:	42ae      	cmp	r6, r5
 80074f0:	d11a      	bne.n	8007528 <__gethex+0x2ec>
 80074f2:	2e01      	cmp	r6, #1
 80074f4:	d112      	bne.n	800751c <__gethex+0x2e0>
 80074f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80074fa:	9a05      	ldr	r2, [sp, #20]
 80074fc:	2762      	movs	r7, #98	; 0x62
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	2301      	movs	r3, #1
 8007502:	6123      	str	r3, [r4, #16]
 8007504:	f8c9 3000 	str.w	r3, [r9]
 8007508:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800750a:	601c      	str	r4, [r3, #0]
 800750c:	e728      	b.n	8007360 <__gethex+0x124>
 800750e:	bf00      	nop
 8007510:	08009798 	.word	0x08009798
 8007514:	08009720 	.word	0x08009720
 8007518:	08009731 	.word	0x08009731
 800751c:	4620      	mov	r0, r4
 800751e:	1e71      	subs	r1, r6, #1
 8007520:	f000 fe5b 	bl	80081da <__any_on>
 8007524:	2800      	cmp	r0, #0
 8007526:	d1e6      	bne.n	80074f6 <__gethex+0x2ba>
 8007528:	4621      	mov	r1, r4
 800752a:	9802      	ldr	r0, [sp, #8]
 800752c:	f000 f9fe 	bl	800792c <_Bfree>
 8007530:	2300      	movs	r3, #0
 8007532:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007534:	2750      	movs	r7, #80	; 0x50
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	e712      	b.n	8007360 <__gethex+0x124>
 800753a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f3      	bne.n	8007528 <__gethex+0x2ec>
 8007540:	e7d9      	b.n	80074f6 <__gethex+0x2ba>
 8007542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1d6      	bne.n	80074f6 <__gethex+0x2ba>
 8007548:	e7ee      	b.n	8007528 <__gethex+0x2ec>
 800754a:	1e6f      	subs	r7, r5, #1
 800754c:	f1ba 0f00 	cmp.w	sl, #0
 8007550:	d132      	bne.n	80075b8 <__gethex+0x37c>
 8007552:	b127      	cbz	r7, 800755e <__gethex+0x322>
 8007554:	4639      	mov	r1, r7
 8007556:	4620      	mov	r0, r4
 8007558:	f000 fe3f 	bl	80081da <__any_on>
 800755c:	4682      	mov	sl, r0
 800755e:	2101      	movs	r1, #1
 8007560:	117b      	asrs	r3, r7, #5
 8007562:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007566:	f007 071f 	and.w	r7, r7, #31
 800756a:	fa01 f707 	lsl.w	r7, r1, r7
 800756e:	421f      	tst	r7, r3
 8007570:	f04f 0702 	mov.w	r7, #2
 8007574:	4629      	mov	r1, r5
 8007576:	4620      	mov	r0, r4
 8007578:	bf18      	it	ne
 800757a:	f04a 0a02 	orrne.w	sl, sl, #2
 800757e:	1b76      	subs	r6, r6, r5
 8007580:	f7ff fdf4 	bl	800716c <rshift>
 8007584:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007588:	f1ba 0f00 	cmp.w	sl, #0
 800758c:	d048      	beq.n	8007620 <__gethex+0x3e4>
 800758e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d015      	beq.n	80075c2 <__gethex+0x386>
 8007596:	2b03      	cmp	r3, #3
 8007598:	d017      	beq.n	80075ca <__gethex+0x38e>
 800759a:	2b01      	cmp	r3, #1
 800759c:	d109      	bne.n	80075b2 <__gethex+0x376>
 800759e:	f01a 0f02 	tst.w	sl, #2
 80075a2:	d006      	beq.n	80075b2 <__gethex+0x376>
 80075a4:	f8d9 0000 	ldr.w	r0, [r9]
 80075a8:	ea4a 0a00 	orr.w	sl, sl, r0
 80075ac:	f01a 0f01 	tst.w	sl, #1
 80075b0:	d10e      	bne.n	80075d0 <__gethex+0x394>
 80075b2:	f047 0710 	orr.w	r7, r7, #16
 80075b6:	e033      	b.n	8007620 <__gethex+0x3e4>
 80075b8:	f04f 0a01 	mov.w	sl, #1
 80075bc:	e7cf      	b.n	800755e <__gethex+0x322>
 80075be:	2701      	movs	r7, #1
 80075c0:	e7e2      	b.n	8007588 <__gethex+0x34c>
 80075c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075c4:	f1c3 0301 	rsb	r3, r3, #1
 80075c8:	9315      	str	r3, [sp, #84]	; 0x54
 80075ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f0      	beq.n	80075b2 <__gethex+0x376>
 80075d0:	f04f 0c00 	mov.w	ip, #0
 80075d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80075d8:	f104 0314 	add.w	r3, r4, #20
 80075dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80075e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 80075ee:	d01c      	beq.n	800762a <__gethex+0x3ee>
 80075f0:	3201      	adds	r2, #1
 80075f2:	6002      	str	r2, [r0, #0]
 80075f4:	2f02      	cmp	r7, #2
 80075f6:	f104 0314 	add.w	r3, r4, #20
 80075fa:	d13d      	bne.n	8007678 <__gethex+0x43c>
 80075fc:	f8d8 2000 	ldr.w	r2, [r8]
 8007600:	3a01      	subs	r2, #1
 8007602:	42b2      	cmp	r2, r6
 8007604:	d10a      	bne.n	800761c <__gethex+0x3e0>
 8007606:	2201      	movs	r2, #1
 8007608:	1171      	asrs	r1, r6, #5
 800760a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800760e:	f006 061f 	and.w	r6, r6, #31
 8007612:	fa02 f606 	lsl.w	r6, r2, r6
 8007616:	421e      	tst	r6, r3
 8007618:	bf18      	it	ne
 800761a:	4617      	movne	r7, r2
 800761c:	f047 0720 	orr.w	r7, r7, #32
 8007620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007622:	601c      	str	r4, [r3, #0]
 8007624:	9b05      	ldr	r3, [sp, #20]
 8007626:	601d      	str	r5, [r3, #0]
 8007628:	e69a      	b.n	8007360 <__gethex+0x124>
 800762a:	4299      	cmp	r1, r3
 800762c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007630:	d8d8      	bhi.n	80075e4 <__gethex+0x3a8>
 8007632:	68a3      	ldr	r3, [r4, #8]
 8007634:	459b      	cmp	fp, r3
 8007636:	db17      	blt.n	8007668 <__gethex+0x42c>
 8007638:	6861      	ldr	r1, [r4, #4]
 800763a:	9802      	ldr	r0, [sp, #8]
 800763c:	3101      	adds	r1, #1
 800763e:	f000 f935 	bl	80078ac <_Balloc>
 8007642:	4681      	mov	r9, r0
 8007644:	b918      	cbnz	r0, 800764e <__gethex+0x412>
 8007646:	4602      	mov	r2, r0
 8007648:	2184      	movs	r1, #132	; 0x84
 800764a:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <__gethex+0x474>)
 800764c:	e6ab      	b.n	80073a6 <__gethex+0x16a>
 800764e:	6922      	ldr	r2, [r4, #16]
 8007650:	f104 010c 	add.w	r1, r4, #12
 8007654:	3202      	adds	r2, #2
 8007656:	0092      	lsls	r2, r2, #2
 8007658:	300c      	adds	r0, #12
 800765a:	f000 f919 	bl	8007890 <memcpy>
 800765e:	4621      	mov	r1, r4
 8007660:	9802      	ldr	r0, [sp, #8]
 8007662:	f000 f963 	bl	800792c <_Bfree>
 8007666:	464c      	mov	r4, r9
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	6122      	str	r2, [r4, #16]
 800766e:	2201      	movs	r2, #1
 8007670:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007674:	615a      	str	r2, [r3, #20]
 8007676:	e7bd      	b.n	80075f4 <__gethex+0x3b8>
 8007678:	6922      	ldr	r2, [r4, #16]
 800767a:	455a      	cmp	r2, fp
 800767c:	dd0b      	ble.n	8007696 <__gethex+0x45a>
 800767e:	2101      	movs	r1, #1
 8007680:	4620      	mov	r0, r4
 8007682:	f7ff fd73 	bl	800716c <rshift>
 8007686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800768a:	3501      	adds	r5, #1
 800768c:	42ab      	cmp	r3, r5
 800768e:	f6ff aed4 	blt.w	800743a <__gethex+0x1fe>
 8007692:	2701      	movs	r7, #1
 8007694:	e7c2      	b.n	800761c <__gethex+0x3e0>
 8007696:	f016 061f 	ands.w	r6, r6, #31
 800769a:	d0fa      	beq.n	8007692 <__gethex+0x456>
 800769c:	4453      	add	r3, sl
 800769e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80076a2:	f000 f9f5 	bl	8007a90 <__hi0bits>
 80076a6:	f1c6 0620 	rsb	r6, r6, #32
 80076aa:	42b0      	cmp	r0, r6
 80076ac:	dbe7      	blt.n	800767e <__gethex+0x442>
 80076ae:	e7f0      	b.n	8007692 <__gethex+0x456>
 80076b0:	08009720 	.word	0x08009720

080076b4 <L_shift>:
 80076b4:	f1c2 0208 	rsb	r2, r2, #8
 80076b8:	0092      	lsls	r2, r2, #2
 80076ba:	b570      	push	{r4, r5, r6, lr}
 80076bc:	f1c2 0620 	rsb	r6, r2, #32
 80076c0:	6843      	ldr	r3, [r0, #4]
 80076c2:	6804      	ldr	r4, [r0, #0]
 80076c4:	fa03 f506 	lsl.w	r5, r3, r6
 80076c8:	432c      	orrs	r4, r5
 80076ca:	40d3      	lsrs	r3, r2
 80076cc:	6004      	str	r4, [r0, #0]
 80076ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80076d2:	4288      	cmp	r0, r1
 80076d4:	d3f4      	bcc.n	80076c0 <L_shift+0xc>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}

080076d8 <__match>:
 80076d8:	b530      	push	{r4, r5, lr}
 80076da:	6803      	ldr	r3, [r0, #0]
 80076dc:	3301      	adds	r3, #1
 80076de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e2:	b914      	cbnz	r4, 80076ea <__match+0x12>
 80076e4:	6003      	str	r3, [r0, #0]
 80076e6:	2001      	movs	r0, #1
 80076e8:	bd30      	pop	{r4, r5, pc}
 80076ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80076f2:	2d19      	cmp	r5, #25
 80076f4:	bf98      	it	ls
 80076f6:	3220      	addls	r2, #32
 80076f8:	42a2      	cmp	r2, r4
 80076fa:	d0f0      	beq.n	80076de <__match+0x6>
 80076fc:	2000      	movs	r0, #0
 80076fe:	e7f3      	b.n	80076e8 <__match+0x10>

08007700 <__hexnan>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	2500      	movs	r5, #0
 8007706:	680b      	ldr	r3, [r1, #0]
 8007708:	4682      	mov	sl, r0
 800770a:	115e      	asrs	r6, r3, #5
 800770c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007710:	f013 031f 	ands.w	r3, r3, #31
 8007714:	bf18      	it	ne
 8007716:	3604      	addne	r6, #4
 8007718:	1f37      	subs	r7, r6, #4
 800771a:	46b9      	mov	r9, r7
 800771c:	463c      	mov	r4, r7
 800771e:	46ab      	mov	fp, r5
 8007720:	b087      	sub	sp, #28
 8007722:	4690      	mov	r8, r2
 8007724:	6802      	ldr	r2, [r0, #0]
 8007726:	9301      	str	r3, [sp, #4]
 8007728:	f846 5c04 	str.w	r5, [r6, #-4]
 800772c:	9502      	str	r5, [sp, #8]
 800772e:	7851      	ldrb	r1, [r2, #1]
 8007730:	1c53      	adds	r3, r2, #1
 8007732:	9303      	str	r3, [sp, #12]
 8007734:	b341      	cbz	r1, 8007788 <__hexnan+0x88>
 8007736:	4608      	mov	r0, r1
 8007738:	9205      	str	r2, [sp, #20]
 800773a:	9104      	str	r1, [sp, #16]
 800773c:	f7ff fd69 	bl	8007212 <__hexdig_fun>
 8007740:	2800      	cmp	r0, #0
 8007742:	d14f      	bne.n	80077e4 <__hexnan+0xe4>
 8007744:	9904      	ldr	r1, [sp, #16]
 8007746:	9a05      	ldr	r2, [sp, #20]
 8007748:	2920      	cmp	r1, #32
 800774a:	d818      	bhi.n	800777e <__hexnan+0x7e>
 800774c:	9b02      	ldr	r3, [sp, #8]
 800774e:	459b      	cmp	fp, r3
 8007750:	dd13      	ble.n	800777a <__hexnan+0x7a>
 8007752:	454c      	cmp	r4, r9
 8007754:	d206      	bcs.n	8007764 <__hexnan+0x64>
 8007756:	2d07      	cmp	r5, #7
 8007758:	dc04      	bgt.n	8007764 <__hexnan+0x64>
 800775a:	462a      	mov	r2, r5
 800775c:	4649      	mov	r1, r9
 800775e:	4620      	mov	r0, r4
 8007760:	f7ff ffa8 	bl	80076b4 <L_shift>
 8007764:	4544      	cmp	r4, r8
 8007766:	d950      	bls.n	800780a <__hexnan+0x10a>
 8007768:	2300      	movs	r3, #0
 800776a:	f1a4 0904 	sub.w	r9, r4, #4
 800776e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007772:	461d      	mov	r5, r3
 8007774:	464c      	mov	r4, r9
 8007776:	f8cd b008 	str.w	fp, [sp, #8]
 800777a:	9a03      	ldr	r2, [sp, #12]
 800777c:	e7d7      	b.n	800772e <__hexnan+0x2e>
 800777e:	2929      	cmp	r1, #41	; 0x29
 8007780:	d156      	bne.n	8007830 <__hexnan+0x130>
 8007782:	3202      	adds	r2, #2
 8007784:	f8ca 2000 	str.w	r2, [sl]
 8007788:	f1bb 0f00 	cmp.w	fp, #0
 800778c:	d050      	beq.n	8007830 <__hexnan+0x130>
 800778e:	454c      	cmp	r4, r9
 8007790:	d206      	bcs.n	80077a0 <__hexnan+0xa0>
 8007792:	2d07      	cmp	r5, #7
 8007794:	dc04      	bgt.n	80077a0 <__hexnan+0xa0>
 8007796:	462a      	mov	r2, r5
 8007798:	4649      	mov	r1, r9
 800779a:	4620      	mov	r0, r4
 800779c:	f7ff ff8a 	bl	80076b4 <L_shift>
 80077a0:	4544      	cmp	r4, r8
 80077a2:	d934      	bls.n	800780e <__hexnan+0x10e>
 80077a4:	4623      	mov	r3, r4
 80077a6:	f1a8 0204 	sub.w	r2, r8, #4
 80077aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80077ae:	429f      	cmp	r7, r3
 80077b0:	f842 1f04 	str.w	r1, [r2, #4]!
 80077b4:	d2f9      	bcs.n	80077aa <__hexnan+0xaa>
 80077b6:	1b3b      	subs	r3, r7, r4
 80077b8:	f023 0303 	bic.w	r3, r3, #3
 80077bc:	3304      	adds	r3, #4
 80077be:	3401      	adds	r4, #1
 80077c0:	3e03      	subs	r6, #3
 80077c2:	42b4      	cmp	r4, r6
 80077c4:	bf88      	it	hi
 80077c6:	2304      	movhi	r3, #4
 80077c8:	2200      	movs	r2, #0
 80077ca:	4443      	add	r3, r8
 80077cc:	f843 2b04 	str.w	r2, [r3], #4
 80077d0:	429f      	cmp	r7, r3
 80077d2:	d2fb      	bcs.n	80077cc <__hexnan+0xcc>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	b91b      	cbnz	r3, 80077e0 <__hexnan+0xe0>
 80077d8:	4547      	cmp	r7, r8
 80077da:	d127      	bne.n	800782c <__hexnan+0x12c>
 80077dc:	2301      	movs	r3, #1
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	2005      	movs	r0, #5
 80077e2:	e026      	b.n	8007832 <__hexnan+0x132>
 80077e4:	3501      	adds	r5, #1
 80077e6:	2d08      	cmp	r5, #8
 80077e8:	f10b 0b01 	add.w	fp, fp, #1
 80077ec:	dd06      	ble.n	80077fc <__hexnan+0xfc>
 80077ee:	4544      	cmp	r4, r8
 80077f0:	d9c3      	bls.n	800777a <__hexnan+0x7a>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2501      	movs	r5, #1
 80077f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80077fa:	3c04      	subs	r4, #4
 80077fc:	6822      	ldr	r2, [r4, #0]
 80077fe:	f000 000f 	and.w	r0, r0, #15
 8007802:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007806:	6022      	str	r2, [r4, #0]
 8007808:	e7b7      	b.n	800777a <__hexnan+0x7a>
 800780a:	2508      	movs	r5, #8
 800780c:	e7b5      	b.n	800777a <__hexnan+0x7a>
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0df      	beq.n	80077d4 <__hexnan+0xd4>
 8007814:	f04f 32ff 	mov.w	r2, #4294967295
 8007818:	f1c3 0320 	rsb	r3, r3, #32
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
 8007820:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007824:	401a      	ands	r2, r3
 8007826:	f846 2c04 	str.w	r2, [r6, #-4]
 800782a:	e7d3      	b.n	80077d4 <__hexnan+0xd4>
 800782c:	3f04      	subs	r7, #4
 800782e:	e7d1      	b.n	80077d4 <__hexnan+0xd4>
 8007830:	2004      	movs	r0, #4
 8007832:	b007      	add	sp, #28
 8007834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007838 <_localeconv_r>:
 8007838:	4800      	ldr	r0, [pc, #0]	; (800783c <_localeconv_r+0x4>)
 800783a:	4770      	bx	lr
 800783c:	20000164 	.word	0x20000164

08007840 <malloc>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <malloc+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f000 bd65 	b.w	8008314 <_malloc_r>
 800784a:	bf00      	nop
 800784c:	2000000c 	.word	0x2000000c

08007850 <__ascii_mbtowc>:
 8007850:	b082      	sub	sp, #8
 8007852:	b901      	cbnz	r1, 8007856 <__ascii_mbtowc+0x6>
 8007854:	a901      	add	r1, sp, #4
 8007856:	b142      	cbz	r2, 800786a <__ascii_mbtowc+0x1a>
 8007858:	b14b      	cbz	r3, 800786e <__ascii_mbtowc+0x1e>
 800785a:	7813      	ldrb	r3, [r2, #0]
 800785c:	600b      	str	r3, [r1, #0]
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	1e10      	subs	r0, r2, #0
 8007862:	bf18      	it	ne
 8007864:	2001      	movne	r0, #1
 8007866:	b002      	add	sp, #8
 8007868:	4770      	bx	lr
 800786a:	4610      	mov	r0, r2
 800786c:	e7fb      	b.n	8007866 <__ascii_mbtowc+0x16>
 800786e:	f06f 0001 	mvn.w	r0, #1
 8007872:	e7f8      	b.n	8007866 <__ascii_mbtowc+0x16>

08007874 <memchr>:
 8007874:	4603      	mov	r3, r0
 8007876:	b510      	push	{r4, lr}
 8007878:	b2c9      	uxtb	r1, r1
 800787a:	4402      	add	r2, r0
 800787c:	4293      	cmp	r3, r2
 800787e:	4618      	mov	r0, r3
 8007880:	d101      	bne.n	8007886 <memchr+0x12>
 8007882:	2000      	movs	r0, #0
 8007884:	e003      	b.n	800788e <memchr+0x1a>
 8007886:	7804      	ldrb	r4, [r0, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	428c      	cmp	r4, r1
 800788c:	d1f6      	bne.n	800787c <memchr+0x8>
 800788e:	bd10      	pop	{r4, pc}

08007890 <memcpy>:
 8007890:	440a      	add	r2, r1
 8007892:	4291      	cmp	r1, r2
 8007894:	f100 33ff 	add.w	r3, r0, #4294967295
 8007898:	d100      	bne.n	800789c <memcpy+0xc>
 800789a:	4770      	bx	lr
 800789c:	b510      	push	{r4, lr}
 800789e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a2:	4291      	cmp	r1, r2
 80078a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078a8:	d1f9      	bne.n	800789e <memcpy+0xe>
 80078aa:	bd10      	pop	{r4, pc}

080078ac <_Balloc>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078b0:	4604      	mov	r4, r0
 80078b2:	460d      	mov	r5, r1
 80078b4:	b976      	cbnz	r6, 80078d4 <_Balloc+0x28>
 80078b6:	2010      	movs	r0, #16
 80078b8:	f7ff ffc2 	bl	8007840 <malloc>
 80078bc:	4602      	mov	r2, r0
 80078be:	6260      	str	r0, [r4, #36]	; 0x24
 80078c0:	b920      	cbnz	r0, 80078cc <_Balloc+0x20>
 80078c2:	2166      	movs	r1, #102	; 0x66
 80078c4:	4b17      	ldr	r3, [pc, #92]	; (8007924 <_Balloc+0x78>)
 80078c6:	4818      	ldr	r0, [pc, #96]	; (8007928 <_Balloc+0x7c>)
 80078c8:	f000 ff2c 	bl	8008724 <__assert_func>
 80078cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078d0:	6006      	str	r6, [r0, #0]
 80078d2:	60c6      	str	r6, [r0, #12]
 80078d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078d6:	68f3      	ldr	r3, [r6, #12]
 80078d8:	b183      	cbz	r3, 80078fc <_Balloc+0x50>
 80078da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078e2:	b9b8      	cbnz	r0, 8007914 <_Balloc+0x68>
 80078e4:	2101      	movs	r1, #1
 80078e6:	fa01 f605 	lsl.w	r6, r1, r5
 80078ea:	1d72      	adds	r2, r6, #5
 80078ec:	4620      	mov	r0, r4
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	f000 fc94 	bl	800821c <_calloc_r>
 80078f4:	b160      	cbz	r0, 8007910 <_Balloc+0x64>
 80078f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078fa:	e00e      	b.n	800791a <_Balloc+0x6e>
 80078fc:	2221      	movs	r2, #33	; 0x21
 80078fe:	2104      	movs	r1, #4
 8007900:	4620      	mov	r0, r4
 8007902:	f000 fc8b 	bl	800821c <_calloc_r>
 8007906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007908:	60f0      	str	r0, [r6, #12]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e4      	bne.n	80078da <_Balloc+0x2e>
 8007910:	2000      	movs	r0, #0
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	6802      	ldr	r2, [r0, #0]
 8007916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800791a:	2300      	movs	r3, #0
 800791c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007920:	e7f7      	b.n	8007912 <_Balloc+0x66>
 8007922:	bf00      	nop
 8007924:	080096ae 	.word	0x080096ae
 8007928:	080097ac 	.word	0x080097ac

0800792c <_Bfree>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	b976      	cbnz	r6, 8007954 <_Bfree+0x28>
 8007936:	2010      	movs	r0, #16
 8007938:	f7ff ff82 	bl	8007840 <malloc>
 800793c:	4602      	mov	r2, r0
 800793e:	6268      	str	r0, [r5, #36]	; 0x24
 8007940:	b920      	cbnz	r0, 800794c <_Bfree+0x20>
 8007942:	218a      	movs	r1, #138	; 0x8a
 8007944:	4b08      	ldr	r3, [pc, #32]	; (8007968 <_Bfree+0x3c>)
 8007946:	4809      	ldr	r0, [pc, #36]	; (800796c <_Bfree+0x40>)
 8007948:	f000 feec 	bl	8008724 <__assert_func>
 800794c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007950:	6006      	str	r6, [r0, #0]
 8007952:	60c6      	str	r6, [r0, #12]
 8007954:	b13c      	cbz	r4, 8007966 <_Bfree+0x3a>
 8007956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007958:	6862      	ldr	r2, [r4, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007960:	6021      	str	r1, [r4, #0]
 8007962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	080096ae 	.word	0x080096ae
 800796c:	080097ac 	.word	0x080097ac

08007970 <__multadd>:
 8007970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007974:	4607      	mov	r7, r0
 8007976:	460c      	mov	r4, r1
 8007978:	461e      	mov	r6, r3
 800797a:	2000      	movs	r0, #0
 800797c:	690d      	ldr	r5, [r1, #16]
 800797e:	f101 0c14 	add.w	ip, r1, #20
 8007982:	f8dc 3000 	ldr.w	r3, [ip]
 8007986:	3001      	adds	r0, #1
 8007988:	b299      	uxth	r1, r3
 800798a:	fb02 6101 	mla	r1, r2, r1, r6
 800798e:	0c1e      	lsrs	r6, r3, #16
 8007990:	0c0b      	lsrs	r3, r1, #16
 8007992:	fb02 3306 	mla	r3, r2, r6, r3
 8007996:	b289      	uxth	r1, r1
 8007998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800799c:	4285      	cmp	r5, r0
 800799e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079a2:	f84c 1b04 	str.w	r1, [ip], #4
 80079a6:	dcec      	bgt.n	8007982 <__multadd+0x12>
 80079a8:	b30e      	cbz	r6, 80079ee <__multadd+0x7e>
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	42ab      	cmp	r3, r5
 80079ae:	dc19      	bgt.n	80079e4 <__multadd+0x74>
 80079b0:	6861      	ldr	r1, [r4, #4]
 80079b2:	4638      	mov	r0, r7
 80079b4:	3101      	adds	r1, #1
 80079b6:	f7ff ff79 	bl	80078ac <_Balloc>
 80079ba:	4680      	mov	r8, r0
 80079bc:	b928      	cbnz	r0, 80079ca <__multadd+0x5a>
 80079be:	4602      	mov	r2, r0
 80079c0:	21b5      	movs	r1, #181	; 0xb5
 80079c2:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <__multadd+0x84>)
 80079c4:	480c      	ldr	r0, [pc, #48]	; (80079f8 <__multadd+0x88>)
 80079c6:	f000 fead 	bl	8008724 <__assert_func>
 80079ca:	6922      	ldr	r2, [r4, #16]
 80079cc:	f104 010c 	add.w	r1, r4, #12
 80079d0:	3202      	adds	r2, #2
 80079d2:	0092      	lsls	r2, r2, #2
 80079d4:	300c      	adds	r0, #12
 80079d6:	f7ff ff5b 	bl	8007890 <memcpy>
 80079da:	4621      	mov	r1, r4
 80079dc:	4638      	mov	r0, r7
 80079de:	f7ff ffa5 	bl	800792c <_Bfree>
 80079e2:	4644      	mov	r4, r8
 80079e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079e8:	3501      	adds	r5, #1
 80079ea:	615e      	str	r6, [r3, #20]
 80079ec:	6125      	str	r5, [r4, #16]
 80079ee:	4620      	mov	r0, r4
 80079f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f4:	08009720 	.word	0x08009720
 80079f8:	080097ac 	.word	0x080097ac

080079fc <__s2b>:
 80079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	4615      	mov	r5, r2
 8007a02:	2209      	movs	r2, #9
 8007a04:	461f      	mov	r7, r3
 8007a06:	3308      	adds	r3, #8
 8007a08:	460c      	mov	r4, r1
 8007a0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a0e:	4606      	mov	r6, r0
 8007a10:	2201      	movs	r2, #1
 8007a12:	2100      	movs	r1, #0
 8007a14:	429a      	cmp	r2, r3
 8007a16:	db09      	blt.n	8007a2c <__s2b+0x30>
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f7ff ff47 	bl	80078ac <_Balloc>
 8007a1e:	b940      	cbnz	r0, 8007a32 <__s2b+0x36>
 8007a20:	4602      	mov	r2, r0
 8007a22:	21ce      	movs	r1, #206	; 0xce
 8007a24:	4b18      	ldr	r3, [pc, #96]	; (8007a88 <__s2b+0x8c>)
 8007a26:	4819      	ldr	r0, [pc, #100]	; (8007a8c <__s2b+0x90>)
 8007a28:	f000 fe7c 	bl	8008724 <__assert_func>
 8007a2c:	0052      	lsls	r2, r2, #1
 8007a2e:	3101      	adds	r1, #1
 8007a30:	e7f0      	b.n	8007a14 <__s2b+0x18>
 8007a32:	9b08      	ldr	r3, [sp, #32]
 8007a34:	2d09      	cmp	r5, #9
 8007a36:	6143      	str	r3, [r0, #20]
 8007a38:	f04f 0301 	mov.w	r3, #1
 8007a3c:	6103      	str	r3, [r0, #16]
 8007a3e:	dd16      	ble.n	8007a6e <__s2b+0x72>
 8007a40:	f104 0909 	add.w	r9, r4, #9
 8007a44:	46c8      	mov	r8, r9
 8007a46:	442c      	add	r4, r5
 8007a48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a4c:	4601      	mov	r1, r0
 8007a4e:	220a      	movs	r2, #10
 8007a50:	4630      	mov	r0, r6
 8007a52:	3b30      	subs	r3, #48	; 0x30
 8007a54:	f7ff ff8c 	bl	8007970 <__multadd>
 8007a58:	45a0      	cmp	r8, r4
 8007a5a:	d1f5      	bne.n	8007a48 <__s2b+0x4c>
 8007a5c:	f1a5 0408 	sub.w	r4, r5, #8
 8007a60:	444c      	add	r4, r9
 8007a62:	1b2d      	subs	r5, r5, r4
 8007a64:	1963      	adds	r3, r4, r5
 8007a66:	42bb      	cmp	r3, r7
 8007a68:	db04      	blt.n	8007a74 <__s2b+0x78>
 8007a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6e:	2509      	movs	r5, #9
 8007a70:	340a      	adds	r4, #10
 8007a72:	e7f6      	b.n	8007a62 <__s2b+0x66>
 8007a74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a78:	4601      	mov	r1, r0
 8007a7a:	220a      	movs	r2, #10
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	3b30      	subs	r3, #48	; 0x30
 8007a80:	f7ff ff76 	bl	8007970 <__multadd>
 8007a84:	e7ee      	b.n	8007a64 <__s2b+0x68>
 8007a86:	bf00      	nop
 8007a88:	08009720 	.word	0x08009720
 8007a8c:	080097ac 	.word	0x080097ac

08007a90 <__hi0bits>:
 8007a90:	0c02      	lsrs	r2, r0, #16
 8007a92:	0412      	lsls	r2, r2, #16
 8007a94:	4603      	mov	r3, r0
 8007a96:	b9ca      	cbnz	r2, 8007acc <__hi0bits+0x3c>
 8007a98:	0403      	lsls	r3, r0, #16
 8007a9a:	2010      	movs	r0, #16
 8007a9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007aa0:	bf04      	itt	eq
 8007aa2:	021b      	lsleq	r3, r3, #8
 8007aa4:	3008      	addeq	r0, #8
 8007aa6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007aaa:	bf04      	itt	eq
 8007aac:	011b      	lsleq	r3, r3, #4
 8007aae:	3004      	addeq	r0, #4
 8007ab0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ab4:	bf04      	itt	eq
 8007ab6:	009b      	lsleq	r3, r3, #2
 8007ab8:	3002      	addeq	r0, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	db05      	blt.n	8007aca <__hi0bits+0x3a>
 8007abe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ac2:	f100 0001 	add.w	r0, r0, #1
 8007ac6:	bf08      	it	eq
 8007ac8:	2020      	moveq	r0, #32
 8007aca:	4770      	bx	lr
 8007acc:	2000      	movs	r0, #0
 8007ace:	e7e5      	b.n	8007a9c <__hi0bits+0xc>

08007ad0 <__lo0bits>:
 8007ad0:	6803      	ldr	r3, [r0, #0]
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	f013 0007 	ands.w	r0, r3, #7
 8007ad8:	d00b      	beq.n	8007af2 <__lo0bits+0x22>
 8007ada:	07d9      	lsls	r1, r3, #31
 8007adc:	d421      	bmi.n	8007b22 <__lo0bits+0x52>
 8007ade:	0798      	lsls	r0, r3, #30
 8007ae0:	bf49      	itett	mi
 8007ae2:	085b      	lsrmi	r3, r3, #1
 8007ae4:	089b      	lsrpl	r3, r3, #2
 8007ae6:	2001      	movmi	r0, #1
 8007ae8:	6013      	strmi	r3, [r2, #0]
 8007aea:	bf5c      	itt	pl
 8007aec:	2002      	movpl	r0, #2
 8007aee:	6013      	strpl	r3, [r2, #0]
 8007af0:	4770      	bx	lr
 8007af2:	b299      	uxth	r1, r3
 8007af4:	b909      	cbnz	r1, 8007afa <__lo0bits+0x2a>
 8007af6:	2010      	movs	r0, #16
 8007af8:	0c1b      	lsrs	r3, r3, #16
 8007afa:	b2d9      	uxtb	r1, r3
 8007afc:	b909      	cbnz	r1, 8007b02 <__lo0bits+0x32>
 8007afe:	3008      	adds	r0, #8
 8007b00:	0a1b      	lsrs	r3, r3, #8
 8007b02:	0719      	lsls	r1, r3, #28
 8007b04:	bf04      	itt	eq
 8007b06:	091b      	lsreq	r3, r3, #4
 8007b08:	3004      	addeq	r0, #4
 8007b0a:	0799      	lsls	r1, r3, #30
 8007b0c:	bf04      	itt	eq
 8007b0e:	089b      	lsreq	r3, r3, #2
 8007b10:	3002      	addeq	r0, #2
 8007b12:	07d9      	lsls	r1, r3, #31
 8007b14:	d403      	bmi.n	8007b1e <__lo0bits+0x4e>
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	f100 0001 	add.w	r0, r0, #1
 8007b1c:	d003      	beq.n	8007b26 <__lo0bits+0x56>
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	4770      	bx	lr
 8007b22:	2000      	movs	r0, #0
 8007b24:	4770      	bx	lr
 8007b26:	2020      	movs	r0, #32
 8007b28:	4770      	bx	lr
	...

08007b2c <__i2b>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	2101      	movs	r1, #1
 8007b32:	f7ff febb 	bl	80078ac <_Balloc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	b928      	cbnz	r0, 8007b46 <__i2b+0x1a>
 8007b3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b3e:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <__i2b+0x24>)
 8007b40:	4804      	ldr	r0, [pc, #16]	; (8007b54 <__i2b+0x28>)
 8007b42:	f000 fdef 	bl	8008724 <__assert_func>
 8007b46:	2301      	movs	r3, #1
 8007b48:	6144      	str	r4, [r0, #20]
 8007b4a:	6103      	str	r3, [r0, #16]
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	bf00      	nop
 8007b50:	08009720 	.word	0x08009720
 8007b54:	080097ac 	.word	0x080097ac

08007b58 <__multiply>:
 8007b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	4691      	mov	r9, r2
 8007b5e:	690a      	ldr	r2, [r1, #16]
 8007b60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b64:	460c      	mov	r4, r1
 8007b66:	429a      	cmp	r2, r3
 8007b68:	bfbe      	ittt	lt
 8007b6a:	460b      	movlt	r3, r1
 8007b6c:	464c      	movlt	r4, r9
 8007b6e:	4699      	movlt	r9, r3
 8007b70:	6927      	ldr	r7, [r4, #16]
 8007b72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	6861      	ldr	r1, [r4, #4]
 8007b7a:	eb07 060a 	add.w	r6, r7, sl
 8007b7e:	42b3      	cmp	r3, r6
 8007b80:	b085      	sub	sp, #20
 8007b82:	bfb8      	it	lt
 8007b84:	3101      	addlt	r1, #1
 8007b86:	f7ff fe91 	bl	80078ac <_Balloc>
 8007b8a:	b930      	cbnz	r0, 8007b9a <__multiply+0x42>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	f240 115d 	movw	r1, #349	; 0x15d
 8007b92:	4b43      	ldr	r3, [pc, #268]	; (8007ca0 <__multiply+0x148>)
 8007b94:	4843      	ldr	r0, [pc, #268]	; (8007ca4 <__multiply+0x14c>)
 8007b96:	f000 fdc5 	bl	8008724 <__assert_func>
 8007b9a:	f100 0514 	add.w	r5, r0, #20
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ba6:	4543      	cmp	r3, r8
 8007ba8:	d321      	bcc.n	8007bee <__multiply+0x96>
 8007baa:	f104 0314 	add.w	r3, r4, #20
 8007bae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bb2:	f109 0314 	add.w	r3, r9, #20
 8007bb6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bba:	9202      	str	r2, [sp, #8]
 8007bbc:	1b3a      	subs	r2, r7, r4
 8007bbe:	3a15      	subs	r2, #21
 8007bc0:	f022 0203 	bic.w	r2, r2, #3
 8007bc4:	3204      	adds	r2, #4
 8007bc6:	f104 0115 	add.w	r1, r4, #21
 8007bca:	428f      	cmp	r7, r1
 8007bcc:	bf38      	it	cc
 8007bce:	2204      	movcc	r2, #4
 8007bd0:	9201      	str	r2, [sp, #4]
 8007bd2:	9a02      	ldr	r2, [sp, #8]
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d80c      	bhi.n	8007bf4 <__multiply+0x9c>
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	dd03      	ble.n	8007be6 <__multiply+0x8e>
 8007bde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d059      	beq.n	8007c9a <__multiply+0x142>
 8007be6:	6106      	str	r6, [r0, #16]
 8007be8:	b005      	add	sp, #20
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	f843 2b04 	str.w	r2, [r3], #4
 8007bf2:	e7d8      	b.n	8007ba6 <__multiply+0x4e>
 8007bf4:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bf8:	f1ba 0f00 	cmp.w	sl, #0
 8007bfc:	d023      	beq.n	8007c46 <__multiply+0xee>
 8007bfe:	46a9      	mov	r9, r5
 8007c00:	f04f 0c00 	mov.w	ip, #0
 8007c04:	f104 0e14 	add.w	lr, r4, #20
 8007c08:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c0c:	f8d9 1000 	ldr.w	r1, [r9]
 8007c10:	fa1f fb82 	uxth.w	fp, r2
 8007c14:	b289      	uxth	r1, r1
 8007c16:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c1a:	4461      	add	r1, ip
 8007c1c:	f8d9 c000 	ldr.w	ip, [r9]
 8007c20:	0c12      	lsrs	r2, r2, #16
 8007c22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007c26:	fb0a c202 	mla	r2, sl, r2, ip
 8007c2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c2e:	b289      	uxth	r1, r1
 8007c30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c34:	4577      	cmp	r7, lr
 8007c36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c3a:	f849 1b04 	str.w	r1, [r9], #4
 8007c3e:	d8e3      	bhi.n	8007c08 <__multiply+0xb0>
 8007c40:	9a01      	ldr	r2, [sp, #4]
 8007c42:	f845 c002 	str.w	ip, [r5, r2]
 8007c46:	9a03      	ldr	r2, [sp, #12]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c4e:	f1b9 0f00 	cmp.w	r9, #0
 8007c52:	d020      	beq.n	8007c96 <__multiply+0x13e>
 8007c54:	46ae      	mov	lr, r5
 8007c56:	f04f 0a00 	mov.w	sl, #0
 8007c5a:	6829      	ldr	r1, [r5, #0]
 8007c5c:	f104 0c14 	add.w	ip, r4, #20
 8007c60:	f8bc b000 	ldrh.w	fp, [ip]
 8007c64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c68:	b289      	uxth	r1, r1
 8007c6a:	fb09 220b 	mla	r2, r9, fp, r2
 8007c6e:	4492      	add	sl, r2
 8007c70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c74:	f84e 1b04 	str.w	r1, [lr], #4
 8007c78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c7c:	f8be 1000 	ldrh.w	r1, [lr]
 8007c80:	0c12      	lsrs	r2, r2, #16
 8007c82:	fb09 1102 	mla	r1, r9, r2, r1
 8007c86:	4567      	cmp	r7, ip
 8007c88:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c90:	d8e6      	bhi.n	8007c60 <__multiply+0x108>
 8007c92:	9a01      	ldr	r2, [sp, #4]
 8007c94:	50a9      	str	r1, [r5, r2]
 8007c96:	3504      	adds	r5, #4
 8007c98:	e79b      	b.n	8007bd2 <__multiply+0x7a>
 8007c9a:	3e01      	subs	r6, #1
 8007c9c:	e79d      	b.n	8007bda <__multiply+0x82>
 8007c9e:	bf00      	nop
 8007ca0:	08009720 	.word	0x08009720
 8007ca4:	080097ac 	.word	0x080097ac

08007ca8 <__pow5mult>:
 8007ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	4615      	mov	r5, r2
 8007cae:	f012 0203 	ands.w	r2, r2, #3
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460f      	mov	r7, r1
 8007cb6:	d007      	beq.n	8007cc8 <__pow5mult+0x20>
 8007cb8:	4c25      	ldr	r4, [pc, #148]	; (8007d50 <__pow5mult+0xa8>)
 8007cba:	3a01      	subs	r2, #1
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cc2:	f7ff fe55 	bl	8007970 <__multadd>
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	10ad      	asrs	r5, r5, #2
 8007cca:	d03d      	beq.n	8007d48 <__pow5mult+0xa0>
 8007ccc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cce:	b97c      	cbnz	r4, 8007cf0 <__pow5mult+0x48>
 8007cd0:	2010      	movs	r0, #16
 8007cd2:	f7ff fdb5 	bl	8007840 <malloc>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	6270      	str	r0, [r6, #36]	; 0x24
 8007cda:	b928      	cbnz	r0, 8007ce8 <__pow5mult+0x40>
 8007cdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ce0:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <__pow5mult+0xac>)
 8007ce2:	481d      	ldr	r0, [pc, #116]	; (8007d58 <__pow5mult+0xb0>)
 8007ce4:	f000 fd1e 	bl	8008724 <__assert_func>
 8007ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cec:	6004      	str	r4, [r0, #0]
 8007cee:	60c4      	str	r4, [r0, #12]
 8007cf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cf8:	b94c      	cbnz	r4, 8007d0e <__pow5mult+0x66>
 8007cfa:	f240 2171 	movw	r1, #625	; 0x271
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f7ff ff14 	bl	8007b2c <__i2b>
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d0c:	6003      	str	r3, [r0, #0]
 8007d0e:	f04f 0900 	mov.w	r9, #0
 8007d12:	07eb      	lsls	r3, r5, #31
 8007d14:	d50a      	bpl.n	8007d2c <__pow5mult+0x84>
 8007d16:	4639      	mov	r1, r7
 8007d18:	4622      	mov	r2, r4
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7ff ff1c 	bl	8007b58 <__multiply>
 8007d20:	4680      	mov	r8, r0
 8007d22:	4639      	mov	r1, r7
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7ff fe01 	bl	800792c <_Bfree>
 8007d2a:	4647      	mov	r7, r8
 8007d2c:	106d      	asrs	r5, r5, #1
 8007d2e:	d00b      	beq.n	8007d48 <__pow5mult+0xa0>
 8007d30:	6820      	ldr	r0, [r4, #0]
 8007d32:	b938      	cbnz	r0, 8007d44 <__pow5mult+0x9c>
 8007d34:	4622      	mov	r2, r4
 8007d36:	4621      	mov	r1, r4
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7ff ff0d 	bl	8007b58 <__multiply>
 8007d3e:	6020      	str	r0, [r4, #0]
 8007d40:	f8c0 9000 	str.w	r9, [r0]
 8007d44:	4604      	mov	r4, r0
 8007d46:	e7e4      	b.n	8007d12 <__pow5mult+0x6a>
 8007d48:	4638      	mov	r0, r7
 8007d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d4e:	bf00      	nop
 8007d50:	080098f8 	.word	0x080098f8
 8007d54:	080096ae 	.word	0x080096ae
 8007d58:	080097ac 	.word	0x080097ac

08007d5c <__lshift>:
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	460c      	mov	r4, r1
 8007d62:	4607      	mov	r7, r0
 8007d64:	4691      	mov	r9, r2
 8007d66:	6923      	ldr	r3, [r4, #16]
 8007d68:	6849      	ldr	r1, [r1, #4]
 8007d6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d6e:	68a3      	ldr	r3, [r4, #8]
 8007d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d74:	f108 0601 	add.w	r6, r8, #1
 8007d78:	42b3      	cmp	r3, r6
 8007d7a:	db0b      	blt.n	8007d94 <__lshift+0x38>
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f7ff fd95 	bl	80078ac <_Balloc>
 8007d82:	4605      	mov	r5, r0
 8007d84:	b948      	cbnz	r0, 8007d9a <__lshift+0x3e>
 8007d86:	4602      	mov	r2, r0
 8007d88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d8c:	4b29      	ldr	r3, [pc, #164]	; (8007e34 <__lshift+0xd8>)
 8007d8e:	482a      	ldr	r0, [pc, #168]	; (8007e38 <__lshift+0xdc>)
 8007d90:	f000 fcc8 	bl	8008724 <__assert_func>
 8007d94:	3101      	adds	r1, #1
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	e7ee      	b.n	8007d78 <__lshift+0x1c>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f100 0114 	add.w	r1, r0, #20
 8007da0:	f100 0210 	add.w	r2, r0, #16
 8007da4:	4618      	mov	r0, r3
 8007da6:	4553      	cmp	r3, sl
 8007da8:	db37      	blt.n	8007e1a <__lshift+0xbe>
 8007daa:	6920      	ldr	r0, [r4, #16]
 8007dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007db0:	f104 0314 	add.w	r3, r4, #20
 8007db4:	f019 091f 	ands.w	r9, r9, #31
 8007db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007dc0:	d02f      	beq.n	8007e22 <__lshift+0xc6>
 8007dc2:	468a      	mov	sl, r1
 8007dc4:	f04f 0c00 	mov.w	ip, #0
 8007dc8:	f1c9 0e20 	rsb	lr, r9, #32
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	fa02 f209 	lsl.w	r2, r2, r9
 8007dd2:	ea42 020c 	orr.w	r2, r2, ip
 8007dd6:	f84a 2b04 	str.w	r2, [sl], #4
 8007dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dde:	4298      	cmp	r0, r3
 8007de0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007de4:	d8f2      	bhi.n	8007dcc <__lshift+0x70>
 8007de6:	1b03      	subs	r3, r0, r4
 8007de8:	3b15      	subs	r3, #21
 8007dea:	f023 0303 	bic.w	r3, r3, #3
 8007dee:	3304      	adds	r3, #4
 8007df0:	f104 0215 	add.w	r2, r4, #21
 8007df4:	4290      	cmp	r0, r2
 8007df6:	bf38      	it	cc
 8007df8:	2304      	movcc	r3, #4
 8007dfa:	f841 c003 	str.w	ip, [r1, r3]
 8007dfe:	f1bc 0f00 	cmp.w	ip, #0
 8007e02:	d001      	beq.n	8007e08 <__lshift+0xac>
 8007e04:	f108 0602 	add.w	r6, r8, #2
 8007e08:	3e01      	subs	r6, #1
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	612e      	str	r6, [r5, #16]
 8007e10:	f7ff fd8c 	bl	800792c <_Bfree>
 8007e14:	4628      	mov	r0, r5
 8007e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e1e:	3301      	adds	r3, #1
 8007e20:	e7c1      	b.n	8007da6 <__lshift+0x4a>
 8007e22:	3904      	subs	r1, #4
 8007e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e28:	4298      	cmp	r0, r3
 8007e2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e2e:	d8f9      	bhi.n	8007e24 <__lshift+0xc8>
 8007e30:	e7ea      	b.n	8007e08 <__lshift+0xac>
 8007e32:	bf00      	nop
 8007e34:	08009720 	.word	0x08009720
 8007e38:	080097ac 	.word	0x080097ac

08007e3c <__mcmp>:
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	690a      	ldr	r2, [r1, #16]
 8007e40:	6900      	ldr	r0, [r0, #16]
 8007e42:	b530      	push	{r4, r5, lr}
 8007e44:	1a80      	subs	r0, r0, r2
 8007e46:	d10d      	bne.n	8007e64 <__mcmp+0x28>
 8007e48:	3314      	adds	r3, #20
 8007e4a:	3114      	adds	r1, #20
 8007e4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e5c:	4295      	cmp	r5, r2
 8007e5e:	d002      	beq.n	8007e66 <__mcmp+0x2a>
 8007e60:	d304      	bcc.n	8007e6c <__mcmp+0x30>
 8007e62:	2001      	movs	r0, #1
 8007e64:	bd30      	pop	{r4, r5, pc}
 8007e66:	42a3      	cmp	r3, r4
 8007e68:	d3f4      	bcc.n	8007e54 <__mcmp+0x18>
 8007e6a:	e7fb      	b.n	8007e64 <__mcmp+0x28>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	e7f8      	b.n	8007e64 <__mcmp+0x28>
	...

08007e74 <__mdiff>:
 8007e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e78:	460d      	mov	r5, r1
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4628      	mov	r0, r5
 8007e80:	4614      	mov	r4, r2
 8007e82:	f7ff ffdb 	bl	8007e3c <__mcmp>
 8007e86:	1e06      	subs	r6, r0, #0
 8007e88:	d111      	bne.n	8007eae <__mdiff+0x3a>
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff fd0d 	bl	80078ac <_Balloc>
 8007e92:	4602      	mov	r2, r0
 8007e94:	b928      	cbnz	r0, 8007ea2 <__mdiff+0x2e>
 8007e96:	f240 2132 	movw	r1, #562	; 0x232
 8007e9a:	4b3a      	ldr	r3, [pc, #232]	; (8007f84 <__mdiff+0x110>)
 8007e9c:	483a      	ldr	r0, [pc, #232]	; (8007f88 <__mdiff+0x114>)
 8007e9e:	f000 fc41 	bl	8008724 <__assert_func>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eae:	bfa4      	itt	ge
 8007eb0:	4623      	movge	r3, r4
 8007eb2:	462c      	movge	r4, r5
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	6861      	ldr	r1, [r4, #4]
 8007eb8:	bfa6      	itte	ge
 8007eba:	461d      	movge	r5, r3
 8007ebc:	2600      	movge	r6, #0
 8007ebe:	2601      	movlt	r6, #1
 8007ec0:	f7ff fcf4 	bl	80078ac <_Balloc>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	b918      	cbnz	r0, 8007ed0 <__mdiff+0x5c>
 8007ec8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	; (8007f84 <__mdiff+0x110>)
 8007ece:	e7e5      	b.n	8007e9c <__mdiff+0x28>
 8007ed0:	f102 0814 	add.w	r8, r2, #20
 8007ed4:	46c2      	mov	sl, r8
 8007ed6:	f04f 0c00 	mov.w	ip, #0
 8007eda:	6927      	ldr	r7, [r4, #16]
 8007edc:	60c6      	str	r6, [r0, #12]
 8007ede:	692e      	ldr	r6, [r5, #16]
 8007ee0:	f104 0014 	add.w	r0, r4, #20
 8007ee4:	f105 0914 	add.w	r9, r5, #20
 8007ee8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007eec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ef0:	3410      	adds	r4, #16
 8007ef2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007ef6:	f859 3b04 	ldr.w	r3, [r9], #4
 8007efa:	fa1f f18b 	uxth.w	r1, fp
 8007efe:	448c      	add	ip, r1
 8007f00:	b299      	uxth	r1, r3
 8007f02:	0c1b      	lsrs	r3, r3, #16
 8007f04:	ebac 0101 	sub.w	r1, ip, r1
 8007f08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f0c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f10:	b289      	uxth	r1, r1
 8007f12:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007f16:	454e      	cmp	r6, r9
 8007f18:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007f1c:	f84a 3b04 	str.w	r3, [sl], #4
 8007f20:	d8e7      	bhi.n	8007ef2 <__mdiff+0x7e>
 8007f22:	1b73      	subs	r3, r6, r5
 8007f24:	3b15      	subs	r3, #21
 8007f26:	f023 0303 	bic.w	r3, r3, #3
 8007f2a:	3515      	adds	r5, #21
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	42ae      	cmp	r6, r5
 8007f30:	bf38      	it	cc
 8007f32:	2304      	movcc	r3, #4
 8007f34:	4418      	add	r0, r3
 8007f36:	4443      	add	r3, r8
 8007f38:	461e      	mov	r6, r3
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	4575      	cmp	r5, lr
 8007f3e:	d30e      	bcc.n	8007f5e <__mdiff+0xea>
 8007f40:	f10e 0103 	add.w	r1, lr, #3
 8007f44:	1a09      	subs	r1, r1, r0
 8007f46:	f021 0103 	bic.w	r1, r1, #3
 8007f4a:	3803      	subs	r0, #3
 8007f4c:	4586      	cmp	lr, r0
 8007f4e:	bf38      	it	cc
 8007f50:	2100      	movcc	r1, #0
 8007f52:	4419      	add	r1, r3
 8007f54:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007f58:	b18b      	cbz	r3, 8007f7e <__mdiff+0x10a>
 8007f5a:	6117      	str	r7, [r2, #16]
 8007f5c:	e7a4      	b.n	8007ea8 <__mdiff+0x34>
 8007f5e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f62:	fa1f f188 	uxth.w	r1, r8
 8007f66:	4461      	add	r1, ip
 8007f68:	140c      	asrs	r4, r1, #16
 8007f6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f6e:	b289      	uxth	r1, r1
 8007f70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f74:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007f78:	f846 1b04 	str.w	r1, [r6], #4
 8007f7c:	e7de      	b.n	8007f3c <__mdiff+0xc8>
 8007f7e:	3f01      	subs	r7, #1
 8007f80:	e7e8      	b.n	8007f54 <__mdiff+0xe0>
 8007f82:	bf00      	nop
 8007f84:	08009720 	.word	0x08009720
 8007f88:	080097ac 	.word	0x080097ac

08007f8c <__ulp>:
 8007f8c:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <__ulp+0x48>)
 8007f8e:	400b      	ands	r3, r1
 8007f90:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	dd02      	ble.n	8007f9e <__ulp+0x12>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4770      	bx	lr
 8007f9e:	425b      	negs	r3, r3
 8007fa0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007fb0:	da04      	bge.n	8007fbc <__ulp+0x30>
 8007fb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fb6:	fa43 f102 	asr.w	r1, r3, r2
 8007fba:	4770      	bx	lr
 8007fbc:	f1a2 0314 	sub.w	r3, r2, #20
 8007fc0:	2b1e      	cmp	r3, #30
 8007fc2:	bfd6      	itet	le
 8007fc4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007fc8:	2301      	movgt	r3, #1
 8007fca:	fa22 f303 	lsrle.w	r3, r2, r3
 8007fce:	4618      	mov	r0, r3
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	7ff00000 	.word	0x7ff00000

08007fd8 <__b2d>:
 8007fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fdc:	6907      	ldr	r7, [r0, #16]
 8007fde:	f100 0914 	add.w	r9, r0, #20
 8007fe2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007fe6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007fea:	f1a7 0804 	sub.w	r8, r7, #4
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff fd4e 	bl	8007a90 <__hi0bits>
 8007ff4:	f1c0 0320 	rsb	r3, r0, #32
 8007ff8:	280a      	cmp	r0, #10
 8007ffa:	600b      	str	r3, [r1, #0]
 8007ffc:	491f      	ldr	r1, [pc, #124]	; (800807c <__b2d+0xa4>)
 8007ffe:	dc17      	bgt.n	8008030 <__b2d+0x58>
 8008000:	45c1      	cmp	r9, r8
 8008002:	bf28      	it	cs
 8008004:	2200      	movcs	r2, #0
 8008006:	f1c0 0c0b 	rsb	ip, r0, #11
 800800a:	fa26 f30c 	lsr.w	r3, r6, ip
 800800e:	bf38      	it	cc
 8008010:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008014:	ea43 0501 	orr.w	r5, r3, r1
 8008018:	f100 0315 	add.w	r3, r0, #21
 800801c:	fa06 f303 	lsl.w	r3, r6, r3
 8008020:	fa22 f20c 	lsr.w	r2, r2, ip
 8008024:	ea43 0402 	orr.w	r4, r3, r2
 8008028:	4620      	mov	r0, r4
 800802a:	4629      	mov	r1, r5
 800802c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008030:	45c1      	cmp	r9, r8
 8008032:	bf2e      	itee	cs
 8008034:	2200      	movcs	r2, #0
 8008036:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800803a:	f1a7 0808 	subcc.w	r8, r7, #8
 800803e:	f1b0 030b 	subs.w	r3, r0, #11
 8008042:	d016      	beq.n	8008072 <__b2d+0x9a>
 8008044:	f1c3 0720 	rsb	r7, r3, #32
 8008048:	fa22 f107 	lsr.w	r1, r2, r7
 800804c:	45c8      	cmp	r8, r9
 800804e:	fa06 f603 	lsl.w	r6, r6, r3
 8008052:	ea46 0601 	orr.w	r6, r6, r1
 8008056:	bf94      	ite	ls
 8008058:	2100      	movls	r1, #0
 800805a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800805e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008062:	fa02 f003 	lsl.w	r0, r2, r3
 8008066:	40f9      	lsrs	r1, r7
 8008068:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800806c:	ea40 0401 	orr.w	r4, r0, r1
 8008070:	e7da      	b.n	8008028 <__b2d+0x50>
 8008072:	4614      	mov	r4, r2
 8008074:	ea46 0501 	orr.w	r5, r6, r1
 8008078:	e7d6      	b.n	8008028 <__b2d+0x50>
 800807a:	bf00      	nop
 800807c:	3ff00000 	.word	0x3ff00000

08008080 <__d2b>:
 8008080:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008084:	2101      	movs	r1, #1
 8008086:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800808a:	4690      	mov	r8, r2
 800808c:	461d      	mov	r5, r3
 800808e:	f7ff fc0d 	bl	80078ac <_Balloc>
 8008092:	4604      	mov	r4, r0
 8008094:	b930      	cbnz	r0, 80080a4 <__d2b+0x24>
 8008096:	4602      	mov	r2, r0
 8008098:	f240 310a 	movw	r1, #778	; 0x30a
 800809c:	4b24      	ldr	r3, [pc, #144]	; (8008130 <__d2b+0xb0>)
 800809e:	4825      	ldr	r0, [pc, #148]	; (8008134 <__d2b+0xb4>)
 80080a0:	f000 fb40 	bl	8008724 <__assert_func>
 80080a4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80080a8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80080ac:	bb2d      	cbnz	r5, 80080fa <__d2b+0x7a>
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	f1b8 0300 	subs.w	r3, r8, #0
 80080b4:	d026      	beq.n	8008104 <__d2b+0x84>
 80080b6:	4668      	mov	r0, sp
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	f7ff fd09 	bl	8007ad0 <__lo0bits>
 80080be:	9900      	ldr	r1, [sp, #0]
 80080c0:	b1f0      	cbz	r0, 8008100 <__d2b+0x80>
 80080c2:	9a01      	ldr	r2, [sp, #4]
 80080c4:	f1c0 0320 	rsb	r3, r0, #32
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	430b      	orrs	r3, r1
 80080ce:	40c2      	lsrs	r2, r0
 80080d0:	6163      	str	r3, [r4, #20]
 80080d2:	9201      	str	r2, [sp, #4]
 80080d4:	9b01      	ldr	r3, [sp, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bf14      	ite	ne
 80080da:	2102      	movne	r1, #2
 80080dc:	2101      	moveq	r1, #1
 80080de:	61a3      	str	r3, [r4, #24]
 80080e0:	6121      	str	r1, [r4, #16]
 80080e2:	b1c5      	cbz	r5, 8008116 <__d2b+0x96>
 80080e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080e8:	4405      	add	r5, r0
 80080ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080ee:	603d      	str	r5, [r7, #0]
 80080f0:	6030      	str	r0, [r6, #0]
 80080f2:	4620      	mov	r0, r4
 80080f4:	b002      	add	sp, #8
 80080f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080fe:	e7d6      	b.n	80080ae <__d2b+0x2e>
 8008100:	6161      	str	r1, [r4, #20]
 8008102:	e7e7      	b.n	80080d4 <__d2b+0x54>
 8008104:	a801      	add	r0, sp, #4
 8008106:	f7ff fce3 	bl	8007ad0 <__lo0bits>
 800810a:	2101      	movs	r1, #1
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	6121      	str	r1, [r4, #16]
 8008110:	6163      	str	r3, [r4, #20]
 8008112:	3020      	adds	r0, #32
 8008114:	e7e5      	b.n	80080e2 <__d2b+0x62>
 8008116:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800811a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800811e:	6038      	str	r0, [r7, #0]
 8008120:	6918      	ldr	r0, [r3, #16]
 8008122:	f7ff fcb5 	bl	8007a90 <__hi0bits>
 8008126:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800812a:	6031      	str	r1, [r6, #0]
 800812c:	e7e1      	b.n	80080f2 <__d2b+0x72>
 800812e:	bf00      	nop
 8008130:	08009720 	.word	0x08009720
 8008134:	080097ac 	.word	0x080097ac

08008138 <__ratio>:
 8008138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	4688      	mov	r8, r1
 800813e:	4669      	mov	r1, sp
 8008140:	4681      	mov	r9, r0
 8008142:	f7ff ff49 	bl	8007fd8 <__b2d>
 8008146:	460f      	mov	r7, r1
 8008148:	4604      	mov	r4, r0
 800814a:	460d      	mov	r5, r1
 800814c:	4640      	mov	r0, r8
 800814e:	a901      	add	r1, sp, #4
 8008150:	f7ff ff42 	bl	8007fd8 <__b2d>
 8008154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008158:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800815c:	468b      	mov	fp, r1
 800815e:	eba3 0c02 	sub.w	ip, r3, r2
 8008162:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800816c:	2b00      	cmp	r3, #0
 800816e:	bfd5      	itete	le
 8008170:	460a      	movle	r2, r1
 8008172:	462a      	movgt	r2, r5
 8008174:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008178:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800817c:	bfd8      	it	le
 800817e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008182:	465b      	mov	r3, fp
 8008184:	4602      	mov	r2, r0
 8008186:	4639      	mov	r1, r7
 8008188:	4620      	mov	r0, r4
 800818a:	f7f8 facf 	bl	800072c <__aeabi_ddiv>
 800818e:	b003      	add	sp, #12
 8008190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008194 <__copybits>:
 8008194:	3901      	subs	r1, #1
 8008196:	b570      	push	{r4, r5, r6, lr}
 8008198:	1149      	asrs	r1, r1, #5
 800819a:	6914      	ldr	r4, [r2, #16]
 800819c:	3101      	adds	r1, #1
 800819e:	f102 0314 	add.w	r3, r2, #20
 80081a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081aa:	1f05      	subs	r5, r0, #4
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	d30c      	bcc.n	80081ca <__copybits+0x36>
 80081b0:	1aa3      	subs	r3, r4, r2
 80081b2:	3b11      	subs	r3, #17
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	3211      	adds	r2, #17
 80081ba:	42a2      	cmp	r2, r4
 80081bc:	bf88      	it	hi
 80081be:	2300      	movhi	r3, #0
 80081c0:	4418      	add	r0, r3
 80081c2:	2300      	movs	r3, #0
 80081c4:	4288      	cmp	r0, r1
 80081c6:	d305      	bcc.n	80081d4 <__copybits+0x40>
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
 80081ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80081ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80081d2:	e7eb      	b.n	80081ac <__copybits+0x18>
 80081d4:	f840 3b04 	str.w	r3, [r0], #4
 80081d8:	e7f4      	b.n	80081c4 <__copybits+0x30>

080081da <__any_on>:
 80081da:	f100 0214 	add.w	r2, r0, #20
 80081de:	6900      	ldr	r0, [r0, #16]
 80081e0:	114b      	asrs	r3, r1, #5
 80081e2:	4298      	cmp	r0, r3
 80081e4:	b510      	push	{r4, lr}
 80081e6:	db11      	blt.n	800820c <__any_on+0x32>
 80081e8:	dd0a      	ble.n	8008200 <__any_on+0x26>
 80081ea:	f011 011f 	ands.w	r1, r1, #31
 80081ee:	d007      	beq.n	8008200 <__any_on+0x26>
 80081f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80081f4:	fa24 f001 	lsr.w	r0, r4, r1
 80081f8:	fa00 f101 	lsl.w	r1, r0, r1
 80081fc:	428c      	cmp	r4, r1
 80081fe:	d10b      	bne.n	8008218 <__any_on+0x3e>
 8008200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008204:	4293      	cmp	r3, r2
 8008206:	d803      	bhi.n	8008210 <__any_on+0x36>
 8008208:	2000      	movs	r0, #0
 800820a:	bd10      	pop	{r4, pc}
 800820c:	4603      	mov	r3, r0
 800820e:	e7f7      	b.n	8008200 <__any_on+0x26>
 8008210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008214:	2900      	cmp	r1, #0
 8008216:	d0f5      	beq.n	8008204 <__any_on+0x2a>
 8008218:	2001      	movs	r0, #1
 800821a:	e7f6      	b.n	800820a <__any_on+0x30>

0800821c <_calloc_r>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	fba1 5402 	umull	r5, r4, r1, r2
 8008222:	b934      	cbnz	r4, 8008232 <_calloc_r+0x16>
 8008224:	4629      	mov	r1, r5
 8008226:	f000 f875 	bl	8008314 <_malloc_r>
 800822a:	4606      	mov	r6, r0
 800822c:	b928      	cbnz	r0, 800823a <_calloc_r+0x1e>
 800822e:	4630      	mov	r0, r6
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	220c      	movs	r2, #12
 8008234:	2600      	movs	r6, #0
 8008236:	6002      	str	r2, [r0, #0]
 8008238:	e7f9      	b.n	800822e <_calloc_r+0x12>
 800823a:	462a      	mov	r2, r5
 800823c:	4621      	mov	r1, r4
 800823e:	f7fc fbf3 	bl	8004a28 <memset>
 8008242:	e7f4      	b.n	800822e <_calloc_r+0x12>

08008244 <_free_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4605      	mov	r5, r0
 8008248:	2900      	cmp	r1, #0
 800824a:	d040      	beq.n	80082ce <_free_r+0x8a>
 800824c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008250:	1f0c      	subs	r4, r1, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfb8      	it	lt
 8008256:	18e4      	addlt	r4, r4, r3
 8008258:	f000 faae 	bl	80087b8 <__malloc_lock>
 800825c:	4a1c      	ldr	r2, [pc, #112]	; (80082d0 <_free_r+0x8c>)
 800825e:	6813      	ldr	r3, [r2, #0]
 8008260:	b933      	cbnz	r3, 8008270 <_free_r+0x2c>
 8008262:	6063      	str	r3, [r4, #4]
 8008264:	6014      	str	r4, [r2, #0]
 8008266:	4628      	mov	r0, r5
 8008268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800826c:	f000 baaa 	b.w	80087c4 <__malloc_unlock>
 8008270:	42a3      	cmp	r3, r4
 8008272:	d908      	bls.n	8008286 <_free_r+0x42>
 8008274:	6820      	ldr	r0, [r4, #0]
 8008276:	1821      	adds	r1, r4, r0
 8008278:	428b      	cmp	r3, r1
 800827a:	bf01      	itttt	eq
 800827c:	6819      	ldreq	r1, [r3, #0]
 800827e:	685b      	ldreq	r3, [r3, #4]
 8008280:	1809      	addeq	r1, r1, r0
 8008282:	6021      	streq	r1, [r4, #0]
 8008284:	e7ed      	b.n	8008262 <_free_r+0x1e>
 8008286:	461a      	mov	r2, r3
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	b10b      	cbz	r3, 8008290 <_free_r+0x4c>
 800828c:	42a3      	cmp	r3, r4
 800828e:	d9fa      	bls.n	8008286 <_free_r+0x42>
 8008290:	6811      	ldr	r1, [r2, #0]
 8008292:	1850      	adds	r0, r2, r1
 8008294:	42a0      	cmp	r0, r4
 8008296:	d10b      	bne.n	80082b0 <_free_r+0x6c>
 8008298:	6820      	ldr	r0, [r4, #0]
 800829a:	4401      	add	r1, r0
 800829c:	1850      	adds	r0, r2, r1
 800829e:	4283      	cmp	r3, r0
 80082a0:	6011      	str	r1, [r2, #0]
 80082a2:	d1e0      	bne.n	8008266 <_free_r+0x22>
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	4401      	add	r1, r0
 80082aa:	6011      	str	r1, [r2, #0]
 80082ac:	6053      	str	r3, [r2, #4]
 80082ae:	e7da      	b.n	8008266 <_free_r+0x22>
 80082b0:	d902      	bls.n	80082b8 <_free_r+0x74>
 80082b2:	230c      	movs	r3, #12
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	e7d6      	b.n	8008266 <_free_r+0x22>
 80082b8:	6820      	ldr	r0, [r4, #0]
 80082ba:	1821      	adds	r1, r4, r0
 80082bc:	428b      	cmp	r3, r1
 80082be:	bf01      	itttt	eq
 80082c0:	6819      	ldreq	r1, [r3, #0]
 80082c2:	685b      	ldreq	r3, [r3, #4]
 80082c4:	1809      	addeq	r1, r1, r0
 80082c6:	6021      	streq	r1, [r4, #0]
 80082c8:	6063      	str	r3, [r4, #4]
 80082ca:	6054      	str	r4, [r2, #4]
 80082cc:	e7cb      	b.n	8008266 <_free_r+0x22>
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	20000594 	.word	0x20000594

080082d4 <sbrk_aligned>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	4e0e      	ldr	r6, [pc, #56]	; (8008310 <sbrk_aligned+0x3c>)
 80082d8:	460c      	mov	r4, r1
 80082da:	6831      	ldr	r1, [r6, #0]
 80082dc:	4605      	mov	r5, r0
 80082de:	b911      	cbnz	r1, 80082e6 <sbrk_aligned+0x12>
 80082e0:	f000 f9ee 	bl	80086c0 <_sbrk_r>
 80082e4:	6030      	str	r0, [r6, #0]
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	f000 f9e9 	bl	80086c0 <_sbrk_r>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d00a      	beq.n	8008308 <sbrk_aligned+0x34>
 80082f2:	1cc4      	adds	r4, r0, #3
 80082f4:	f024 0403 	bic.w	r4, r4, #3
 80082f8:	42a0      	cmp	r0, r4
 80082fa:	d007      	beq.n	800830c <sbrk_aligned+0x38>
 80082fc:	1a21      	subs	r1, r4, r0
 80082fe:	4628      	mov	r0, r5
 8008300:	f000 f9de 	bl	80086c0 <_sbrk_r>
 8008304:	3001      	adds	r0, #1
 8008306:	d101      	bne.n	800830c <sbrk_aligned+0x38>
 8008308:	f04f 34ff 	mov.w	r4, #4294967295
 800830c:	4620      	mov	r0, r4
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	20000598 	.word	0x20000598

08008314 <_malloc_r>:
 8008314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008318:	1ccd      	adds	r5, r1, #3
 800831a:	f025 0503 	bic.w	r5, r5, #3
 800831e:	3508      	adds	r5, #8
 8008320:	2d0c      	cmp	r5, #12
 8008322:	bf38      	it	cc
 8008324:	250c      	movcc	r5, #12
 8008326:	2d00      	cmp	r5, #0
 8008328:	4607      	mov	r7, r0
 800832a:	db01      	blt.n	8008330 <_malloc_r+0x1c>
 800832c:	42a9      	cmp	r1, r5
 800832e:	d905      	bls.n	800833c <_malloc_r+0x28>
 8008330:	230c      	movs	r3, #12
 8008332:	2600      	movs	r6, #0
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	4630      	mov	r0, r6
 8008338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833c:	4e2e      	ldr	r6, [pc, #184]	; (80083f8 <_malloc_r+0xe4>)
 800833e:	f000 fa3b 	bl	80087b8 <__malloc_lock>
 8008342:	6833      	ldr	r3, [r6, #0]
 8008344:	461c      	mov	r4, r3
 8008346:	bb34      	cbnz	r4, 8008396 <_malloc_r+0x82>
 8008348:	4629      	mov	r1, r5
 800834a:	4638      	mov	r0, r7
 800834c:	f7ff ffc2 	bl	80082d4 <sbrk_aligned>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	4604      	mov	r4, r0
 8008354:	d14d      	bne.n	80083f2 <_malloc_r+0xde>
 8008356:	6834      	ldr	r4, [r6, #0]
 8008358:	4626      	mov	r6, r4
 800835a:	2e00      	cmp	r6, #0
 800835c:	d140      	bne.n	80083e0 <_malloc_r+0xcc>
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	4631      	mov	r1, r6
 8008362:	4638      	mov	r0, r7
 8008364:	eb04 0803 	add.w	r8, r4, r3
 8008368:	f000 f9aa 	bl	80086c0 <_sbrk_r>
 800836c:	4580      	cmp	r8, r0
 800836e:	d13a      	bne.n	80083e6 <_malloc_r+0xd2>
 8008370:	6821      	ldr	r1, [r4, #0]
 8008372:	3503      	adds	r5, #3
 8008374:	1a6d      	subs	r5, r5, r1
 8008376:	f025 0503 	bic.w	r5, r5, #3
 800837a:	3508      	adds	r5, #8
 800837c:	2d0c      	cmp	r5, #12
 800837e:	bf38      	it	cc
 8008380:	250c      	movcc	r5, #12
 8008382:	4638      	mov	r0, r7
 8008384:	4629      	mov	r1, r5
 8008386:	f7ff ffa5 	bl	80082d4 <sbrk_aligned>
 800838a:	3001      	adds	r0, #1
 800838c:	d02b      	beq.n	80083e6 <_malloc_r+0xd2>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	442b      	add	r3, r5
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	e00e      	b.n	80083b4 <_malloc_r+0xa0>
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	1b52      	subs	r2, r2, r5
 800839a:	d41e      	bmi.n	80083da <_malloc_r+0xc6>
 800839c:	2a0b      	cmp	r2, #11
 800839e:	d916      	bls.n	80083ce <_malloc_r+0xba>
 80083a0:	1961      	adds	r1, r4, r5
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	6025      	str	r5, [r4, #0]
 80083a6:	bf18      	it	ne
 80083a8:	6059      	strne	r1, [r3, #4]
 80083aa:	6863      	ldr	r3, [r4, #4]
 80083ac:	bf08      	it	eq
 80083ae:	6031      	streq	r1, [r6, #0]
 80083b0:	5162      	str	r2, [r4, r5]
 80083b2:	604b      	str	r3, [r1, #4]
 80083b4:	4638      	mov	r0, r7
 80083b6:	f104 060b 	add.w	r6, r4, #11
 80083ba:	f000 fa03 	bl	80087c4 <__malloc_unlock>
 80083be:	f026 0607 	bic.w	r6, r6, #7
 80083c2:	1d23      	adds	r3, r4, #4
 80083c4:	1af2      	subs	r2, r6, r3
 80083c6:	d0b6      	beq.n	8008336 <_malloc_r+0x22>
 80083c8:	1b9b      	subs	r3, r3, r6
 80083ca:	50a3      	str	r3, [r4, r2]
 80083cc:	e7b3      	b.n	8008336 <_malloc_r+0x22>
 80083ce:	6862      	ldr	r2, [r4, #4]
 80083d0:	42a3      	cmp	r3, r4
 80083d2:	bf0c      	ite	eq
 80083d4:	6032      	streq	r2, [r6, #0]
 80083d6:	605a      	strne	r2, [r3, #4]
 80083d8:	e7ec      	b.n	80083b4 <_malloc_r+0xa0>
 80083da:	4623      	mov	r3, r4
 80083dc:	6864      	ldr	r4, [r4, #4]
 80083de:	e7b2      	b.n	8008346 <_malloc_r+0x32>
 80083e0:	4634      	mov	r4, r6
 80083e2:	6876      	ldr	r6, [r6, #4]
 80083e4:	e7b9      	b.n	800835a <_malloc_r+0x46>
 80083e6:	230c      	movs	r3, #12
 80083e8:	4638      	mov	r0, r7
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	f000 f9ea 	bl	80087c4 <__malloc_unlock>
 80083f0:	e7a1      	b.n	8008336 <_malloc_r+0x22>
 80083f2:	6025      	str	r5, [r4, #0]
 80083f4:	e7de      	b.n	80083b4 <_malloc_r+0xa0>
 80083f6:	bf00      	nop
 80083f8:	20000594 	.word	0x20000594

080083fc <__ssputs_r>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	688e      	ldr	r6, [r1, #8]
 8008402:	4682      	mov	sl, r0
 8008404:	429e      	cmp	r6, r3
 8008406:	460c      	mov	r4, r1
 8008408:	4690      	mov	r8, r2
 800840a:	461f      	mov	r7, r3
 800840c:	d838      	bhi.n	8008480 <__ssputs_r+0x84>
 800840e:	898a      	ldrh	r2, [r1, #12]
 8008410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008414:	d032      	beq.n	800847c <__ssputs_r+0x80>
 8008416:	6825      	ldr	r5, [r4, #0]
 8008418:	6909      	ldr	r1, [r1, #16]
 800841a:	3301      	adds	r3, #1
 800841c:	eba5 0901 	sub.w	r9, r5, r1
 8008420:	6965      	ldr	r5, [r4, #20]
 8008422:	444b      	add	r3, r9
 8008424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800842c:	106d      	asrs	r5, r5, #1
 800842e:	429d      	cmp	r5, r3
 8008430:	bf38      	it	cc
 8008432:	461d      	movcc	r5, r3
 8008434:	0553      	lsls	r3, r2, #21
 8008436:	d531      	bpl.n	800849c <__ssputs_r+0xa0>
 8008438:	4629      	mov	r1, r5
 800843a:	f7ff ff6b 	bl	8008314 <_malloc_r>
 800843e:	4606      	mov	r6, r0
 8008440:	b950      	cbnz	r0, 8008458 <__ssputs_r+0x5c>
 8008442:	230c      	movs	r3, #12
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	f8ca 3000 	str.w	r3, [sl]
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008458:	464a      	mov	r2, r9
 800845a:	6921      	ldr	r1, [r4, #16]
 800845c:	f7ff fa18 	bl	8007890 <memcpy>
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846a:	81a3      	strh	r3, [r4, #12]
 800846c:	6126      	str	r6, [r4, #16]
 800846e:	444e      	add	r6, r9
 8008470:	6026      	str	r6, [r4, #0]
 8008472:	463e      	mov	r6, r7
 8008474:	6165      	str	r5, [r4, #20]
 8008476:	eba5 0509 	sub.w	r5, r5, r9
 800847a:	60a5      	str	r5, [r4, #8]
 800847c:	42be      	cmp	r6, r7
 800847e:	d900      	bls.n	8008482 <__ssputs_r+0x86>
 8008480:	463e      	mov	r6, r7
 8008482:	4632      	mov	r2, r6
 8008484:	4641      	mov	r1, r8
 8008486:	6820      	ldr	r0, [r4, #0]
 8008488:	f000 f97c 	bl	8008784 <memmove>
 800848c:	68a3      	ldr	r3, [r4, #8]
 800848e:	2000      	movs	r0, #0
 8008490:	1b9b      	subs	r3, r3, r6
 8008492:	60a3      	str	r3, [r4, #8]
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	4433      	add	r3, r6
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	e7db      	b.n	8008454 <__ssputs_r+0x58>
 800849c:	462a      	mov	r2, r5
 800849e:	f000 f997 	bl	80087d0 <_realloc_r>
 80084a2:	4606      	mov	r6, r0
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d1e1      	bne.n	800846c <__ssputs_r+0x70>
 80084a8:	4650      	mov	r0, sl
 80084aa:	6921      	ldr	r1, [r4, #16]
 80084ac:	f7ff feca 	bl	8008244 <_free_r>
 80084b0:	e7c7      	b.n	8008442 <__ssputs_r+0x46>
	...

080084b4 <_svfiprintf_r>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	4698      	mov	r8, r3
 80084ba:	898b      	ldrh	r3, [r1, #12]
 80084bc:	4607      	mov	r7, r0
 80084be:	061b      	lsls	r3, r3, #24
 80084c0:	460d      	mov	r5, r1
 80084c2:	4614      	mov	r4, r2
 80084c4:	b09d      	sub	sp, #116	; 0x74
 80084c6:	d50e      	bpl.n	80084e6 <_svfiprintf_r+0x32>
 80084c8:	690b      	ldr	r3, [r1, #16]
 80084ca:	b963      	cbnz	r3, 80084e6 <_svfiprintf_r+0x32>
 80084cc:	2140      	movs	r1, #64	; 0x40
 80084ce:	f7ff ff21 	bl	8008314 <_malloc_r>
 80084d2:	6028      	str	r0, [r5, #0]
 80084d4:	6128      	str	r0, [r5, #16]
 80084d6:	b920      	cbnz	r0, 80084e2 <_svfiprintf_r+0x2e>
 80084d8:	230c      	movs	r3, #12
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	e0d1      	b.n	8008686 <_svfiprintf_r+0x1d2>
 80084e2:	2340      	movs	r3, #64	; 0x40
 80084e4:	616b      	str	r3, [r5, #20]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ea:	2320      	movs	r3, #32
 80084ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084f0:	2330      	movs	r3, #48	; 0x30
 80084f2:	f04f 0901 	mov.w	r9, #1
 80084f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086a0 <_svfiprintf_r+0x1ec>
 80084fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008502:	4623      	mov	r3, r4
 8008504:	469a      	mov	sl, r3
 8008506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800850a:	b10a      	cbz	r2, 8008510 <_svfiprintf_r+0x5c>
 800850c:	2a25      	cmp	r2, #37	; 0x25
 800850e:	d1f9      	bne.n	8008504 <_svfiprintf_r+0x50>
 8008510:	ebba 0b04 	subs.w	fp, sl, r4
 8008514:	d00b      	beq.n	800852e <_svfiprintf_r+0x7a>
 8008516:	465b      	mov	r3, fp
 8008518:	4622      	mov	r2, r4
 800851a:	4629      	mov	r1, r5
 800851c:	4638      	mov	r0, r7
 800851e:	f7ff ff6d 	bl	80083fc <__ssputs_r>
 8008522:	3001      	adds	r0, #1
 8008524:	f000 80aa 	beq.w	800867c <_svfiprintf_r+0x1c8>
 8008528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800852a:	445a      	add	r2, fp
 800852c:	9209      	str	r2, [sp, #36]	; 0x24
 800852e:	f89a 3000 	ldrb.w	r3, [sl]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80a2 	beq.w	800867c <_svfiprintf_r+0x1c8>
 8008538:	2300      	movs	r3, #0
 800853a:	f04f 32ff 	mov.w	r2, #4294967295
 800853e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008542:	f10a 0a01 	add.w	sl, sl, #1
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	9307      	str	r3, [sp, #28]
 800854a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800854e:	931a      	str	r3, [sp, #104]	; 0x68
 8008550:	4654      	mov	r4, sl
 8008552:	2205      	movs	r2, #5
 8008554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008558:	4851      	ldr	r0, [pc, #324]	; (80086a0 <_svfiprintf_r+0x1ec>)
 800855a:	f7ff f98b 	bl	8007874 <memchr>
 800855e:	9a04      	ldr	r2, [sp, #16]
 8008560:	b9d8      	cbnz	r0, 800859a <_svfiprintf_r+0xe6>
 8008562:	06d0      	lsls	r0, r2, #27
 8008564:	bf44      	itt	mi
 8008566:	2320      	movmi	r3, #32
 8008568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800856c:	0711      	lsls	r1, r2, #28
 800856e:	bf44      	itt	mi
 8008570:	232b      	movmi	r3, #43	; 0x2b
 8008572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008576:	f89a 3000 	ldrb.w	r3, [sl]
 800857a:	2b2a      	cmp	r3, #42	; 0x2a
 800857c:	d015      	beq.n	80085aa <_svfiprintf_r+0xf6>
 800857e:	4654      	mov	r4, sl
 8008580:	2000      	movs	r0, #0
 8008582:	f04f 0c0a 	mov.w	ip, #10
 8008586:	9a07      	ldr	r2, [sp, #28]
 8008588:	4621      	mov	r1, r4
 800858a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858e:	3b30      	subs	r3, #48	; 0x30
 8008590:	2b09      	cmp	r3, #9
 8008592:	d94e      	bls.n	8008632 <_svfiprintf_r+0x17e>
 8008594:	b1b0      	cbz	r0, 80085c4 <_svfiprintf_r+0x110>
 8008596:	9207      	str	r2, [sp, #28]
 8008598:	e014      	b.n	80085c4 <_svfiprintf_r+0x110>
 800859a:	eba0 0308 	sub.w	r3, r0, r8
 800859e:	fa09 f303 	lsl.w	r3, r9, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	46a2      	mov	sl, r4
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	e7d2      	b.n	8008550 <_svfiprintf_r+0x9c>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	1d19      	adds	r1, r3, #4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	9103      	str	r1, [sp, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bfbb      	ittet	lt
 80085b6:	425b      	neglt	r3, r3
 80085b8:	f042 0202 	orrlt.w	r2, r2, #2
 80085bc:	9307      	strge	r3, [sp, #28]
 80085be:	9307      	strlt	r3, [sp, #28]
 80085c0:	bfb8      	it	lt
 80085c2:	9204      	strlt	r2, [sp, #16]
 80085c4:	7823      	ldrb	r3, [r4, #0]
 80085c6:	2b2e      	cmp	r3, #46	; 0x2e
 80085c8:	d10c      	bne.n	80085e4 <_svfiprintf_r+0x130>
 80085ca:	7863      	ldrb	r3, [r4, #1]
 80085cc:	2b2a      	cmp	r3, #42	; 0x2a
 80085ce:	d135      	bne.n	800863c <_svfiprintf_r+0x188>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	3402      	adds	r4, #2
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	9203      	str	r2, [sp, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bfb8      	it	lt
 80085de:	f04f 33ff 	movlt.w	r3, #4294967295
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80086a4 <_svfiprintf_r+0x1f0>
 80085e8:	2203      	movs	r2, #3
 80085ea:	4650      	mov	r0, sl
 80085ec:	7821      	ldrb	r1, [r4, #0]
 80085ee:	f7ff f941 	bl	8007874 <memchr>
 80085f2:	b140      	cbz	r0, 8008606 <_svfiprintf_r+0x152>
 80085f4:	2340      	movs	r3, #64	; 0x40
 80085f6:	eba0 000a 	sub.w	r0, r0, sl
 80085fa:	fa03 f000 	lsl.w	r0, r3, r0
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	3401      	adds	r4, #1
 8008602:	4303      	orrs	r3, r0
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800860a:	2206      	movs	r2, #6
 800860c:	4826      	ldr	r0, [pc, #152]	; (80086a8 <_svfiprintf_r+0x1f4>)
 800860e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008612:	f7ff f92f 	bl	8007874 <memchr>
 8008616:	2800      	cmp	r0, #0
 8008618:	d038      	beq.n	800868c <_svfiprintf_r+0x1d8>
 800861a:	4b24      	ldr	r3, [pc, #144]	; (80086ac <_svfiprintf_r+0x1f8>)
 800861c:	bb1b      	cbnz	r3, 8008666 <_svfiprintf_r+0x1b2>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	3307      	adds	r3, #7
 8008622:	f023 0307 	bic.w	r3, r3, #7
 8008626:	3308      	adds	r3, #8
 8008628:	9303      	str	r3, [sp, #12]
 800862a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862c:	4433      	add	r3, r6
 800862e:	9309      	str	r3, [sp, #36]	; 0x24
 8008630:	e767      	b.n	8008502 <_svfiprintf_r+0x4e>
 8008632:	460c      	mov	r4, r1
 8008634:	2001      	movs	r0, #1
 8008636:	fb0c 3202 	mla	r2, ip, r2, r3
 800863a:	e7a5      	b.n	8008588 <_svfiprintf_r+0xd4>
 800863c:	2300      	movs	r3, #0
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	4619      	mov	r1, r3
 8008644:	3401      	adds	r4, #1
 8008646:	9305      	str	r3, [sp, #20]
 8008648:	4620      	mov	r0, r4
 800864a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800864e:	3a30      	subs	r2, #48	; 0x30
 8008650:	2a09      	cmp	r2, #9
 8008652:	d903      	bls.n	800865c <_svfiprintf_r+0x1a8>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0c5      	beq.n	80085e4 <_svfiprintf_r+0x130>
 8008658:	9105      	str	r1, [sp, #20]
 800865a:	e7c3      	b.n	80085e4 <_svfiprintf_r+0x130>
 800865c:	4604      	mov	r4, r0
 800865e:	2301      	movs	r3, #1
 8008660:	fb0c 2101 	mla	r1, ip, r1, r2
 8008664:	e7f0      	b.n	8008648 <_svfiprintf_r+0x194>
 8008666:	ab03      	add	r3, sp, #12
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	462a      	mov	r2, r5
 800866c:	4638      	mov	r0, r7
 800866e:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <_svfiprintf_r+0x1fc>)
 8008670:	a904      	add	r1, sp, #16
 8008672:	f7fc fa7f 	bl	8004b74 <_printf_float>
 8008676:	1c42      	adds	r2, r0, #1
 8008678:	4606      	mov	r6, r0
 800867a:	d1d6      	bne.n	800862a <_svfiprintf_r+0x176>
 800867c:	89ab      	ldrh	r3, [r5, #12]
 800867e:	065b      	lsls	r3, r3, #25
 8008680:	f53f af2c 	bmi.w	80084dc <_svfiprintf_r+0x28>
 8008684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008686:	b01d      	add	sp, #116	; 0x74
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	ab03      	add	r3, sp, #12
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	462a      	mov	r2, r5
 8008692:	4638      	mov	r0, r7
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <_svfiprintf_r+0x1fc>)
 8008696:	a904      	add	r1, sp, #16
 8008698:	f7fc fd08 	bl	80050ac <_printf_i>
 800869c:	e7eb      	b.n	8008676 <_svfiprintf_r+0x1c2>
 800869e:	bf00      	nop
 80086a0:	08009904 	.word	0x08009904
 80086a4:	0800990a 	.word	0x0800990a
 80086a8:	0800990e 	.word	0x0800990e
 80086ac:	08004b75 	.word	0x08004b75
 80086b0:	080083fd 	.word	0x080083fd

080086b4 <nan>:
 80086b4:	2000      	movs	r0, #0
 80086b6:	4901      	ldr	r1, [pc, #4]	; (80086bc <nan+0x8>)
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	7ff80000 	.word	0x7ff80000

080086c0 <_sbrk_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	2300      	movs	r3, #0
 80086c4:	4d05      	ldr	r5, [pc, #20]	; (80086dc <_sbrk_r+0x1c>)
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7f9 fc3c 	bl	8001f48 <_sbrk>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_sbrk_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_sbrk_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	2000059c 	.word	0x2000059c

080086e0 <strncmp>:
 80086e0:	4603      	mov	r3, r0
 80086e2:	b510      	push	{r4, lr}
 80086e4:	b172      	cbz	r2, 8008704 <strncmp+0x24>
 80086e6:	3901      	subs	r1, #1
 80086e8:	1884      	adds	r4, r0, r2
 80086ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 80086ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80086f2:	4290      	cmp	r0, r2
 80086f4:	d101      	bne.n	80086fa <strncmp+0x1a>
 80086f6:	42a3      	cmp	r3, r4
 80086f8:	d101      	bne.n	80086fe <strncmp+0x1e>
 80086fa:	1a80      	subs	r0, r0, r2
 80086fc:	bd10      	pop	{r4, pc}
 80086fe:	2800      	cmp	r0, #0
 8008700:	d1f3      	bne.n	80086ea <strncmp+0xa>
 8008702:	e7fa      	b.n	80086fa <strncmp+0x1a>
 8008704:	4610      	mov	r0, r2
 8008706:	e7f9      	b.n	80086fc <strncmp+0x1c>

08008708 <__ascii_wctomb>:
 8008708:	4603      	mov	r3, r0
 800870a:	4608      	mov	r0, r1
 800870c:	b141      	cbz	r1, 8008720 <__ascii_wctomb+0x18>
 800870e:	2aff      	cmp	r2, #255	; 0xff
 8008710:	d904      	bls.n	800871c <__ascii_wctomb+0x14>
 8008712:	228a      	movs	r2, #138	; 0x8a
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	4770      	bx	lr
 800871c:	2001      	movs	r0, #1
 800871e:	700a      	strb	r2, [r1, #0]
 8008720:	4770      	bx	lr
	...

08008724 <__assert_func>:
 8008724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008726:	4614      	mov	r4, r2
 8008728:	461a      	mov	r2, r3
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <__assert_func+0x2c>)
 800872c:	4605      	mov	r5, r0
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68d8      	ldr	r0, [r3, #12]
 8008732:	b14c      	cbz	r4, 8008748 <__assert_func+0x24>
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <__assert_func+0x30>)
 8008736:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800873a:	9100      	str	r1, [sp, #0]
 800873c:	462b      	mov	r3, r5
 800873e:	4906      	ldr	r1, [pc, #24]	; (8008758 <__assert_func+0x34>)
 8008740:	f000 f80e 	bl	8008760 <fiprintf>
 8008744:	f000 fa8a 	bl	8008c5c <abort>
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <__assert_func+0x38>)
 800874a:	461c      	mov	r4, r3
 800874c:	e7f3      	b.n	8008736 <__assert_func+0x12>
 800874e:	bf00      	nop
 8008750:	2000000c 	.word	0x2000000c
 8008754:	08009915 	.word	0x08009915
 8008758:	08009922 	.word	0x08009922
 800875c:	08009950 	.word	0x08009950

08008760 <fiprintf>:
 8008760:	b40e      	push	{r1, r2, r3}
 8008762:	b503      	push	{r0, r1, lr}
 8008764:	4601      	mov	r1, r0
 8008766:	ab03      	add	r3, sp, #12
 8008768:	4805      	ldr	r0, [pc, #20]	; (8008780 <fiprintf+0x20>)
 800876a:	f853 2b04 	ldr.w	r2, [r3], #4
 800876e:	6800      	ldr	r0, [r0, #0]
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	f000 f883 	bl	800887c <_vfiprintf_r>
 8008776:	b002      	add	sp, #8
 8008778:	f85d eb04 	ldr.w	lr, [sp], #4
 800877c:	b003      	add	sp, #12
 800877e:	4770      	bx	lr
 8008780:	2000000c 	.word	0x2000000c

08008784 <memmove>:
 8008784:	4288      	cmp	r0, r1
 8008786:	b510      	push	{r4, lr}
 8008788:	eb01 0402 	add.w	r4, r1, r2
 800878c:	d902      	bls.n	8008794 <memmove+0x10>
 800878e:	4284      	cmp	r4, r0
 8008790:	4623      	mov	r3, r4
 8008792:	d807      	bhi.n	80087a4 <memmove+0x20>
 8008794:	1e43      	subs	r3, r0, #1
 8008796:	42a1      	cmp	r1, r4
 8008798:	d008      	beq.n	80087ac <memmove+0x28>
 800879a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800879e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087a2:	e7f8      	b.n	8008796 <memmove+0x12>
 80087a4:	4601      	mov	r1, r0
 80087a6:	4402      	add	r2, r0
 80087a8:	428a      	cmp	r2, r1
 80087aa:	d100      	bne.n	80087ae <memmove+0x2a>
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087b6:	e7f7      	b.n	80087a8 <memmove+0x24>

080087b8 <__malloc_lock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_lock+0x8>)
 80087ba:	f000 bc0b 	b.w	8008fd4 <__retarget_lock_acquire_recursive>
 80087be:	bf00      	nop
 80087c0:	200005a0 	.word	0x200005a0

080087c4 <__malloc_unlock>:
 80087c4:	4801      	ldr	r0, [pc, #4]	; (80087cc <__malloc_unlock+0x8>)
 80087c6:	f000 bc06 	b.w	8008fd6 <__retarget_lock_release_recursive>
 80087ca:	bf00      	nop
 80087cc:	200005a0 	.word	0x200005a0

080087d0 <_realloc_r>:
 80087d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	4680      	mov	r8, r0
 80087d6:	4614      	mov	r4, r2
 80087d8:	460e      	mov	r6, r1
 80087da:	b921      	cbnz	r1, 80087e6 <_realloc_r+0x16>
 80087dc:	4611      	mov	r1, r2
 80087de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087e2:	f7ff bd97 	b.w	8008314 <_malloc_r>
 80087e6:	b92a      	cbnz	r2, 80087f4 <_realloc_r+0x24>
 80087e8:	f7ff fd2c 	bl	8008244 <_free_r>
 80087ec:	4625      	mov	r5, r4
 80087ee:	4628      	mov	r0, r5
 80087f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f4:	f000 fc56 	bl	80090a4 <_malloc_usable_size_r>
 80087f8:	4284      	cmp	r4, r0
 80087fa:	4607      	mov	r7, r0
 80087fc:	d802      	bhi.n	8008804 <_realloc_r+0x34>
 80087fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008802:	d812      	bhi.n	800882a <_realloc_r+0x5a>
 8008804:	4621      	mov	r1, r4
 8008806:	4640      	mov	r0, r8
 8008808:	f7ff fd84 	bl	8008314 <_malloc_r>
 800880c:	4605      	mov	r5, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d0ed      	beq.n	80087ee <_realloc_r+0x1e>
 8008812:	42bc      	cmp	r4, r7
 8008814:	4622      	mov	r2, r4
 8008816:	4631      	mov	r1, r6
 8008818:	bf28      	it	cs
 800881a:	463a      	movcs	r2, r7
 800881c:	f7ff f838 	bl	8007890 <memcpy>
 8008820:	4631      	mov	r1, r6
 8008822:	4640      	mov	r0, r8
 8008824:	f7ff fd0e 	bl	8008244 <_free_r>
 8008828:	e7e1      	b.n	80087ee <_realloc_r+0x1e>
 800882a:	4635      	mov	r5, r6
 800882c:	e7df      	b.n	80087ee <_realloc_r+0x1e>

0800882e <__sfputc_r>:
 800882e:	6893      	ldr	r3, [r2, #8]
 8008830:	b410      	push	{r4}
 8008832:	3b01      	subs	r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	6093      	str	r3, [r2, #8]
 8008838:	da07      	bge.n	800884a <__sfputc_r+0x1c>
 800883a:	6994      	ldr	r4, [r2, #24]
 800883c:	42a3      	cmp	r3, r4
 800883e:	db01      	blt.n	8008844 <__sfputc_r+0x16>
 8008840:	290a      	cmp	r1, #10
 8008842:	d102      	bne.n	800884a <__sfputc_r+0x1c>
 8008844:	bc10      	pop	{r4}
 8008846:	f000 b949 	b.w	8008adc <__swbuf_r>
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	1c58      	adds	r0, r3, #1
 800884e:	6010      	str	r0, [r2, #0]
 8008850:	7019      	strb	r1, [r3, #0]
 8008852:	4608      	mov	r0, r1
 8008854:	bc10      	pop	{r4}
 8008856:	4770      	bx	lr

08008858 <__sfputs_r>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	4606      	mov	r6, r0
 800885c:	460f      	mov	r7, r1
 800885e:	4614      	mov	r4, r2
 8008860:	18d5      	adds	r5, r2, r3
 8008862:	42ac      	cmp	r4, r5
 8008864:	d101      	bne.n	800886a <__sfputs_r+0x12>
 8008866:	2000      	movs	r0, #0
 8008868:	e007      	b.n	800887a <__sfputs_r+0x22>
 800886a:	463a      	mov	r2, r7
 800886c:	4630      	mov	r0, r6
 800886e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008872:	f7ff ffdc 	bl	800882e <__sfputc_r>
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	d1f3      	bne.n	8008862 <__sfputs_r+0xa>
 800887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800887c <_vfiprintf_r>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	460d      	mov	r5, r1
 8008882:	4614      	mov	r4, r2
 8008884:	4698      	mov	r8, r3
 8008886:	4606      	mov	r6, r0
 8008888:	b09d      	sub	sp, #116	; 0x74
 800888a:	b118      	cbz	r0, 8008894 <_vfiprintf_r+0x18>
 800888c:	6983      	ldr	r3, [r0, #24]
 800888e:	b90b      	cbnz	r3, 8008894 <_vfiprintf_r+0x18>
 8008890:	f000 fb02 	bl	8008e98 <__sinit>
 8008894:	4b89      	ldr	r3, [pc, #548]	; (8008abc <_vfiprintf_r+0x240>)
 8008896:	429d      	cmp	r5, r3
 8008898:	d11b      	bne.n	80088d2 <_vfiprintf_r+0x56>
 800889a:	6875      	ldr	r5, [r6, #4]
 800889c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800889e:	07d9      	lsls	r1, r3, #31
 80088a0:	d405      	bmi.n	80088ae <_vfiprintf_r+0x32>
 80088a2:	89ab      	ldrh	r3, [r5, #12]
 80088a4:	059a      	lsls	r2, r3, #22
 80088a6:	d402      	bmi.n	80088ae <_vfiprintf_r+0x32>
 80088a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088aa:	f000 fb93 	bl	8008fd4 <__retarget_lock_acquire_recursive>
 80088ae:	89ab      	ldrh	r3, [r5, #12]
 80088b0:	071b      	lsls	r3, r3, #28
 80088b2:	d501      	bpl.n	80088b8 <_vfiprintf_r+0x3c>
 80088b4:	692b      	ldr	r3, [r5, #16]
 80088b6:	b9eb      	cbnz	r3, 80088f4 <_vfiprintf_r+0x78>
 80088b8:	4629      	mov	r1, r5
 80088ba:	4630      	mov	r0, r6
 80088bc:	f000 f960 	bl	8008b80 <__swsetup_r>
 80088c0:	b1c0      	cbz	r0, 80088f4 <_vfiprintf_r+0x78>
 80088c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088c4:	07dc      	lsls	r4, r3, #31
 80088c6:	d50e      	bpl.n	80088e6 <_vfiprintf_r+0x6a>
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	b01d      	add	sp, #116	; 0x74
 80088ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d2:	4b7b      	ldr	r3, [pc, #492]	; (8008ac0 <_vfiprintf_r+0x244>)
 80088d4:	429d      	cmp	r5, r3
 80088d6:	d101      	bne.n	80088dc <_vfiprintf_r+0x60>
 80088d8:	68b5      	ldr	r5, [r6, #8]
 80088da:	e7df      	b.n	800889c <_vfiprintf_r+0x20>
 80088dc:	4b79      	ldr	r3, [pc, #484]	; (8008ac4 <_vfiprintf_r+0x248>)
 80088de:	429d      	cmp	r5, r3
 80088e0:	bf08      	it	eq
 80088e2:	68f5      	ldreq	r5, [r6, #12]
 80088e4:	e7da      	b.n	800889c <_vfiprintf_r+0x20>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	0598      	lsls	r0, r3, #22
 80088ea:	d4ed      	bmi.n	80088c8 <_vfiprintf_r+0x4c>
 80088ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ee:	f000 fb72 	bl	8008fd6 <__retarget_lock_release_recursive>
 80088f2:	e7e9      	b.n	80088c8 <_vfiprintf_r+0x4c>
 80088f4:	2300      	movs	r3, #0
 80088f6:	9309      	str	r3, [sp, #36]	; 0x24
 80088f8:	2320      	movs	r3, #32
 80088fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088fe:	2330      	movs	r3, #48	; 0x30
 8008900:	f04f 0901 	mov.w	r9, #1
 8008904:	f8cd 800c 	str.w	r8, [sp, #12]
 8008908:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008ac8 <_vfiprintf_r+0x24c>
 800890c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008910:	4623      	mov	r3, r4
 8008912:	469a      	mov	sl, r3
 8008914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008918:	b10a      	cbz	r2, 800891e <_vfiprintf_r+0xa2>
 800891a:	2a25      	cmp	r2, #37	; 0x25
 800891c:	d1f9      	bne.n	8008912 <_vfiprintf_r+0x96>
 800891e:	ebba 0b04 	subs.w	fp, sl, r4
 8008922:	d00b      	beq.n	800893c <_vfiprintf_r+0xc0>
 8008924:	465b      	mov	r3, fp
 8008926:	4622      	mov	r2, r4
 8008928:	4629      	mov	r1, r5
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ff94 	bl	8008858 <__sfputs_r>
 8008930:	3001      	adds	r0, #1
 8008932:	f000 80aa 	beq.w	8008a8a <_vfiprintf_r+0x20e>
 8008936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008938:	445a      	add	r2, fp
 800893a:	9209      	str	r2, [sp, #36]	; 0x24
 800893c:	f89a 3000 	ldrb.w	r3, [sl]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 80a2 	beq.w	8008a8a <_vfiprintf_r+0x20e>
 8008946:	2300      	movs	r3, #0
 8008948:	f04f 32ff 	mov.w	r2, #4294967295
 800894c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008950:	f10a 0a01 	add.w	sl, sl, #1
 8008954:	9304      	str	r3, [sp, #16]
 8008956:	9307      	str	r3, [sp, #28]
 8008958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800895c:	931a      	str	r3, [sp, #104]	; 0x68
 800895e:	4654      	mov	r4, sl
 8008960:	2205      	movs	r2, #5
 8008962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008966:	4858      	ldr	r0, [pc, #352]	; (8008ac8 <_vfiprintf_r+0x24c>)
 8008968:	f7fe ff84 	bl	8007874 <memchr>
 800896c:	9a04      	ldr	r2, [sp, #16]
 800896e:	b9d8      	cbnz	r0, 80089a8 <_vfiprintf_r+0x12c>
 8008970:	06d1      	lsls	r1, r2, #27
 8008972:	bf44      	itt	mi
 8008974:	2320      	movmi	r3, #32
 8008976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800897a:	0713      	lsls	r3, r2, #28
 800897c:	bf44      	itt	mi
 800897e:	232b      	movmi	r3, #43	; 0x2b
 8008980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008984:	f89a 3000 	ldrb.w	r3, [sl]
 8008988:	2b2a      	cmp	r3, #42	; 0x2a
 800898a:	d015      	beq.n	80089b8 <_vfiprintf_r+0x13c>
 800898c:	4654      	mov	r4, sl
 800898e:	2000      	movs	r0, #0
 8008990:	f04f 0c0a 	mov.w	ip, #10
 8008994:	9a07      	ldr	r2, [sp, #28]
 8008996:	4621      	mov	r1, r4
 8008998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800899c:	3b30      	subs	r3, #48	; 0x30
 800899e:	2b09      	cmp	r3, #9
 80089a0:	d94e      	bls.n	8008a40 <_vfiprintf_r+0x1c4>
 80089a2:	b1b0      	cbz	r0, 80089d2 <_vfiprintf_r+0x156>
 80089a4:	9207      	str	r2, [sp, #28]
 80089a6:	e014      	b.n	80089d2 <_vfiprintf_r+0x156>
 80089a8:	eba0 0308 	sub.w	r3, r0, r8
 80089ac:	fa09 f303 	lsl.w	r3, r9, r3
 80089b0:	4313      	orrs	r3, r2
 80089b2:	46a2      	mov	sl, r4
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	e7d2      	b.n	800895e <_vfiprintf_r+0xe2>
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	1d19      	adds	r1, r3, #4
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	9103      	str	r1, [sp, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bfbb      	ittet	lt
 80089c4:	425b      	neglt	r3, r3
 80089c6:	f042 0202 	orrlt.w	r2, r2, #2
 80089ca:	9307      	strge	r3, [sp, #28]
 80089cc:	9307      	strlt	r3, [sp, #28]
 80089ce:	bfb8      	it	lt
 80089d0:	9204      	strlt	r2, [sp, #16]
 80089d2:	7823      	ldrb	r3, [r4, #0]
 80089d4:	2b2e      	cmp	r3, #46	; 0x2e
 80089d6:	d10c      	bne.n	80089f2 <_vfiprintf_r+0x176>
 80089d8:	7863      	ldrb	r3, [r4, #1]
 80089da:	2b2a      	cmp	r3, #42	; 0x2a
 80089dc:	d135      	bne.n	8008a4a <_vfiprintf_r+0x1ce>
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	3402      	adds	r4, #2
 80089e2:	1d1a      	adds	r2, r3, #4
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	9203      	str	r2, [sp, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bfb8      	it	lt
 80089ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008acc <_vfiprintf_r+0x250>
 80089f6:	2203      	movs	r2, #3
 80089f8:	4650      	mov	r0, sl
 80089fa:	7821      	ldrb	r1, [r4, #0]
 80089fc:	f7fe ff3a 	bl	8007874 <memchr>
 8008a00:	b140      	cbz	r0, 8008a14 <_vfiprintf_r+0x198>
 8008a02:	2340      	movs	r3, #64	; 0x40
 8008a04:	eba0 000a 	sub.w	r0, r0, sl
 8008a08:	fa03 f000 	lsl.w	r0, r3, r0
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	3401      	adds	r4, #1
 8008a10:	4303      	orrs	r3, r0
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a18:	2206      	movs	r2, #6
 8008a1a:	482d      	ldr	r0, [pc, #180]	; (8008ad0 <_vfiprintf_r+0x254>)
 8008a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a20:	f7fe ff28 	bl	8007874 <memchr>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d03f      	beq.n	8008aa8 <_vfiprintf_r+0x22c>
 8008a28:	4b2a      	ldr	r3, [pc, #168]	; (8008ad4 <_vfiprintf_r+0x258>)
 8008a2a:	bb1b      	cbnz	r3, 8008a74 <_vfiprintf_r+0x1f8>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	3307      	adds	r3, #7
 8008a30:	f023 0307 	bic.w	r3, r3, #7
 8008a34:	3308      	adds	r3, #8
 8008a36:	9303      	str	r3, [sp, #12]
 8008a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3a:	443b      	add	r3, r7
 8008a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a3e:	e767      	b.n	8008910 <_vfiprintf_r+0x94>
 8008a40:	460c      	mov	r4, r1
 8008a42:	2001      	movs	r0, #1
 8008a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a48:	e7a5      	b.n	8008996 <_vfiprintf_r+0x11a>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f04f 0c0a 	mov.w	ip, #10
 8008a50:	4619      	mov	r1, r3
 8008a52:	3401      	adds	r4, #1
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	4620      	mov	r0, r4
 8008a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a5c:	3a30      	subs	r2, #48	; 0x30
 8008a5e:	2a09      	cmp	r2, #9
 8008a60:	d903      	bls.n	8008a6a <_vfiprintf_r+0x1ee>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0c5      	beq.n	80089f2 <_vfiprintf_r+0x176>
 8008a66:	9105      	str	r1, [sp, #20]
 8008a68:	e7c3      	b.n	80089f2 <_vfiprintf_r+0x176>
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a72:	e7f0      	b.n	8008a56 <_vfiprintf_r+0x1da>
 8008a74:	ab03      	add	r3, sp, #12
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	462a      	mov	r2, r5
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4b16      	ldr	r3, [pc, #88]	; (8008ad8 <_vfiprintf_r+0x25c>)
 8008a7e:	a904      	add	r1, sp, #16
 8008a80:	f7fc f878 	bl	8004b74 <_printf_float>
 8008a84:	4607      	mov	r7, r0
 8008a86:	1c78      	adds	r0, r7, #1
 8008a88:	d1d6      	bne.n	8008a38 <_vfiprintf_r+0x1bc>
 8008a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a8c:	07d9      	lsls	r1, r3, #31
 8008a8e:	d405      	bmi.n	8008a9c <_vfiprintf_r+0x220>
 8008a90:	89ab      	ldrh	r3, [r5, #12]
 8008a92:	059a      	lsls	r2, r3, #22
 8008a94:	d402      	bmi.n	8008a9c <_vfiprintf_r+0x220>
 8008a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a98:	f000 fa9d 	bl	8008fd6 <__retarget_lock_release_recursive>
 8008a9c:	89ab      	ldrh	r3, [r5, #12]
 8008a9e:	065b      	lsls	r3, r3, #25
 8008aa0:	f53f af12 	bmi.w	80088c8 <_vfiprintf_r+0x4c>
 8008aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aa6:	e711      	b.n	80088cc <_vfiprintf_r+0x50>
 8008aa8:	ab03      	add	r3, sp, #12
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	462a      	mov	r2, r5
 8008aae:	4630      	mov	r0, r6
 8008ab0:	4b09      	ldr	r3, [pc, #36]	; (8008ad8 <_vfiprintf_r+0x25c>)
 8008ab2:	a904      	add	r1, sp, #16
 8008ab4:	f7fc fafa 	bl	80050ac <_printf_i>
 8008ab8:	e7e4      	b.n	8008a84 <_vfiprintf_r+0x208>
 8008aba:	bf00      	nop
 8008abc:	08009974 	.word	0x08009974
 8008ac0:	08009994 	.word	0x08009994
 8008ac4:	08009954 	.word	0x08009954
 8008ac8:	08009904 	.word	0x08009904
 8008acc:	0800990a 	.word	0x0800990a
 8008ad0:	0800990e 	.word	0x0800990e
 8008ad4:	08004b75 	.word	0x08004b75
 8008ad8:	08008859 	.word	0x08008859

08008adc <__swbuf_r>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	460e      	mov	r6, r1
 8008ae0:	4614      	mov	r4, r2
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	b118      	cbz	r0, 8008aee <__swbuf_r+0x12>
 8008ae6:	6983      	ldr	r3, [r0, #24]
 8008ae8:	b90b      	cbnz	r3, 8008aee <__swbuf_r+0x12>
 8008aea:	f000 f9d5 	bl	8008e98 <__sinit>
 8008aee:	4b21      	ldr	r3, [pc, #132]	; (8008b74 <__swbuf_r+0x98>)
 8008af0:	429c      	cmp	r4, r3
 8008af2:	d12b      	bne.n	8008b4c <__swbuf_r+0x70>
 8008af4:	686c      	ldr	r4, [r5, #4]
 8008af6:	69a3      	ldr	r3, [r4, #24]
 8008af8:	60a3      	str	r3, [r4, #8]
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	071a      	lsls	r2, r3, #28
 8008afe:	d52f      	bpl.n	8008b60 <__swbuf_r+0x84>
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	b36b      	cbz	r3, 8008b60 <__swbuf_r+0x84>
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	6820      	ldr	r0, [r4, #0]
 8008b08:	b2f6      	uxtb	r6, r6
 8008b0a:	1ac0      	subs	r0, r0, r3
 8008b0c:	6963      	ldr	r3, [r4, #20]
 8008b0e:	4637      	mov	r7, r6
 8008b10:	4283      	cmp	r3, r0
 8008b12:	dc04      	bgt.n	8008b1e <__swbuf_r+0x42>
 8008b14:	4621      	mov	r1, r4
 8008b16:	4628      	mov	r0, r5
 8008b18:	f000 f92a 	bl	8008d70 <_fflush_r>
 8008b1c:	bb30      	cbnz	r0, 8008b6c <__swbuf_r+0x90>
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	3001      	adds	r0, #1
 8008b22:	3b01      	subs	r3, #1
 8008b24:	60a3      	str	r3, [r4, #8]
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	6022      	str	r2, [r4, #0]
 8008b2c:	701e      	strb	r6, [r3, #0]
 8008b2e:	6963      	ldr	r3, [r4, #20]
 8008b30:	4283      	cmp	r3, r0
 8008b32:	d004      	beq.n	8008b3e <__swbuf_r+0x62>
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	07db      	lsls	r3, r3, #31
 8008b38:	d506      	bpl.n	8008b48 <__swbuf_r+0x6c>
 8008b3a:	2e0a      	cmp	r6, #10
 8008b3c:	d104      	bne.n	8008b48 <__swbuf_r+0x6c>
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	f000 f915 	bl	8008d70 <_fflush_r>
 8008b46:	b988      	cbnz	r0, 8008b6c <__swbuf_r+0x90>
 8008b48:	4638      	mov	r0, r7
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <__swbuf_r+0x9c>)
 8008b4e:	429c      	cmp	r4, r3
 8008b50:	d101      	bne.n	8008b56 <__swbuf_r+0x7a>
 8008b52:	68ac      	ldr	r4, [r5, #8]
 8008b54:	e7cf      	b.n	8008af6 <__swbuf_r+0x1a>
 8008b56:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <__swbuf_r+0xa0>)
 8008b58:	429c      	cmp	r4, r3
 8008b5a:	bf08      	it	eq
 8008b5c:	68ec      	ldreq	r4, [r5, #12]
 8008b5e:	e7ca      	b.n	8008af6 <__swbuf_r+0x1a>
 8008b60:	4621      	mov	r1, r4
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 f80c 	bl	8008b80 <__swsetup_r>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d0cb      	beq.n	8008b04 <__swbuf_r+0x28>
 8008b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b70:	e7ea      	b.n	8008b48 <__swbuf_r+0x6c>
 8008b72:	bf00      	nop
 8008b74:	08009974 	.word	0x08009974
 8008b78:	08009994 	.word	0x08009994
 8008b7c:	08009954 	.word	0x08009954

08008b80 <__swsetup_r>:
 8008b80:	4b32      	ldr	r3, [pc, #200]	; (8008c4c <__swsetup_r+0xcc>)
 8008b82:	b570      	push	{r4, r5, r6, lr}
 8008b84:	681d      	ldr	r5, [r3, #0]
 8008b86:	4606      	mov	r6, r0
 8008b88:	460c      	mov	r4, r1
 8008b8a:	b125      	cbz	r5, 8008b96 <__swsetup_r+0x16>
 8008b8c:	69ab      	ldr	r3, [r5, #24]
 8008b8e:	b913      	cbnz	r3, 8008b96 <__swsetup_r+0x16>
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 f981 	bl	8008e98 <__sinit>
 8008b96:	4b2e      	ldr	r3, [pc, #184]	; (8008c50 <__swsetup_r+0xd0>)
 8008b98:	429c      	cmp	r4, r3
 8008b9a:	d10f      	bne.n	8008bbc <__swsetup_r+0x3c>
 8008b9c:	686c      	ldr	r4, [r5, #4]
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ba4:	0719      	lsls	r1, r3, #28
 8008ba6:	d42c      	bmi.n	8008c02 <__swsetup_r+0x82>
 8008ba8:	06dd      	lsls	r5, r3, #27
 8008baa:	d411      	bmi.n	8008bd0 <__swsetup_r+0x50>
 8008bac:	2309      	movs	r3, #9
 8008bae:	6033      	str	r3, [r6, #0]
 8008bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	e03e      	b.n	8008c3a <__swsetup_r+0xba>
 8008bbc:	4b25      	ldr	r3, [pc, #148]	; (8008c54 <__swsetup_r+0xd4>)
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	d101      	bne.n	8008bc6 <__swsetup_r+0x46>
 8008bc2:	68ac      	ldr	r4, [r5, #8]
 8008bc4:	e7eb      	b.n	8008b9e <__swsetup_r+0x1e>
 8008bc6:	4b24      	ldr	r3, [pc, #144]	; (8008c58 <__swsetup_r+0xd8>)
 8008bc8:	429c      	cmp	r4, r3
 8008bca:	bf08      	it	eq
 8008bcc:	68ec      	ldreq	r4, [r5, #12]
 8008bce:	e7e6      	b.n	8008b9e <__swsetup_r+0x1e>
 8008bd0:	0758      	lsls	r0, r3, #29
 8008bd2:	d512      	bpl.n	8008bfa <__swsetup_r+0x7a>
 8008bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd6:	b141      	cbz	r1, 8008bea <__swsetup_r+0x6a>
 8008bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	d002      	beq.n	8008be6 <__swsetup_r+0x66>
 8008be0:	4630      	mov	r0, r6
 8008be2:	f7ff fb2f 	bl	8008244 <_free_r>
 8008be6:	2300      	movs	r3, #0
 8008be8:	6363      	str	r3, [r4, #52]	; 0x34
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6063      	str	r3, [r4, #4]
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	f043 0308 	orr.w	r3, r3, #8
 8008c00:	81a3      	strh	r3, [r4, #12]
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	b94b      	cbnz	r3, 8008c1a <__swsetup_r+0x9a>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c10:	d003      	beq.n	8008c1a <__swsetup_r+0x9a>
 8008c12:	4621      	mov	r1, r4
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 fa05 	bl	8009024 <__smakebuf_r>
 8008c1a:	89a0      	ldrh	r0, [r4, #12]
 8008c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c20:	f010 0301 	ands.w	r3, r0, #1
 8008c24:	d00a      	beq.n	8008c3c <__swsetup_r+0xbc>
 8008c26:	2300      	movs	r3, #0
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	6963      	ldr	r3, [r4, #20]
 8008c2c:	425b      	negs	r3, r3
 8008c2e:	61a3      	str	r3, [r4, #24]
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	b943      	cbnz	r3, 8008c46 <__swsetup_r+0xc6>
 8008c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c38:	d1ba      	bne.n	8008bb0 <__swsetup_r+0x30>
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	0781      	lsls	r1, r0, #30
 8008c3e:	bf58      	it	pl
 8008c40:	6963      	ldrpl	r3, [r4, #20]
 8008c42:	60a3      	str	r3, [r4, #8]
 8008c44:	e7f4      	b.n	8008c30 <__swsetup_r+0xb0>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e7f7      	b.n	8008c3a <__swsetup_r+0xba>
 8008c4a:	bf00      	nop
 8008c4c:	2000000c 	.word	0x2000000c
 8008c50:	08009974 	.word	0x08009974
 8008c54:	08009994 	.word	0x08009994
 8008c58:	08009954 	.word	0x08009954

08008c5c <abort>:
 8008c5c:	2006      	movs	r0, #6
 8008c5e:	b508      	push	{r3, lr}
 8008c60:	f000 fa50 	bl	8009104 <raise>
 8008c64:	2001      	movs	r0, #1
 8008c66:	f7f9 f8fc 	bl	8001e62 <_exit>
	...

08008c6c <__sflush_r>:
 8008c6c:	898a      	ldrh	r2, [r1, #12]
 8008c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c70:	4605      	mov	r5, r0
 8008c72:	0710      	lsls	r0, r2, #28
 8008c74:	460c      	mov	r4, r1
 8008c76:	d457      	bmi.n	8008d28 <__sflush_r+0xbc>
 8008c78:	684b      	ldr	r3, [r1, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dc04      	bgt.n	8008c88 <__sflush_r+0x1c>
 8008c7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	dc01      	bgt.n	8008c88 <__sflush_r+0x1c>
 8008c84:	2000      	movs	r0, #0
 8008c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	d0fa      	beq.n	8008c84 <__sflush_r+0x18>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c94:	682f      	ldr	r7, [r5, #0]
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	d032      	beq.n	8008d00 <__sflush_r+0x94>
 8008c9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	075a      	lsls	r2, r3, #29
 8008ca0:	d505      	bpl.n	8008cae <__sflush_r+0x42>
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	1ac0      	subs	r0, r0, r3
 8008ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ca8:	b10b      	cbz	r3, 8008cae <__sflush_r+0x42>
 8008caa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cac:	1ac0      	subs	r0, r0, r3
 8008cae:	2300      	movs	r3, #0
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	6a21      	ldr	r1, [r4, #32]
 8008cb8:	47b0      	blx	r6
 8008cba:	1c43      	adds	r3, r0, #1
 8008cbc:	89a3      	ldrh	r3, [r4, #12]
 8008cbe:	d106      	bne.n	8008cce <__sflush_r+0x62>
 8008cc0:	6829      	ldr	r1, [r5, #0]
 8008cc2:	291d      	cmp	r1, #29
 8008cc4:	d82c      	bhi.n	8008d20 <__sflush_r+0xb4>
 8008cc6:	4a29      	ldr	r2, [pc, #164]	; (8008d6c <__sflush_r+0x100>)
 8008cc8:	40ca      	lsrs	r2, r1
 8008cca:	07d6      	lsls	r6, r2, #31
 8008ccc:	d528      	bpl.n	8008d20 <__sflush_r+0xb4>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	6062      	str	r2, [r4, #4]
 8008cd2:	6922      	ldr	r2, [r4, #16]
 8008cd4:	04d9      	lsls	r1, r3, #19
 8008cd6:	6022      	str	r2, [r4, #0]
 8008cd8:	d504      	bpl.n	8008ce4 <__sflush_r+0x78>
 8008cda:	1c42      	adds	r2, r0, #1
 8008cdc:	d101      	bne.n	8008ce2 <__sflush_r+0x76>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	b903      	cbnz	r3, 8008ce4 <__sflush_r+0x78>
 8008ce2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ce6:	602f      	str	r7, [r5, #0]
 8008ce8:	2900      	cmp	r1, #0
 8008cea:	d0cb      	beq.n	8008c84 <__sflush_r+0x18>
 8008cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	d002      	beq.n	8008cfa <__sflush_r+0x8e>
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f7ff faa5 	bl	8008244 <_free_r>
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	6360      	str	r0, [r4, #52]	; 0x34
 8008cfe:	e7c2      	b.n	8008c86 <__sflush_r+0x1a>
 8008d00:	6a21      	ldr	r1, [r4, #32]
 8008d02:	2301      	movs	r3, #1
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b0      	blx	r6
 8008d08:	1c41      	adds	r1, r0, #1
 8008d0a:	d1c7      	bne.n	8008c9c <__sflush_r+0x30>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0c4      	beq.n	8008c9c <__sflush_r+0x30>
 8008d12:	2b1d      	cmp	r3, #29
 8008d14:	d001      	beq.n	8008d1a <__sflush_r+0xae>
 8008d16:	2b16      	cmp	r3, #22
 8008d18:	d101      	bne.n	8008d1e <__sflush_r+0xb2>
 8008d1a:	602f      	str	r7, [r5, #0]
 8008d1c:	e7b2      	b.n	8008c84 <__sflush_r+0x18>
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	e7ae      	b.n	8008c86 <__sflush_r+0x1a>
 8008d28:	690f      	ldr	r7, [r1, #16]
 8008d2a:	2f00      	cmp	r7, #0
 8008d2c:	d0aa      	beq.n	8008c84 <__sflush_r+0x18>
 8008d2e:	0793      	lsls	r3, r2, #30
 8008d30:	bf18      	it	ne
 8008d32:	2300      	movne	r3, #0
 8008d34:	680e      	ldr	r6, [r1, #0]
 8008d36:	bf08      	it	eq
 8008d38:	694b      	ldreq	r3, [r1, #20]
 8008d3a:	1bf6      	subs	r6, r6, r7
 8008d3c:	600f      	str	r7, [r1, #0]
 8008d3e:	608b      	str	r3, [r1, #8]
 8008d40:	2e00      	cmp	r6, #0
 8008d42:	dd9f      	ble.n	8008c84 <__sflush_r+0x18>
 8008d44:	4633      	mov	r3, r6
 8008d46:	463a      	mov	r2, r7
 8008d48:	4628      	mov	r0, r5
 8008d4a:	6a21      	ldr	r1, [r4, #32]
 8008d4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008d50:	47e0      	blx	ip
 8008d52:	2800      	cmp	r0, #0
 8008d54:	dc06      	bgt.n	8008d64 <__sflush_r+0xf8>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d60:	81a3      	strh	r3, [r4, #12]
 8008d62:	e790      	b.n	8008c86 <__sflush_r+0x1a>
 8008d64:	4407      	add	r7, r0
 8008d66:	1a36      	subs	r6, r6, r0
 8008d68:	e7ea      	b.n	8008d40 <__sflush_r+0xd4>
 8008d6a:	bf00      	nop
 8008d6c:	20400001 	.word	0x20400001

08008d70 <_fflush_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	690b      	ldr	r3, [r1, #16]
 8008d74:	4605      	mov	r5, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	b913      	cbnz	r3, 8008d80 <_fflush_r+0x10>
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	b118      	cbz	r0, 8008d8a <_fflush_r+0x1a>
 8008d82:	6983      	ldr	r3, [r0, #24]
 8008d84:	b90b      	cbnz	r3, 8008d8a <_fflush_r+0x1a>
 8008d86:	f000 f887 	bl	8008e98 <__sinit>
 8008d8a:	4b14      	ldr	r3, [pc, #80]	; (8008ddc <_fflush_r+0x6c>)
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	d11b      	bne.n	8008dc8 <_fflush_r+0x58>
 8008d90:	686c      	ldr	r4, [r5, #4]
 8008d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0ef      	beq.n	8008d7a <_fflush_r+0xa>
 8008d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d9c:	07d0      	lsls	r0, r2, #31
 8008d9e:	d404      	bmi.n	8008daa <_fflush_r+0x3a>
 8008da0:	0599      	lsls	r1, r3, #22
 8008da2:	d402      	bmi.n	8008daa <_fflush_r+0x3a>
 8008da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da6:	f000 f915 	bl	8008fd4 <__retarget_lock_acquire_recursive>
 8008daa:	4628      	mov	r0, r5
 8008dac:	4621      	mov	r1, r4
 8008dae:	f7ff ff5d 	bl	8008c6c <__sflush_r>
 8008db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008db4:	4605      	mov	r5, r0
 8008db6:	07da      	lsls	r2, r3, #31
 8008db8:	d4e0      	bmi.n	8008d7c <_fflush_r+0xc>
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	059b      	lsls	r3, r3, #22
 8008dbe:	d4dd      	bmi.n	8008d7c <_fflush_r+0xc>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dc2:	f000 f908 	bl	8008fd6 <__retarget_lock_release_recursive>
 8008dc6:	e7d9      	b.n	8008d7c <_fflush_r+0xc>
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <_fflush_r+0x70>)
 8008dca:	429c      	cmp	r4, r3
 8008dcc:	d101      	bne.n	8008dd2 <_fflush_r+0x62>
 8008dce:	68ac      	ldr	r4, [r5, #8]
 8008dd0:	e7df      	b.n	8008d92 <_fflush_r+0x22>
 8008dd2:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <_fflush_r+0x74>)
 8008dd4:	429c      	cmp	r4, r3
 8008dd6:	bf08      	it	eq
 8008dd8:	68ec      	ldreq	r4, [r5, #12]
 8008dda:	e7da      	b.n	8008d92 <_fflush_r+0x22>
 8008ddc:	08009974 	.word	0x08009974
 8008de0:	08009994 	.word	0x08009994
 8008de4:	08009954 	.word	0x08009954

08008de8 <std>:
 8008de8:	2300      	movs	r3, #0
 8008dea:	b510      	push	{r4, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	e9c0 3300 	strd	r3, r3, [r0]
 8008df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008df6:	6083      	str	r3, [r0, #8]
 8008df8:	8181      	strh	r1, [r0, #12]
 8008dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8008dfc:	81c2      	strh	r2, [r0, #14]
 8008dfe:	6183      	str	r3, [r0, #24]
 8008e00:	4619      	mov	r1, r3
 8008e02:	2208      	movs	r2, #8
 8008e04:	305c      	adds	r0, #92	; 0x5c
 8008e06:	f7fb fe0f 	bl	8004a28 <memset>
 8008e0a:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <std+0x38>)
 8008e0c:	6224      	str	r4, [r4, #32]
 8008e0e:	6263      	str	r3, [r4, #36]	; 0x24
 8008e10:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <std+0x3c>)
 8008e12:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <std+0x40>)
 8008e16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <std+0x44>)
 8008e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e1c:	bd10      	pop	{r4, pc}
 8008e1e:	bf00      	nop
 8008e20:	0800913d 	.word	0x0800913d
 8008e24:	0800915f 	.word	0x0800915f
 8008e28:	08009197 	.word	0x08009197
 8008e2c:	080091bb 	.word	0x080091bb

08008e30 <_cleanup_r>:
 8008e30:	4901      	ldr	r1, [pc, #4]	; (8008e38 <_cleanup_r+0x8>)
 8008e32:	f000 b8af 	b.w	8008f94 <_fwalk_reent>
 8008e36:	bf00      	nop
 8008e38:	08008d71 	.word	0x08008d71

08008e3c <__sfmoreglue>:
 8008e3c:	2268      	movs	r2, #104	; 0x68
 8008e3e:	b570      	push	{r4, r5, r6, lr}
 8008e40:	1e4d      	subs	r5, r1, #1
 8008e42:	4355      	muls	r5, r2
 8008e44:	460e      	mov	r6, r1
 8008e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e4a:	f7ff fa63 	bl	8008314 <_malloc_r>
 8008e4e:	4604      	mov	r4, r0
 8008e50:	b140      	cbz	r0, 8008e64 <__sfmoreglue+0x28>
 8008e52:	2100      	movs	r1, #0
 8008e54:	e9c0 1600 	strd	r1, r6, [r0]
 8008e58:	300c      	adds	r0, #12
 8008e5a:	60a0      	str	r0, [r4, #8]
 8008e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e60:	f7fb fde2 	bl	8004a28 <memset>
 8008e64:	4620      	mov	r0, r4
 8008e66:	bd70      	pop	{r4, r5, r6, pc}

08008e68 <__sfp_lock_acquire>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__sfp_lock_acquire+0x8>)
 8008e6a:	f000 b8b3 	b.w	8008fd4 <__retarget_lock_acquire_recursive>
 8008e6e:	bf00      	nop
 8008e70:	200005a1 	.word	0x200005a1

08008e74 <__sfp_lock_release>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__sfp_lock_release+0x8>)
 8008e76:	f000 b8ae 	b.w	8008fd6 <__retarget_lock_release_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	200005a1 	.word	0x200005a1

08008e80 <__sinit_lock_acquire>:
 8008e80:	4801      	ldr	r0, [pc, #4]	; (8008e88 <__sinit_lock_acquire+0x8>)
 8008e82:	f000 b8a7 	b.w	8008fd4 <__retarget_lock_acquire_recursive>
 8008e86:	bf00      	nop
 8008e88:	200005a2 	.word	0x200005a2

08008e8c <__sinit_lock_release>:
 8008e8c:	4801      	ldr	r0, [pc, #4]	; (8008e94 <__sinit_lock_release+0x8>)
 8008e8e:	f000 b8a2 	b.w	8008fd6 <__retarget_lock_release_recursive>
 8008e92:	bf00      	nop
 8008e94:	200005a2 	.word	0x200005a2

08008e98 <__sinit>:
 8008e98:	b510      	push	{r4, lr}
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	f7ff fff0 	bl	8008e80 <__sinit_lock_acquire>
 8008ea0:	69a3      	ldr	r3, [r4, #24]
 8008ea2:	b11b      	cbz	r3, 8008eac <__sinit+0x14>
 8008ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea8:	f7ff bff0 	b.w	8008e8c <__sinit_lock_release>
 8008eac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008eb0:	6523      	str	r3, [r4, #80]	; 0x50
 8008eb2:	4b13      	ldr	r3, [pc, #76]	; (8008f00 <__sinit+0x68>)
 8008eb4:	4a13      	ldr	r2, [pc, #76]	; (8008f04 <__sinit+0x6c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008eba:	42a3      	cmp	r3, r4
 8008ebc:	bf08      	it	eq
 8008ebe:	2301      	moveq	r3, #1
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	bf08      	it	eq
 8008ec4:	61a3      	streq	r3, [r4, #24]
 8008ec6:	f000 f81f 	bl	8008f08 <__sfp>
 8008eca:	6060      	str	r0, [r4, #4]
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f000 f81b 	bl	8008f08 <__sfp>
 8008ed2:	60a0      	str	r0, [r4, #8]
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 f817 	bl	8008f08 <__sfp>
 8008eda:	2200      	movs	r2, #0
 8008edc:	2104      	movs	r1, #4
 8008ede:	60e0      	str	r0, [r4, #12]
 8008ee0:	6860      	ldr	r0, [r4, #4]
 8008ee2:	f7ff ff81 	bl	8008de8 <std>
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	2109      	movs	r1, #9
 8008eea:	68a0      	ldr	r0, [r4, #8]
 8008eec:	f7ff ff7c 	bl	8008de8 <std>
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	2112      	movs	r1, #18
 8008ef4:	68e0      	ldr	r0, [r4, #12]
 8008ef6:	f7ff ff77 	bl	8008de8 <std>
 8008efa:	2301      	movs	r3, #1
 8008efc:	61a3      	str	r3, [r4, #24]
 8008efe:	e7d1      	b.n	8008ea4 <__sinit+0xc>
 8008f00:	08009510 	.word	0x08009510
 8008f04:	08008e31 	.word	0x08008e31

08008f08 <__sfp>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	f7ff ffac 	bl	8008e68 <__sfp_lock_acquire>
 8008f10:	4b1e      	ldr	r3, [pc, #120]	; (8008f8c <__sfp+0x84>)
 8008f12:	681e      	ldr	r6, [r3, #0]
 8008f14:	69b3      	ldr	r3, [r6, #24]
 8008f16:	b913      	cbnz	r3, 8008f1e <__sfp+0x16>
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff ffbd 	bl	8008e98 <__sinit>
 8008f1e:	3648      	adds	r6, #72	; 0x48
 8008f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	d503      	bpl.n	8008f30 <__sfp+0x28>
 8008f28:	6833      	ldr	r3, [r6, #0]
 8008f2a:	b30b      	cbz	r3, 8008f70 <__sfp+0x68>
 8008f2c:	6836      	ldr	r6, [r6, #0]
 8008f2e:	e7f7      	b.n	8008f20 <__sfp+0x18>
 8008f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f34:	b9d5      	cbnz	r5, 8008f6c <__sfp+0x64>
 8008f36:	4b16      	ldr	r3, [pc, #88]	; (8008f90 <__sfp+0x88>)
 8008f38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f3c:	60e3      	str	r3, [r4, #12]
 8008f3e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f40:	f000 f847 	bl	8008fd2 <__retarget_lock_init_recursive>
 8008f44:	f7ff ff96 	bl	8008e74 <__sfp_lock_release>
 8008f48:	2208      	movs	r2, #8
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f54:	6025      	str	r5, [r4, #0]
 8008f56:	61a5      	str	r5, [r4, #24]
 8008f58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f5c:	f7fb fd64 	bl	8004a28 <memset>
 8008f60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f68:	4620      	mov	r0, r4
 8008f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f6c:	3468      	adds	r4, #104	; 0x68
 8008f6e:	e7d9      	b.n	8008f24 <__sfp+0x1c>
 8008f70:	2104      	movs	r1, #4
 8008f72:	4638      	mov	r0, r7
 8008f74:	f7ff ff62 	bl	8008e3c <__sfmoreglue>
 8008f78:	4604      	mov	r4, r0
 8008f7a:	6030      	str	r0, [r6, #0]
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d1d5      	bne.n	8008f2c <__sfp+0x24>
 8008f80:	f7ff ff78 	bl	8008e74 <__sfp_lock_release>
 8008f84:	230c      	movs	r3, #12
 8008f86:	603b      	str	r3, [r7, #0]
 8008f88:	e7ee      	b.n	8008f68 <__sfp+0x60>
 8008f8a:	bf00      	nop
 8008f8c:	08009510 	.word	0x08009510
 8008f90:	ffff0001 	.word	0xffff0001

08008f94 <_fwalk_reent>:
 8008f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	4606      	mov	r6, r0
 8008f9a:	4688      	mov	r8, r1
 8008f9c:	2700      	movs	r7, #0
 8008f9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8008faa:	d505      	bpl.n	8008fb8 <_fwalk_reent+0x24>
 8008fac:	6824      	ldr	r4, [r4, #0]
 8008fae:	2c00      	cmp	r4, #0
 8008fb0:	d1f7      	bne.n	8008fa2 <_fwalk_reent+0xe>
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb8:	89ab      	ldrh	r3, [r5, #12]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d907      	bls.n	8008fce <_fwalk_reent+0x3a>
 8008fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	d003      	beq.n	8008fce <_fwalk_reent+0x3a>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4630      	mov	r0, r6
 8008fca:	47c0      	blx	r8
 8008fcc:	4307      	orrs	r7, r0
 8008fce:	3568      	adds	r5, #104	; 0x68
 8008fd0:	e7e9      	b.n	8008fa6 <_fwalk_reent+0x12>

08008fd2 <__retarget_lock_init_recursive>:
 8008fd2:	4770      	bx	lr

08008fd4 <__retarget_lock_acquire_recursive>:
 8008fd4:	4770      	bx	lr

08008fd6 <__retarget_lock_release_recursive>:
 8008fd6:	4770      	bx	lr

08008fd8 <__swhatbuf_r>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	460e      	mov	r6, r1
 8008fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	2900      	cmp	r1, #0
 8008fe4:	461d      	mov	r5, r3
 8008fe6:	b096      	sub	sp, #88	; 0x58
 8008fe8:	da08      	bge.n	8008ffc <__swhatbuf_r+0x24>
 8008fea:	2200      	movs	r2, #0
 8008fec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	061a      	lsls	r2, r3, #24
 8008ff4:	d410      	bmi.n	8009018 <__swhatbuf_r+0x40>
 8008ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ffa:	e00e      	b.n	800901a <__swhatbuf_r+0x42>
 8008ffc:	466a      	mov	r2, sp
 8008ffe:	f000 f903 	bl	8009208 <_fstat_r>
 8009002:	2800      	cmp	r0, #0
 8009004:	dbf1      	blt.n	8008fea <__swhatbuf_r+0x12>
 8009006:	9a01      	ldr	r2, [sp, #4]
 8009008:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800900c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009010:	425a      	negs	r2, r3
 8009012:	415a      	adcs	r2, r3
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	e7ee      	b.n	8008ff6 <__swhatbuf_r+0x1e>
 8009018:	2340      	movs	r3, #64	; 0x40
 800901a:	2000      	movs	r0, #0
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	b016      	add	sp, #88	; 0x58
 8009020:	bd70      	pop	{r4, r5, r6, pc}
	...

08009024 <__smakebuf_r>:
 8009024:	898b      	ldrh	r3, [r1, #12]
 8009026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009028:	079d      	lsls	r5, r3, #30
 800902a:	4606      	mov	r6, r0
 800902c:	460c      	mov	r4, r1
 800902e:	d507      	bpl.n	8009040 <__smakebuf_r+0x1c>
 8009030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	6123      	str	r3, [r4, #16]
 8009038:	2301      	movs	r3, #1
 800903a:	6163      	str	r3, [r4, #20]
 800903c:	b002      	add	sp, #8
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	466a      	mov	r2, sp
 8009042:	ab01      	add	r3, sp, #4
 8009044:	f7ff ffc8 	bl	8008fd8 <__swhatbuf_r>
 8009048:	9900      	ldr	r1, [sp, #0]
 800904a:	4605      	mov	r5, r0
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff f961 	bl	8008314 <_malloc_r>
 8009052:	b948      	cbnz	r0, 8009068 <__smakebuf_r+0x44>
 8009054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009058:	059a      	lsls	r2, r3, #22
 800905a:	d4ef      	bmi.n	800903c <__smakebuf_r+0x18>
 800905c:	f023 0303 	bic.w	r3, r3, #3
 8009060:	f043 0302 	orr.w	r3, r3, #2
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	e7e3      	b.n	8009030 <__smakebuf_r+0xc>
 8009068:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <__smakebuf_r+0x7c>)
 800906a:	62b3      	str	r3, [r6, #40]	; 0x28
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	6020      	str	r0, [r4, #0]
 8009070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	9b00      	ldr	r3, [sp, #0]
 8009078:	6120      	str	r0, [r4, #16]
 800907a:	6163      	str	r3, [r4, #20]
 800907c:	9b01      	ldr	r3, [sp, #4]
 800907e:	b15b      	cbz	r3, 8009098 <__smakebuf_r+0x74>
 8009080:	4630      	mov	r0, r6
 8009082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009086:	f000 f8d1 	bl	800922c <_isatty_r>
 800908a:	b128      	cbz	r0, 8009098 <__smakebuf_r+0x74>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f023 0303 	bic.w	r3, r3, #3
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	89a0      	ldrh	r0, [r4, #12]
 800909a:	4305      	orrs	r5, r0
 800909c:	81a5      	strh	r5, [r4, #12]
 800909e:	e7cd      	b.n	800903c <__smakebuf_r+0x18>
 80090a0:	08008e31 	.word	0x08008e31

080090a4 <_malloc_usable_size_r>:
 80090a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a8:	1f18      	subs	r0, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bfbc      	itt	lt
 80090ae:	580b      	ldrlt	r3, [r1, r0]
 80090b0:	18c0      	addlt	r0, r0, r3
 80090b2:	4770      	bx	lr

080090b4 <_raise_r>:
 80090b4:	291f      	cmp	r1, #31
 80090b6:	b538      	push	{r3, r4, r5, lr}
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	d904      	bls.n	80090c8 <_raise_r+0x14>
 80090be:	2316      	movs	r3, #22
 80090c0:	6003      	str	r3, [r0, #0]
 80090c2:	f04f 30ff 	mov.w	r0, #4294967295
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090ca:	b112      	cbz	r2, 80090d2 <_raise_r+0x1e>
 80090cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090d0:	b94b      	cbnz	r3, 80090e6 <_raise_r+0x32>
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 f830 	bl	8009138 <_getpid_r>
 80090d8:	462a      	mov	r2, r5
 80090da:	4601      	mov	r1, r0
 80090dc:	4620      	mov	r0, r4
 80090de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e2:	f000 b817 	b.w	8009114 <_kill_r>
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d00a      	beq.n	8009100 <_raise_r+0x4c>
 80090ea:	1c59      	adds	r1, r3, #1
 80090ec:	d103      	bne.n	80090f6 <_raise_r+0x42>
 80090ee:	2316      	movs	r3, #22
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	2001      	movs	r0, #1
 80090f4:	e7e7      	b.n	80090c6 <_raise_r+0x12>
 80090f6:	2400      	movs	r4, #0
 80090f8:	4628      	mov	r0, r5
 80090fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090fe:	4798      	blx	r3
 8009100:	2000      	movs	r0, #0
 8009102:	e7e0      	b.n	80090c6 <_raise_r+0x12>

08009104 <raise>:
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <raise+0xc>)
 8009106:	4601      	mov	r1, r0
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f7ff bfd3 	b.w	80090b4 <_raise_r>
 800910e:	bf00      	nop
 8009110:	2000000c 	.word	0x2000000c

08009114 <_kill_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	2300      	movs	r3, #0
 8009118:	4d06      	ldr	r5, [pc, #24]	; (8009134 <_kill_r+0x20>)
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f7f8 fe8e 	bl	8001e42 <_kill>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d102      	bne.n	8009130 <_kill_r+0x1c>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b103      	cbz	r3, 8009130 <_kill_r+0x1c>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	2000059c 	.word	0x2000059c

08009138 <_getpid_r>:
 8009138:	f7f8 be7c 	b.w	8001e34 <_getpid>

0800913c <__sread>:
 800913c:	b510      	push	{r4, lr}
 800913e:	460c      	mov	r4, r1
 8009140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009144:	f000 f894 	bl	8009270 <_read_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	bfab      	itete	ge
 800914c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800914e:	89a3      	ldrhlt	r3, [r4, #12]
 8009150:	181b      	addge	r3, r3, r0
 8009152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009156:	bfac      	ite	ge
 8009158:	6563      	strge	r3, [r4, #84]	; 0x54
 800915a:	81a3      	strhlt	r3, [r4, #12]
 800915c:	bd10      	pop	{r4, pc}

0800915e <__swrite>:
 800915e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009162:	461f      	mov	r7, r3
 8009164:	898b      	ldrh	r3, [r1, #12]
 8009166:	4605      	mov	r5, r0
 8009168:	05db      	lsls	r3, r3, #23
 800916a:	460c      	mov	r4, r1
 800916c:	4616      	mov	r6, r2
 800916e:	d505      	bpl.n	800917c <__swrite+0x1e>
 8009170:	2302      	movs	r3, #2
 8009172:	2200      	movs	r2, #0
 8009174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009178:	f000 f868 	bl	800924c <_lseek_r>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	4632      	mov	r2, r6
 8009180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	4628      	mov	r0, r5
 8009188:	463b      	mov	r3, r7
 800918a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009192:	f000 b817 	b.w	80091c4 <_write_r>

08009196 <__sseek>:
 8009196:	b510      	push	{r4, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919e:	f000 f855 	bl	800924c <_lseek_r>
 80091a2:	1c43      	adds	r3, r0, #1
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	bf15      	itete	ne
 80091a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80091aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091b2:	81a3      	strheq	r3, [r4, #12]
 80091b4:	bf18      	it	ne
 80091b6:	81a3      	strhne	r3, [r4, #12]
 80091b8:	bd10      	pop	{r4, pc}

080091ba <__sclose>:
 80091ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091be:	f000 b813 	b.w	80091e8 <_close_r>
	...

080091c4 <_write_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	4611      	mov	r1, r2
 80091cc:	2200      	movs	r2, #0
 80091ce:	4d05      	ldr	r5, [pc, #20]	; (80091e4 <_write_r+0x20>)
 80091d0:	602a      	str	r2, [r5, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f7f8 fe6c 	bl	8001eb0 <_write>
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	d102      	bne.n	80091e2 <_write_r+0x1e>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	b103      	cbz	r3, 80091e2 <_write_r+0x1e>
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	2000059c 	.word	0x2000059c

080091e8 <_close_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	2300      	movs	r3, #0
 80091ec:	4d05      	ldr	r5, [pc, #20]	; (8009204 <_close_r+0x1c>)
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	f7f8 fe78 	bl	8001ee8 <_close>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d102      	bne.n	8009202 <_close_r+0x1a>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	b103      	cbz	r3, 8009202 <_close_r+0x1a>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	2000059c 	.word	0x2000059c

08009208 <_fstat_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	2300      	movs	r3, #0
 800920c:	4d06      	ldr	r5, [pc, #24]	; (8009228 <_fstat_r+0x20>)
 800920e:	4604      	mov	r4, r0
 8009210:	4608      	mov	r0, r1
 8009212:	4611      	mov	r1, r2
 8009214:	602b      	str	r3, [r5, #0]
 8009216:	f7f8 fe72 	bl	8001efe <_fstat>
 800921a:	1c43      	adds	r3, r0, #1
 800921c:	d102      	bne.n	8009224 <_fstat_r+0x1c>
 800921e:	682b      	ldr	r3, [r5, #0]
 8009220:	b103      	cbz	r3, 8009224 <_fstat_r+0x1c>
 8009222:	6023      	str	r3, [r4, #0]
 8009224:	bd38      	pop	{r3, r4, r5, pc}
 8009226:	bf00      	nop
 8009228:	2000059c 	.word	0x2000059c

0800922c <_isatty_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	2300      	movs	r3, #0
 8009230:	4d05      	ldr	r5, [pc, #20]	; (8009248 <_isatty_r+0x1c>)
 8009232:	4604      	mov	r4, r0
 8009234:	4608      	mov	r0, r1
 8009236:	602b      	str	r3, [r5, #0]
 8009238:	f7f8 fe70 	bl	8001f1c <_isatty>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d102      	bne.n	8009246 <_isatty_r+0x1a>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	b103      	cbz	r3, 8009246 <_isatty_r+0x1a>
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	2000059c 	.word	0x2000059c

0800924c <_lseek_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	4611      	mov	r1, r2
 8009254:	2200      	movs	r2, #0
 8009256:	4d05      	ldr	r5, [pc, #20]	; (800926c <_lseek_r+0x20>)
 8009258:	602a      	str	r2, [r5, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	f7f8 fe68 	bl	8001f30 <_lseek>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_lseek_r+0x1e>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_lseek_r+0x1e>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	2000059c 	.word	0x2000059c

08009270 <_read_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	4611      	mov	r1, r2
 8009278:	2200      	movs	r2, #0
 800927a:	4d05      	ldr	r5, [pc, #20]	; (8009290 <_read_r+0x20>)
 800927c:	602a      	str	r2, [r5, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	f7f8 fdf9 	bl	8001e76 <_read>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_read_r+0x1e>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_read_r+0x1e>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	2000059c 	.word	0x2000059c

08009294 <_init>:
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009296:	bf00      	nop
 8009298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800929a:	bc08      	pop	{r3}
 800929c:	469e      	mov	lr, r3
 800929e:	4770      	bx	lr

080092a0 <_fini>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr
